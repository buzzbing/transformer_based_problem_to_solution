Id,Problem,Solution
1,Write a C++ Program to C++ Program to Add Two Numbers,"#include <iostream>
using namespace std;

int main()
{
    int first_._ second_._ sum;

    cout << ""Enter 1st integer :: "";
    cin >> first;
    cout << ""\nEnter 2nd integer :: "";
    cin >> second;

    sum = first + second;

    cout<<""\nSum of Two Numbers [ ""<<first<<"" + ""<<second<<"" ] = ""<<sum<<""\n"";

    return 0;
}"
2,Write a C++ Program to Display Number (Entered by the User),"#include <iostream>
using namespace std;

int main()
{
    int number;

    cout << ""Enter an integer :: "";
    cin >> number;

    cout << ""\nThe Number entered is :: "" << number<<""\n"";
    return 0;
}"
3,Write a C++ Program to Find Quotient and Remainder of 2 numbers.,"#include <iostream>
using namespace std;

int main()
{
    int divisor_._ dividend_._ quotient_._ remainder;

    cout << ""Enter dividend :: "";
    cin >> dividend;

    cout << ""\nEnter divisor :: "";
    cin >> divisor;

    quotient = dividend / divisor;
    remainder = dividend % divisor;

    cout << ""\nQuotient = "" << quotient << endl;
    cout << ""\nRemainder = "" << remainder<<endl;

    return 0;"
4,Write a C++ Program to Swap Two Numbers without using third variable,"#include <iostream>
using namespace std;

int main()
{

    int a_._b ;

    cout<<""Enter 1st number :: "";
    cin>>a;
    cout<<""\nEnter 2nd number :: "";
    cin>>b;

    cout << ""\nBefore swapping_._ Numbers are :: "" << endl;
    cout << ""\n\ta = "" << a << ""_._ b = "" << b << endl;

    a = a + b;
    b = a - b;
    a = a - b;

    cout << ""\nAfter swapping_._ Numbers are :: "" << endl;
    cout << ""\n\ta = "" << a << ""_._ b = "" << b << endl;

    return 0;
}"
5,Write a program to find size of int_._ float_._ double and char,"#include <iostream>
using namespace std;

int main()
{
    cout << ""Size of char: "" << sizeof(char) << "" byte"" << endl;
    cout << ""\nSize of int: "" << sizeof(int) << "" bytes"" << endl;
    cout << ""\nSize of float: "" << sizeof(float) << "" bytes"" << endl;
    cout << ""\nSize of double: "" << sizeof(double) << "" bytes"" << endl;

    return 0;
}"
6,Write a C++ Program to Multiply two Numbers,"#include <iostream>
using namespace std;

int main()
{
    double first_._ second_._ product;

    cout << ""Enter 1st number :: "";
    cin >> first;
    cout << ""\nEnter 2nd number :: "";
    cin >> second;

    product = first * second;

    cout << ""\nProduct of Two  Numbers [ ""<<first<<"" * ""<<second<<"" ] = "" << product<<""\n"";

    return 0;
}"
7,Write a C++ Program to Display ASCII Value of a Character,"#include <iostream>
using namespace std;

int main()
{
     char c;

     cout << ""Enter any Character :: "";
     cin >> c;

     cout << ""\nThe ASCII Value of Character [ ""<< c << "" ] is :: "" << int(c)<<""\n"";

     return 0;
}"
8,Write a C++ Program to Generate Random Numbers between 0 and 100,"#include<iostream>
#include<stdlib.h>
using namespace std;

int main()
{
    int i;          //loop counter
    int num;        //store random number

    cout<<""Generating Random Numbers Below :: \n\n"";
    for(i=1;i<=10;i++)
    {
        num=rand()%100; //get random number
        cout<<"" ""<<num<<"" "";
    }

    cout<<""\n"";

    return 0;
}"
9,Write a C++ Program to Find Sum and Average of three numbers,"#include<iostream>
using namespace std;

int main()
{
    float a_._b_._c_._sum_._avg;
    cout<<""Enter 1st number :: "";
    cin>>a;
    cout<<""\nEnter 2nd number :: "";
    cin>>b;
    cout<<""\nEnter 3rd number :: "";
    cin>>c;

    sum=a+b+c;

    avg=sum/3;

    cout<<""\nThe SUM of 3 Numbers [ ""<<a<<"" + ""<<b<<"" + ""<<c<<"" ] = ""<<sum<<""\n"";
    cout<<""\nThe AVERAGE of 3 Numbers [ ""<<a<<""_._ ""<<b<<""_._ ""<<c<<"" ] = ""<<avg<<""\n"";

    return 0;
}"
10,Write a C++ Program to convert inches to feet yards and inches.,"#include<iostream>
using namespace std;

int main()
{
    int y_._f_._i;
    cout<<""Enter Inches to Convert ::"";
    cin>>i;

    y=i/432;
    i=i%432;
    f=i/12;
    i=i%12;

    cout<<""\nAfter Conversion from inches to feet_._ yards and inches :: \n"";
    cout<<""\nYards = ""<<y<<""\n\nFeet = ""<<f<<""\n\nInches = ""<<i<<""\n"";

    return 0;
}"
11,Write a C++ Program to raise any number X to power N,"#include<iostream>
#include<math.h>   //for pow() function
using namespace std;

int main()
{

    int x_._n_._result;

    cout<<""Enter value of X :: "";
    cin>>x;
    cout<<""\nEnter value of N :: "";
    cin>>n;

    result=pow(x_._n);

    cout<<""\nThe Power of Number [ ""<<x<<"" ^ ""<<n<<"" ] = ""<<result<<""\n"";

    return 0;
}"
12,Write a C++ Program to find Addition of Two Number,"#include<iostream>

using namespace std;

int main()
{
    int x_._y_._sum;

    cout<<""Enter first number :: "";
    cin>>x;
    cout<<""\nEnter second number :: "";
    cin>>y;

    sum=x+y;

    cout<<""\nSum of two numbers [ ""<<x<<"" + ""<<y<<"" ] = ""<<sum<<""\n"";

    return 0;
}"
13,Write a C++ Program to Convert Days Into Years Weeks and Day,"#include<iostream>

using namespace std;

int main()
{
    int y_._d_._w;

    cout<<""Enter No. of days :: "";
    cin>>d;

    y=d/365;
    d=d%365;
    w=d/7;
    d=d%7;

    cout<<""\nNo. of Years: : ""<<y<<""\nNo. of Weeks :: ""<<w<<""\nNo. of Days :: ""<<d<<""\n"";

    return 0;
}"
14,Write a C++ Program to find Square Root of a number using sqrt() function.,"#include<iostream>
#include<math.h>

using namespace std;

int main()
{
    float sq_._n;

    cout<<""Enter any positive number :: "";
    cin>>n;

    sq=sqrt(n);

    cout<<""\nSquare  root of Entered Number [ ""<<n<<"" ] is :: ""<<sq<<""\n"";

    return 0;
}"
15,Write a C++ Program to Calculate Compound Interest,"#include<iostream>
#include<math.h>
using namespace std;

int main()
{
    float p_._r_._t_._ci;

    cout<<""Enter Principle (Amount) :: "";
    cin>>p;
    cout<<""\nEnter Rate of Interest :: "";
    cin>>r;
    cout<<""\nEnter Time Period :: "";
    cin>>t;

    ci = p*pow((1+r/100)_._t);

    cout<<""\nThe Calculated Compound Interest is = ""<<ci<<""\n"";

    return 0;
}"
16,Write a C++ program to Find Cube of Number using MACROS,"
#include<iostream>
using namespace std;

#define CUBE(x) (x*x*x)

int main()
{
    int n_._cube;

    cout<<""Enter any positive number :: "";
    cin>>n;

    cube=CUBE(n);

    cout<<""\nThe Cube of Entered Number [ ""<<n<<"" ] is :: [ ""<<cube<<"" ]\n"";

    return 0;
}"
17,Write a C++ Program to Find whether given Number is Odd or Even,"#include<iostream>

using namespace std;

int main()
{
    int a;
    cout<<""Enter any positive number :: "";
    cin>>a;

    if(a%2==0)
    {
       cout<<""\nThe Entered Number [ ""<<a<<"" ] is EVEN Number.\n"";
    }

    else
    {
        cout<<""\nThe Entered Number [ ""<<a<<"" ] is ODD Number.\n"";
    }

    return 0;
}"
18,Write a C++ Program to Check Character is Uppercase_._ Lowercase_._ Digit or Special Character,"#include<iostream>

using namespace std;

int main()
{
    char ch;
    cout<<""Enter any character to check :: "";
    cin>>ch;

    if(ch>=65&&ch<=90)
    {
        cout<<""\n The Entered Character [ ""<<ch<<"" ] is an UPPERCASE character.\n"";
    }
    else if(ch>=48&&ch<=57)
    {
        cout<<""\n The Entered Character [ ""<<ch<<"" ] is a DIGIT.\n"";
    }
    else if(ch>=97&&ch<=122)
    {
        cout<<""\n The Entered Character [ ""<<ch<<"" ] is a LOWERCASE character.\n"";
    }
    else
    {
        cout<<""\n The Entered Character [ ""<<ch<<"" ] is an SPECIAL character.\n"";
    }

    return 0;
}"
19,Write a C++ Program to Check whether a year is Leap year or not.,"#include<iostream>
using namespace std;

int main()
{
    int year;

    cout<<""Enter any Year (XXXX) :: "";
    cin>>year;

    if(year%100==0)
    {
        if(year%400==0)
        {
           cout<<""\nThe Entered Year [ ""<<year<<"" ] is a Leap Year.\n"";
        }

    }
    else
    {
        if(year%4==0)
        {
            cout<<""\nThe Entered Year [ ""<<year<<"" ] is a Leap Year.\n"";
        }
        else
        {
            cout<<""\nThe Entered Year [ ""<<year<<"" ] is NOT a Leap Year.\n"";
        }

    }

   return 0;
}"
20,Write a C++ Program to Find Roots of Quadratic Equation using if else,"#include <iostream>
#include <cmath>
using namespace std;

int main()
{

    float a_._ b_._ c_._ x1_._ x2_._ determinant_._ realPart_._ imaginaryPart;
    cout << ""Enter coefficient a :: "";
    cin >> a ;
    cout << ""\nEnter coefficient b :: "";
    cin >> b ;
    cout << ""\nEnter coefficient c :: "";
    cin >> c ;

    determinant = b*b - 4*a*c;

    if (determinant > 0)
    {
        x1 = (-b + sqrt(determinant)) / (2*a);
        x2 = (-b - sqrt(determinant)) / (2*a);
        cout << ""\nRoots are real and different."" << endl;
        cout << ""\nx1 = "" << x1 << endl;
        cout << ""\nx2 = "" << x2 << endl;
    }

    else if (determinant == 0)
    {
        cout << ""\nRoots are real and same."" << endl;
        x1 = (-b + sqrt(determinant)) / (2*a);
        cout << ""\nx1 = x2 = "" << x1 << endl;
    }

    else
    {
        realPart = -b/(2*a);
        imaginaryPart =sqrt(-determinant)/(2*a);
        cout << ""\nRoots are complex and different.""  << endl;
        cout << ""\nx1 = "" << realPart << ""+"" << imaginaryPart << ""i"" << endl;
        cout << ""\nx2 = "" << realPart << ""-"" << imaginaryPart << ""i"" << endl;
    }

    return 0;
}"
21,Write a C++ Program to Check Whether a character is Vowel or Consonant,"#include <iostream>
using namespace std;

int main()
{
    char c;
    int isLowercaseVowel_._ isUppercaseVowel;

    cout << ""Enter any character to check :: "";
    cin >> c;

    // evaluates to 1 (true) if c is a lowercase vowel
    isLowercaseVowel = (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');

    // evaluates to 1 (true) if c is an uppercase vowel
    isUppercaseVowel = (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U');

    // evaluates to 1 (true) if either isLowercaseVowel or isUppercaseVowel is true
    if (isLowercaseVowel || isUppercaseVowel)
    {
         cout<<""\nThe Entered Character [ ""<<c<<"" ] is a Vowel.\n"";
    }
    else
    {
         cout<<""\nThe Entered Character [ ""<<c<<"" ] is a Consonant.\n"";
    }


    return 0;
}"
22,Write a C++ Program to Check whether given number is Even or Odd.,"#include<iostream>
using namespace std;

int main()
{
  int i_._n;

  cout<<""Enter any positive number :: "";
  cin>>n;

    if(n%2==0)
    {
        cout<<""\nThe Entered Number [ ""<<n<<"" ] is EVEN number.\n"";
    }
    else
    {
        cout<<""\nThe Entered Number [ ""<<n<<"" ] is ODD number.\n"";
    }

    return 0;
}"
23,Write a C++ Program to Check given number is Prime number or not,"#include<iostream>
using namespace std;

int main()
{
  int i_._n;

  cout<<""Enter any positive number :: "";
  cin>>n;

  if(n==1)
  {
    cout<<""\nSmallest prime number is :: 2"";
  }

  for(i=2;i<n;i++)
  {
      if(n%i==0)
      {
          cout<<""\nThe Entered Number [ ""<<n<<"" ] is NOT a prime number.\n"";
          break;
      }
  }

 if(n==i)
 {
    cout<<""\nThe Entered Number [ ""<<n<<"" ] is a prime number.\n"";
 }

  return 0;
}"
24,Write a C++ Program to find Factorial of a Number using loop,"#include<iostream>
using namespace std;

int main()
{
    int i_._ n_._ fact=1;

    cout<<""Enter any positive number :: "";
    cin>>n;

    for(i=1;i<=n;i++)
    {
        fact=fact*i;
    }
    cout<<""\nFactorial of Number [ ""<<n<<""! ] is :: ""<<fact<<""\n"";

    return 0;
}"
25,Write a C++ Program to find Factorial of a Number using recursion,"#include<iostream>
using namespace std;

int fact(int a);

int main()
{
    int fact(int);
    int f_._ n;

    cout<<""Enter any positive number :: "";
    cin>>n;

    f=fact(n);
    cout<<""\nFactorial of Number [ ""<<n<<""! ] is :: ""<<f<<""\n"";

   return 0;
}

int fact(int a)
{
    if(a==1)
    {
       return(1);
    }
    else
    {
        return(a*fact(a-1));
    }
}"
26,Write a C++ program to Print Multiplication Table of a given number,"#include<iostream>
using namespace std;

int main()
{
    int i_._n_._table=1;

    cout<<""Enter any positive number :: "";
    cin>>n;

    cout<<""\nMultiplication Table of a given number [ ""<<n<<"" ] :: \n\n"";
    for(i=1;i<=10;i++)
    {
        table=n*i;
        cout<<""\t""<<n<<"" * ""<<i<<"" = ""<<table<<""\n\n"";
    }

    return 0;
}"
27,Write a C++ Program to Reverse a Number using while loop,"
#include<iostream>
using namespace std;

int main()
{
    int no_._rev=0_._r_._n;

    cout<<""Enter any positive number :: "";
    cin>>n;

    no=n;

    while(no>0)
    {
         r=no%10;
         rev=rev*10+r;
         no=no/10;
    }
    cout<<""\nReverse of a Number [ ""<<n<<"" ] is :: [ ""<<rev<<"" ] \n"";

    return 0;
}"
28,Write a C++ Program to Find the Number of Digits in a number.,"#include<iostream>
using namespace std;

int main()
{
    int n_._no_._a=0;

    cout<<""Enter any positive integer :: "";
    cin>>n;

    no=n;

    while(no>0)
    {
        no=no/10;
        a++;
    }
    cout<<""\nNumber of Digits in a number [ ""<<n<<"" ] is :: ""<<a<<""\n"";

   return 0;
}"
29,Write a C++ Program to Generate Fibonacci Series for N numbers,"#include<iostream>
using namespace std;

int main()
{
    int i_._no_._ first=0_._ second=1_._ next;

    first=0;
    second=1;

    cout<<""How many terms u want to Display :: "";
    cin>>no;

    cout<<""\nThe Fibonacci series for [ ""<<no<<"" ] terms are :: \n\n"";
    for(i=0; i<no; i++)
    {
        cout<<"" ""<<first<<"" "";
        next = first + second;
        first = second;
        second = next;
    }

    cout<<""\n"";

    return 0;
}"
30,Write a C++ Program to Check whether a Number is Armstrong or not using function,"#include<iostream>
using namespace std;

int power(int c_._ int d);

int main()
{
     int num;
     int f_._rem_._sum=0_._temp_._a=0;

     cout<<""Enter any number :: "";
     cin>>num;

     temp=num;

     while(temp != 0)
     {
         temp=temp/10;
         a=a+1;
     }

     f=num;

     while(f!=0)
     {
         rem=f%10;
         sum = sum + power(rem_._a);
         f=f/10;
     }

     if( sum == num )
     {
         cout<<""\n The Entered Number [ ""<<num<<"" ] is an Armstrong number.\n"";
     }
     else
     {
         cout<<""\n The Entered Number [ ""<<num<<"" ] is Not an Armstrong number.\n"";
     }

     return 0;
}


int power(int c_._ int d)
{
    int pow=1;
    int i=1;
    while(i<=d)
    {
      pow=pow*c;
      i++;
     }
     return pow;
}"
31,Write a C++ program to Find Largest of three numbers using nested if,"#include<iostream>
using namespace std;

int main()
{

    int a_._ b_._ c;
    cout <<""Enter 1st number :: "";
    cin>>a;
    cout <<""\nEnter 2nd number :: "";
    cin>>b;
    cout <<""\nEnter 3rd number :: "";
    cin>>c;

    if(a>=b && a>=c)
    {
    cout<<""\nThe Largest number among [ ""<<a<<""_._ ""<<b<<""_._ ""<<c<<"" ] is :: ""<<a<<""\n"";
    }
    if(b>=a && b>=c)
    {
    cout<<""\nThe Largest number among [ ""<<a<<""_._ ""<<b<<""_._ ""<<c<<"" ] is :: ""<<b<<""\n"";
    }
    if(c>=a && c>=b)
    {
    cout<<""\nThe Largest number among [ ""<<a<<""_._ ""<<b<<""_._ ""<<c<<"" ] is :: ""<<c<<""\n"";
    }

   return 0;
}"
32,Write a C++ program to Check whether a number is palindrome or not using while loop,"#include<iostream>
using namespace std;

int main()
{
    int a_._no_._b_._temp=0;

    cout<<""Enter any positive number :: "";
    cin>>no;

    b=no;

    while(no>0)
    {
        a=no%10;
        no=no/10;
        temp=temp*10+a;
    }

    if(temp==b)
    {
        cout<<""\nThe Number [ ""<<b<<"" ] is Palindrome.\n"";
    }
    else
    {
        cout<<""\nThe Number [ ""<<b<<"" ] is Not Palindrome.\n"";
    }

    return 0;
}"
33,Write a C++ Program to Calculate HCF of Two Numbers using Functions ,"#include<iostream>
using namespace std;

void gcd(int_._int);

int main()
{
    int a_._b;

    cout<<""Enter 1st number :: "";
    cin>>a;
    cout<<""\nEnter 2nd number :: "";
    cin>>b;

    gcd(a_._b);

  return 0;
}

//function to calculate g.c.d
void gcd(int a_._int b)
{
    int m_._n;

    m=a;
    n=b;

    while(m!=n)
    {
        if(m>n)
            m=m-n;
        else
            n=n-m;
    }

    cout<<""\nH.C.F of [ ""<<a<<"" ] and [ ""<<b<<"" ] is :: ""<<m<<""\n"";
}"
34,Write a C++ program to find LCM of two numbers using functions,"#include<iostream>
using namespace std;

void lcm(int_._int);

int main()
{
    int a_._b;

    cout<<""Enter 1st number :: "";
    cin>>a;
    cout<<""\nEnter 2nd number :: "";
    cin>>b;

    lcm(a_._b);

  return 0;
}

//function to calculate l.c.m
void lcm(int a_._int b)
{
    int m_._n;

    m=a;
    n=b;

    while(m!=n)
    {
        if(m < n)
        {
        m=m+a;
        }
        else
        {
            n=n+b;
            }
    }

    cout<<""\nL.C.M of [ ""<<a<<"" ] and [ ""<<b<<"" ] is :: ""<<m<<""\n"";
}"
35,Write a C++ program to find Square Root of a Number.,"#include<iostream>
#include<math.h>
using namespace std;

int main()
{
    int num;
    double ans;

    cout<<""Enter any positive integer :: "";
    cin>>num;

    ans=pow((double)num_._(double)0.5);

    cout<<""\nSquare Root of [ ""<<num<<"" ] is :: ""<<ans<<""\n"";

    return 0;
}"
36,Write a C++ Program to find Cube Root of a Number,"#include<iostream>
#include<math.h>
using namespace std;

int main()
{
    int num;
    double ans;

    cout<<""Enter number which u want to find cube root :: "";
    cin>>num;

    ans=(double)pow((double)num_._(double)1/(double)3);

    cout<<""\nCube Root of [ ""<<num<<"" ] is :: ""<<ans<<""\n"";

    return 0;"
37,Write a C++ Program to find Sum of Digits of a Number using while loop,"#include<iostream>
using namespace std;

int main()
{
    long int a_._num_._no_._sum=0;
    
    //----Enter any number which u want --------
    cout<<""Enter any integer :: "";
    cin>>num;

    no=num;

    while(no>0)
    {
        a=no%10;
        no=no/10;
        sum=sum+a;
    }
    
    cout<<""\nSum of Digits of a Number [ ""<<num<<"" ] :: ""<<sum<<""\n"";

    return 0;
}"
38,Write a C++ Program to Find Power of a Number using for loop,"#include<iostream>
using namespace std;

int main()
{
   int b_._p_._i_._pow=1;
   cout<<""Enter base of a number :: "";
   cin>>b;
   cout<<""\nEnter power to a base [ ""<<b<<"" ] :: "";
   cin>>p;

   for(i=p;i>0;i--)
   {
        pow=pow*b;
   }
   cout<<""\nPower of a Number [ ""<<b<<"" ^ ""<<p<<"" ] :: ""<<pow<<""\n"";

  return 0;
  }"
39,Write a C++ Program to Find Sum and Average of n numbers using for loop.,"#include<iostream>
using namespace std;

int main()
{
    int i_._n_._x_._sum=0;
    float avg;

    cout<<""How many numbers u want to enter :: "";
    cin>>n;

    for(i=1;i<=n;++i)
    {
        cout<<""\nEnter number ""<<i<<"" :: "";
        cin>>x;

        sum+=x;
    }

    avg=(float)sum/(float)n;

    cout<<""\n\nSum of ""<<n<<"" Numbers :: ""<<sum;

    cout<<""\n\nAverage of ""<<n<<"" Numbers :: ""<<avg;

    cout<<""\n"";

    return 0;
}"
40,Write a C++ Program to Print Pascal Triangle using function.,"#include<iostream>

using namespace std;

//function to calculate factorial
long fact(int x)
{
    int i;
    long f=1;

    for(i=1;i<=x;++i)
    {
        f=f*i;
    }

    return f;
}

int main()
{
    int i_._j_._k_._n;

    cout<<""How many lines u want to Print :: "";
    cin>>n;

    for(i=0;i<n;++i)
    {
        //loop to print spaces at starting of each row
        for(j=1;j<=(n-i-1);++j)
        {
            cout<<"" "";
        }

        //loop to calculate each value in a row and print it
        for(k=0;k<=i;++k)
        {
             cout<<fact(i)/(fact(i-k)*fact(k))<<"" "";
        }

        cout<<""\n"";    //print new line after each row
    }

    return 0;
}"
41,Write a C++ Program to find Factors of a Number using For loop.,"#include<iostream>

using namespace std;

int main()
{
    long int n_._i;
    cout<<""Enter any number: "";
    cin>>n;
    cout<<endl<<""\nFactors of [ ""<<n<<"" ] are :: "";

    for(i=1;i<=n;++i)
    {
        if(n%i==0)
            cout<<"" ""<<i;
    }

    cout<<""\n"";

    return 0;
}"
42,Write a C++ Program to Check Number is Unique Number or Not,"#include<iostream>
#include<stdlib.h>

using namespace std;

int main()
{
    long num;
    char str[10];
    int a[10]={0}_._flag=1_._i=0;

    cout<<""Enter any number :: "";
    cin>>num;
    itoa(num_._str_._10);    //convert number to character array

    while(str[i]!='\0')
    {
        switch(str[i])
        {
            case '0':
                        a[0]++;
                        break;
            case '1':
                        a[1]++;
                        break;
            case '2':
                        a[2]++;
                        break;
            case '3':
                        a[3]++;
                        break;
            case '4':
                        a[4]++;
                        break;
            case '5':
                        a[5]++;
                        break;
            case '6':
                        a[6]++;
                        break;
            case '7':
                        a[7]++;
                        break;
            case '8':
                        a[8]++;
                        break;
            case '9':
                        a[9]++;
                        break;
        }
        i++;
    }

    for(i=0;i<10;i++)
    {
        if(a[i]>1)
        {
            flag=0;
            break;
        }
    }

    if(flag)
        cout<<""\nNumber is Unique.\n"";
    else
        cout<<""\nNumber is Not Unique.\n"";

    return 0;
}"
43,Write a C++ Program to Find Sum of Square of first n Natural numbers,"#include<iostream>

using namespace std;

int main()
{
    unsigned long n_._i_._sum=0_._d;
    cout<<""Enter any number :: "";
    cin>>n;

    for(i=1;i<=n;++i)
    {
        d=i*i;
        sum+=d;
    }

    cout<<""\nSum of square of [ ""<<n<<"" ] Numbers = ""<<sum<<""\n"";
    return 0;
}"
44,Write a C++ Program to Convert Binary Number to Decimal,"#include<iostream>
#include<math.h>

using namespace std;

int main()
{
    unsigned long i_._n_._num=0_._d;
    cout<<""Enter any Binary number:"";
    cin>>n;
    cout<<""\nThe Decimal conversion of [ ""<<n<<"" ] is :: "";

    for(i=0;n!=0;++i)
    {
    d=n%10;
    num=(d)*(pow(2_._i))+num;
    n=n/10;
    }

    cout<<num<<""\n"";
    return 0;
}"
45,Write a C++ Program to find Prime Numbers Between Two Intervals using functions,"#include <iostream>
using namespace std;

int checkPrimeNumber(int);

int main()
{
    int n1_._ n2;
    bool flag;

    cout << ""Enter 1st Interval :: "";
    cin >> n1 ;
    cout << ""\nEnter 2nd Interval :: "";
    cin >> n2 ;

    cout << ""\nPrime numbers between [ "" << n1 << "" and "" << n2 << "" ] are :: \n\n"";

    for(int i = n1+1; i < n2; ++i)
    {
        // If i is a prime number_._ flag will be equal to 1
        flag = checkPrimeNumber(i);

        if(flag == false)
            cout << i << "" "";
    }
    return 0;
}

// user-defined function to check prime number
int checkPrimeNumber(int n)
{
    bool flag = true;

    for(int j = 2; j <= n/2; ++j)
    {
        if (n%j == 0)
        {
            flag = false;
            break;
        }
    }
    return flag;
}"
46,Write a C++ Program to Convert Decimal Number to Binary,"#include<iostream>

using namespace std;

int main()
{
    int d_._n_._i_._j_._a[50];
    cout<<""Enter any Decimal number :: "";
    cin>>n;

    cout<<""\nThe binary conversion of [ ""<<n<<"" ] is 1"";

    for(i=1;n!=1;++i)
    {
        d=n%2;
        a[i]=d;
        n=n/2;
    }

    for(j=i-1;j>0;--j)
        cout<<a[j];

    return 0;
}"
47,Write a C++ Program to find Prime Numbers Between Two Intervals using functions,"#include <iostream>
using namespace std;

int checkPrimeNumber(int);

int main()
{
    int n1_._ n2;
    bool flag;

    cout << ""Enter 1st Interval :: "";
    cin >> n1 ;
    cout << ""\nEnter 2nd Interval :: "";
    cin >> n2 ;

    cout << ""\nPrime numbers between [ "" << n1 << "" and "" << n2 << "" ] are :: \n\n"";

    for(int i = n1+1; i < n2; ++i)
    {
        // If i is a prime number_._ flag will be equal to 1
        flag = checkPrimeNumber(i);

        if(flag == false)
            cout << i << "" "";
    }
    return 0;
}

// user-defined function to check prime number
int checkPrimeNumber(int n)
{
    bool flag = true;

    for(int j = 2; j <= n/2; ++j)
    {
        if (n%j == 0)
        {
            flag = false;
            break;
        }
    }
    return flag;
}"
48,Write a C++ Program to Convert Binary Number to Octal.,"#include <iostream>
#include <cmath>

using namespace std;

int convertBinarytoOctal(long long);
int main()
{
    long long binaryNumber;

    cout << ""Enter a binary number: "";
    cin >> binaryNumber;

     cout <<""\n [ ""<< binaryNumber << "" ] in binary = [ "" << convertBinarytoOctal(binaryNumber) << "" ] in octal \n"";

    return 0;
}

int convertBinarytoOctal(long long binaryNumber)
{
    int octalNumber = 0_._ decimalNumber = 0_._ i = 0;

    while(binaryNumber != 0)
    {
        decimalNumber += (binaryNumber%10) * pow(2_._i);
        ++i;
        binaryNumber/=10;
    }

    i = 1;

    while (decimalNumber != 0)
    {
        octalNumber += (decimalNumber % 8) * i;
        decimalNumber /= 8;
        i *= 10;
    }

    return octalNumber;
}"
49,Write a C++ Program to calculate Average of 5 subjects and find percentage.,"#include<iostream>
using namespace std;

int main()
{
        int mark[5]_._ i;
        float sum=0;
        cout<<""\nEnter marks obtained in Physics_._ Chemistry_._ Maths_._ CS_._ English :: \n"";
        for(i=0; i<5; i++)
        {
            cout<<""\nEnter mark[ ""<<i+1<<"" ] :: "";
                cin>>mark[i];
                sum=sum+mark[i];
        }

        float avg=sum/5;
        float perc;
        perc=(sum/500)*100;
        cout<<""\nAverage Marks of 5 Subjects = [ ""<<avg<<"" ] \n"";
        cout<<""\nPercentage in 5 Subjects = [ ""<<perc<<""% ] \n"";

        return 0;
}"
50,Write a C++ Program to Calculate Arithmetic Mean of N numbers.,"#include<iostream>
using namespace std;

int main()
{
        int n_._ i_._ arr[50]_._ sum=0;
        cout<<""\nHow many number you want to enter :: "";
        cin>>n;

        cout<<""\nEnter ""<<n<<"" Numbers Below :: \n"";
        for(i=0; i<n; i++)
        {
            cout<<""\nEnter [ ""<<i+1<<"" ] Number :: "";
                cin>>arr[i];
                sum=sum+arr[i];
        }

        int armean=sum/n;

        cout<<""\nArithmetic Mean of [ ""<<n<<"" ] Numbers = ""<<armean<<""\n"";

        return 0;
}"
51,Write a C++ Program to Find Grade of a Student using if else.,"#include<iostream>
using namespace std;

int main()
{
        int mark[5]_._ i;
        float sum=0_._avg;

        cout<<""\nEnter Marks in 5 subjects :: \n"";
        for(i=0; i<5; i++)
        {
            cout<<""\nEnter Marks[ ""<<i+1<<"" ] :: "";
                cin>>mark[i];
                sum=sum+mark[i];
        }

        avg=sum/5;

        cout<<""\nYour Grade is :: "";
        if(avg>80)
        {
                cout<<""[ A ]\n"";
        }
        else if(avg>60 && avg<=80)
        {
                cout<<""[ B ]\n"";
        }
        else if(avg>40 && avg<=60)
        {
                cout<<""[ C ]\n"";
        }
        else
        {
                cout<<""[ D ]\n"";
        }

        return 0;
}"
52,Write a C++ Program to find Perfect Number using loop,"#include<iostream>
using namespace std;

int main()                 //Start of main
{
   int i=1_._ u=1_._ sum=0;
   while(i<=500)
 {                                  // start of first loop.

   while(u<=500)
   {                               //start of second loop.
     if(u<i)
     {
      if(i%u==0 )
      sum=sum+u;
     }                          //End of if statement

     u++;
   }                           //End of second loop

   if(sum==i)
   {
    cout<<i<<"" is a perfect number.""<<""\n"";
   }

   i++;
   u=1;  sum=0;
 }                             //End of First loop
   return 0;
 "
53,Write a C++ Program to find Area and Perimeter of Rectangle.,"#include<iostream>

using namespace std;

int main()

{

    int width_._height_._area_._perimeter;

    cout<<""Enter Length of Rectangle = "";

    cin>>width;

    cout<<""\nEnter Breadth of Rectangle = "";

    cin>>height;

    area=height*width;

    cout<<""\nArea of Rectangle = ""<<area<<endl;

    perimeter=2*(height+width);

cout<<""\nPerimeter of rectangle are = ""<<perimeter<<endl;

return 0;

}"
54,Write a C++ Program to Calculate Area of Circle using Function.,"#include <iostream>
#define PI 3.14159
using namespace std;

float AreaOfCircle(float radius);
float AreaWithDiameter(float diameter);

int main()
{
    float radius_._diameter_._circleArea;
    char choice='0';
    cout<<""\n\t\t\tFind Area Of Circle:""<<endl;


    for(;choice!='1'&&choice!='2';)
        {
         cout<<""\n1 to Enter Radius \n"";
         cout<<""2 to Enter Diameter "";
         cout<<""\n\nEnter your Choice :: "";
         cin>>choice;
         if(choice!='1'&&choice!='2')
         cout<<""\nEnter a VALID Option "";

        }

    if(choice=='1')
    {
    cout <<""\nEnter Radius To Find Area: "";
    cin>>radius;
    circleArea=AreaOfCircle(radius);
    }
    else if(choice=='2')
    {
    cout <<""\nEnter Diameter To Find Area: "";
    cin>>diameter;
    circleArea=AreaWithDiameter(diameter);

    }
    cout<<""\nArea of Circle is:->> ""<<circleArea<<endl;
    return 0;
}

float AreaOfCircle(float radius)
{
    return (PI*(radius*radius));

}

float AreaWithDiameter(float diameter)
{

    return (AreaOfCircle(diameter/2));
}"
55,Write a C++ Program to Design Simple Calculator using switch case,"# include <iostream>
using namespace std;

int main()
{
    char op;
    float num1_._ num2;

    cout << ""\nEnter 1st operand :: "";
    cin >> num1;
    cout << ""\nEnter 2nd operand :: "";
    cin >> num2;

    cout << ""\nEnter operator [ + or - or * or / ] :: "";
    cin >> op;


    switch(op)
    {
        case '+':
            cout <<""\nAddition of [ ""<<num1<<"" + ""<<num2<<"" ] = ""<< num1+num2<<""\n"";
            break;

        case '-':
            cout <<""\nSubtraction of [ ""<<num1<<"" - ""<<num2<<"" ] = ""<< num1-num2<<""\n"";
            break;

        case '*':
            cout <<""\nMultiplication of [ ""<<num1<<"" * ""<<num2<<"" ] = ""<< num1*num2<<""\n"";
            break;

        case '/':
            cout <<""\nDivide of [ ""<<num1<<"" / ""<<num2<<"" ] = ""<< num1/num2<<""\n"";
            break;

        default:
            // If the operator is other than +_._ -_._ * or /_._ error message is shown
            cout << ""\nError! operator is not correct\n"";
            break;
    }

    return 0;
}"
56,Write a C++ Program to Convert Decimal Number to Octal,"#include <iostream>
#include <cmath>
using namespace std;

int decimalToOctal(int decimalNumber);

int main()
{
   int decimalNumber;
   cout << ""Enter a decimal number :: "";
   cin >> decimalNumber;
   cout <<""\n [ ""<< decimalNumber << "" ] in decimal = [ "" << decimalToOctal(decimalNumber) << "" ] in octal\n"";
   return 0;
}

// Function to convert decimal number to octal
int decimalToOctal(int decimalNumber)
{
    int rem_._ i = 1_._ octalNumber = 0;
    while (decimalNumber != 0)
    {
        rem = decimalNumber % 8;
        decimalNumber /= 8;
        octalNumber += rem * i;
        i *= 10;
    }
    return octalNumber;
}"
57,Write a C++ Program to Convert Octal Number to Decimal.,"#include <iostream>
#include <cmath>
using namespace std;

int octalToDecimal(int octalNumber);

int main()
{
   int octalNumber;
   cout << ""Enter an octal number: "";
   cin >> octalNumber;
   cout <<""\n [ ""<< octalNumber << "" ] in octal = [ "" << octalToDecimal(octalNumber) << "" ] in decimal\n"";

   return 0;
}

// Function to convert octal number to decimal
int octalToDecimal(int octalNumber)
{
    int decimalNumber = 0_._ i = 0_._ rem;
    while (octalNumber != 0)
    {
        rem = octalNumber % 10;
        octalNumber /= 10;
        decimalNumber += rem * pow(8_._ i);
        ++i;
    }
    return decimalNumber;
}"
58,Write a C++ Program to Convert Octal Number to Binary. ,"#include <iostream>
#include <cmath>

using namespace std;

long long convertOctalToBinary(int);
int main()
{
    int octalNumber;

    cout << ""Enter an octal number: "";
    cin >> octalNumber;

     cout <<""\n [ ""<< octalNumber << "" ] in octal = [ "" << convertOctalToBinary(octalNumber) << "" ] in binary\n"";

    return 0;
}

long long convertOctalToBinary(int octalNumber)
{
    int decimalNumber = 0_._ i = 0;
    long long binaryNumber = 0;

    while(octalNumber != 0)
    {
        decimalNumber += (octalNumber%10) * pow(8_._i);
        ++i;
        octalNumber/=10;
    }

    i = 1;

    while (decimalNumber != 0)
    {
        binaryNumber += (decimalNumber % 2) * i;
        decimalNumber /= 2;
        i *= 10;
    }

    return binaryNumber;
}"
59,Write a C++ Program to Convert Octal Number to Decimal.,"#include <iostream>
#include <cmath>
using namespace std;

int octalToDecimal(int octalNumber);

int main()
{
   int octalNumber;
   cout << ""Enter an octal number: "";
   cin >> octalNumber;
   cout <<""\n [ ""<< octalNumber << "" ] in octal = [ "" << octalToDecimal(octalNumber) << "" ] in decimal\n"";

   return 0;
}

// Function to convert octal number to decimal
int octalToDecimal(int octalNumber)
{
    int decimalNumber = 0_._ i = 0_._ rem;
    while (octalNumber != 0)
    {
        rem = octalNumber % 10;
        octalNumber /= 10;
        decimalNumber += rem * pow(8_._ i);
        ++i;
    }
    return decimalNumber;
}"
60,Write a C++ Program to Convert Decimal Number to Octal,"
#include <iostream>
#include <cmath>
using namespace std;

int decimalToOctal(int decimalNumber);

int main()
{
   int decimalNumber;
   cout << ""Enter a decimal number :: "";
   cin >> decimalNumber;
   cout <<""\n [ ""<< decimalNumber << "" ] in decimal = [ "" << decimalToOctal(decimalNumber) << "" ] in octal\n"";
   return 0;
}

// Function to convert decimal number to octal
int decimalToOctal(int decimalNumber)
{
    int rem_._ i = 1_._ octalNumber = 0;
    while (decimalNumber != 0)
    {
        rem = decimalNumber % 8;
        decimalNumber /= 8;
        octalNumber += rem * i;
        i *= 10;
    }
    return octalNumber;
}"
61,Write a C++ Program to find Area and Perimeter of Rectangle,"
#include<iostream>

using namespace std;

int main()

{

    int width_._height_._area_._perimeter;

    cout<<""Enter Length of Rectangle = "";

    cin>>width;

    cout<<""\nEnter Breadth of Rectangle = "";

    cin>>height;

    area=height*width;

    cout<<""\nArea of Rectangle = ""<<area<<endl;

    perimeter=2*(height+width);

cout<<""\nPerimeter of rectangle are = ""<<perimeter<<endl;

return 0;

}"
62,Write a C++ Program to Find Grade of a Student using if else,"
#include<iostream>
using namespace std;

int main()
{
        int mark[5]_._ i;
        float sum=0_._avg;

        cout<<""\nEnter Marks in 5 subjects :: \n"";
        for(i=0; i<5; i++)
        {
            cout<<""\nEnter Marks[ ""<<i+1<<"" ] :: "";
                cin>>mark[i];
                sum=sum+mark[i];
        }

        avg=sum/5;

        cout<<""\nYour Grade is :: "";
        if(avg>80)
        {
                cout<<""[ A ]\n"";
        }
        else if(avg>60 && avg<=80)
        {
                cout<<""[ B ]\n"";
        }
        else if(avg>40 && avg<=60)
        {
                cout<<""[ C ]\n"";
        }
        else
        {
                cout<<""[ D ]\n"";
        }

        return 0;
}"
63,Write a C++ Program to Calculate Arithmetic Mean of N numbers.,"#include<iostream>
using namespace std;

int main()
{
        int n_._ i_._ arr[50]_._ sum=0;
        cout<<""\nHow many number you want to enter :: "";
        cin>>n;

        cout<<""\nEnter ""<<n<<"" Numbers Below :: \n"";
        for(i=0; i<n; i++)
        {
            cout<<""\nEnter [ ""<<i+1<<"" ] Number :: "";
                cin>>arr[i];
                sum=sum+arr[i];
        }

        int armean=sum/n;

        cout<<""\nArithmetic Mean of [ ""<<n<<"" ] Numbers = ""<<armean<<""\n"";

        return 0;
}"
64,Write a C++ Program to calculate Average of 5 subjects and find percentage. ,"#include<iostream>
using namespace std;

int main()
{
        int mark[5]_._ i;
        float sum=0;
        cout<<""\nEnter marks obtained in Physics_._ Chemistry_._ Maths_._ CS_._ English :: \n"";
        for(i=0; i<5; i++)
        {
            cout<<""\nEnter mark[ ""<<i+1<<"" ] :: "";
                cin>>mark[i];
                sum=sum+mark[i];
        }

        float avg=sum/5;
        float perc;
        perc=(sum/500)*100;
        cout<<""\nAverage Marks of 5 Subjects = [ ""<<avg<<"" ] \n"";
        cout<<""\nPercentage in 5 Subjects = [ ""<<perc<<""% ] \n"";

        return 0;
}"
65,Write a C++ Program to Design Simple Calculator using switch case,"# include <iostream>
using namespace std;

int main()
{
    char op;
    float num1_._ num2;

    cout << ""\nEnter 1st operand :: "";
    cin >> num1;
    cout << ""\nEnter 2nd operand :: "";
    cin >> num2;

    cout << ""\nEnter operator [ + or - or * or / ] :: "";
    cin >> op;


    switch(op)
    {
        case '+':
            cout <<""\nAddition of [ ""<<num1<<"" + ""<<num2<<"" ] = ""<< num1+num2<<""\n"";
            break;

        case '-':
            cout <<""\nSubtraction of [ ""<<num1<<"" - ""<<num2<<"" ] = ""<< num1-num2<<""\n"";
            break;

        case '*':
            cout <<""\nMultiplication of [ ""<<num1<<"" * ""<<num2<<"" ] = ""<< num1*num2<<""\n"";
            break;

        case '/':
            cout <<""\nDivide of [ ""<<num1<<"" / ""<<num2<<"" ] = ""<< num1/num2<<""\n"";
            break;

        default:
            // If the operator is other than +_._ -_._ * or /_._ error message is shown
            cout << ""\nError! operator is not correct\n"";
            break;
    }

    return 0;
}"
66,Write a C++ Program to Take Input as String and Print the String. ,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
        char str[20];
        cout<<""\nEnter any String :: "";
        cin>>str;
        cout<<""\nThe Entered String is :: [ ""<<str<<"" ] \n"";

        return 0;
}"
67,Write a C++ Program to Count Occurrences of Character in a String,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
   int i_._count=0;
   char ch[50]_._c;

   cout<<""\nEnter Any String :: "";
   cin>>ch;

   cout<<""\nEnter any Character to count occurrence :: "";
   cin>>c;

   for(i=0;ch[i]!='\0';i++)
   {
       if(ch[i]==c)
            count++;
   }
   if(count==0)
   {
        cout<<""\nGiven character [ ""<<c<<"" ] not found.\n"";
   }
   else
   {
        cout<<""\nNo. of Occurrences of [ "" <<c<<"" ] is :: ""<<count<<"" times.\n"";
   }

   return 0;

}"
68,Write a C++ program to Find Length of String without using strlen,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
   int i_._count=0;
   char ch[50];

   cout<<""\nEnter any string :: "";
   cin>>ch;

   for(i=0;ch[i]!='\0';i++)
   {
        count++;
   }
   cout<<""\nLength of String [ ""<<ch<<"" ] is :: ""<<count<<""\n"";

   return 0;
}"
69,Write a C++ Program to Compare Two Strings without using strcmp,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
     char str1[50]_._str2[50]_._i=0_._j=0_._flag=0;

     cout<<""\nEnter first string :: "";
     gets(str1);

     cout<<""\nEnter Second string :: "";
     gets(str2);

      while(str1[i]!='\0')
      {
        i++;
      }
      while(str2[j]!='\0')
      {
        j++;
      }
     if(i!=j)
     {
        flag=0;
     }
     else
     {
         for(i=0_._j=0;str1[i]!='\0'_._str2[j]!='\0';i++_._j++)
         {
             if(str1[i]==str2[j])
             {
                flag=1;
             }
         }
     }
     if(flag==0)
     {
        cout<<""\nStrings are not equal.\n"";
     }
     else
     {
        cout<<""\nStrings are equal.\n"";
     }

      return 0;
}"
70,Write a C++ Program to Reverse a String using Array,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
     char str[100]_._str1[100]_._temp;
     int i=0_._j=0;

     cout<<""\nEnter any String :: "";
     cin>>str;

     strcpy(str1_._str);

     j=strlen(str)-1;
     while(i<j)
    {
       temp=str[i];
       str[i]=str[j];
       str[j]=temp;
       i++;
       j--;
    }
     cout<<""\nAfter Reversing_._ String [ ""<<str1<<"" ]  is :: [ ""<<str<<"" ]\n"";

     return 0;
}"
71,Write a C++ Program to Concatenate Two Strings using strcat.,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
        char str[50]_._str1[50];

        cout<<""\nEnter First String :: "";
        gets(str);
        cout<<""\nEnter Second String :: "";
        gets(str1);

        strcat(str_._str1);

    cout<<""\nAfter Concatenating String is :: ""<<str<<""\n"";

    return 0;
}"
72,Write a C++ Program to Copy One String to Another using Library Function.,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
  char s1[50]_._ s2[50];

  cout<<""\nEnter any String 1 :: "";
  cin>>s1;

  strcpy(s2_._ s1);

  cout<<""\nAfter Copying_._String 2 :: ""<<s2<<""\n"";

  return 0;
}"
73,Write a C++ Program to Count Vowels Consonants Digits Spaces in String,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
    char line[150];
    int i_._v_._c_._ch_._d_._s_._o;
    o=v=c=ch=d=s=0;

    cout<<""\nEnter any String :: "";
    gets(line);

    for(i=0;line[i]!='\0';++i)
    {
        if(line[i]=='a' || line[i]=='e' || line[i]=='i' || line[i]=='o' || line[i]=='u' || line[i]=='A' || line[i]=='E' || line[i]=='I' || line[i]=='O' || line[i]=='U')
            ++v;
        else if((line[i]>='a'&& line[i]<='z') || (line[i]>='A'&& line[i]<='Z'))
            ++c;
        else if(line[i]>='0'&& line[i]<='9')
            ++d;
        else if (line[i]==' ')
            ++s;
    }
    cout<<""\nNumber of Vowels :: ""<<v<<""\n"";
    cout<<""\nNumber of Consonants :: ""<<c<<""\n"";
    cout<<""\nNumber of Digits :: ""<<d<<""\n"";
    cout<<""\nNumber of White spaces :: ""<<s<<""\n"";

    return 0;

}"
74,Write a C++ Program to Remove Characters in String Except Alphabets.,"#include <iostream>
using namespace std;

int main()
{
    string line;
    int i;
    cout << ""Enter any string :: "";
    cin>>line;

    cout << ""\nThe Original String is :: "" << line<<endl;

    int len = line.size();

    for(i=0;i<len;++i)
    {
        if (!((line[i]>='a' && line[i]<='z') || (line[i]>='A' && line[i]<='Z')))
        {
            line[i]='\0';
        }
    }

    cout << ""\nAfter Removing Characters_._ String is :: "" << line<<endl;

    return 0;
}"
75,Write a C++ Program to Convert a String from Uppercase to Lowercase,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
      char str[50]_._str1[50];
      int i;
      cout<<""\nEnter any String in uppercase :: "";
      gets(str);

      strcpy(str1_._str);

      for(i=0;i<=strlen(str);i++)
      {
            if(str[i]>=65 && str[i]<=92)
            {
            str[i]=str[i]+32;
            }
      }
      cout<<""\nThe String [ ""<<str1<<"" ] in Lowercase = [ ""<<str<<"" ]\n"";

     return 0;
}"
76,Write a C++ Program to Sort Strings in Lexicographical Order. ,"#include <iostream>
using namespace std;

int main()
{
    int n;
    cout<<""How many Strings u want to Sort :: "";
    cin>>n;
    string str[n]_._ temp;

    cout << ""\nEnter [ ""<<n<<"" ] Strings Below :: "" << endl;

    for(int i = 0; i < n; i++)
    {
        cout<<""\nEnter [ ""<<i+1<<"" ] String :: "";
        cin>>str[i];
    }

    for(int i = 0; i < n-1; ++i)
       for( int j = i+1; j < n; ++j)
       {
          if(str[i] > str[j])
          {
            temp = str[i];
            str[i] = str[j];
            str[j] = temp;
          }
    }

    cout << ""\nAfter Sorting [ ""<<n<<"" ] Strings in lexicographical order :: \n"" << endl;

    for(int i = 0; i < n; ++i)
    {
       cout << str[i] << endl;
    }

    return 0;
}"
77,Write a C++ Program to Swap Two String using Third variable.,"#include<iostream>
using namespace std;

int main()
{
  int i=0_._ j=0_._ k=0;
  char str1[20]_._ str2[20]_._ temp[20];

  cout<<""\nEnter the First String :: "";
  gets(str1);

  cout<<""\nEnter the Second String :: "";
  gets(str2);

  cout<<""\nStrings before swapping are ::\n"";
  cout<<""\n\tString 1 = ""<<str1<<""\n"";
  cout<<""\n\tString 2 = ""<<str2<<""\n"";
  while(str1[i]!='\0')
  {
        temp[j]=str1[i];
        i++;
        j++;
  }
  temp[j]='\0';
  i=0_._ j=0;
  while(str2[i]!='\0')
  {
        str1[j]=str2[i];
        i++;
        j++;
  }
  str1[j]='\0';
  i=0_._ j=0;
  while(temp[i]!='\0')
  {
        str2[j]=temp[i];
        i++;
        j++;
  }
  str2[j]='\0';
  cout<<""\nStrings after swapping :: \n"";
  cout<<""\n\tString 1 = ""<<str1<<""\n"";
  cout<<""\n\tString 2 = ""<<str2<<""\n"";

  return 0;
}"
78,Write a C++ Program to Convert a String from Lowercase to Uppercase,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
      char str[50]_._str1[50];
      int i;
      cout<<""\nEnter any String in Lowercase :: "";
      gets(str);

      strcpy(str1_._str);

      for(i=0;i<=strlen(str);i++)
      {
            if(str[i]>=97 && str[i]<=122)
            {
            str[i]=str[i]-32;
            }
      }
      cout<<""\nThe String [ ""<<str1<<"" ] in Uppercase = [ ""<<str<<"" ]\n"";

     return 0;
}"
79,Write a C++ Program to Convert a Character from Uppercase to Lowercase. ,"
#include<iostream>
#include<string.h>
using namespace std;

int main()
{
        char ch_._ch1;
        cout<<""\nEnter any character in uppercase :: "";
        cin>>ch;

        ch1=ch;

        ch=ch+32;

        cout<<""\nCharacter [ ""<<ch1<<"" ] in lowercase = [ ""<<ch<<"" ] \n"";

        return 0;
}"
80,Write a C++ Program to Reverse an Array of Strings.,"#include<iostream>
#include<string.h>
#include<stdio.h>
using namespace std;

int main()
{
    char a[3][50];
    int i_._j_._k_._len;
    cout<<""\nEnter 3 strings: \n"";

    for(i=0;i<3;i++)
    {
        cout<<""\nEnter [ ""<<i+1<<"" ] String :: "";
        gets(a[i]);
    }

    cout<<""\nThe Array of Original Strings :: \n"";

    for(i=0;i<3;i++)
    {
        cout<<""\n""<<a[i]<<"" \n"";
    }

    cout<<""\nThe Array of Reversed Strings :: \n"";

    for(i=0;i<3;i++)
    {
        cout<<""\n"";
        len=strlen(a[i]);
        for(j=0_._k=len-1;k>=0;j++_._k--)
        {
            cout<<a[i][k];
        }
        cout<<"" \n"";
    }

    return 0;}"
81,Write a C++ Program to Delete or Remove Spaces from a String. ,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
        char str[80]_._str1[80];
        int i=0_._ len_._ j;
        cout<<""\nEnter any string :: "";
        gets(str);

        strcpy(str1_._str);

        len=strlen(str);

        for(i=0; i<len; i++)
        {
                if(str[i]==' ')
                {
                        for(j=i; j<len; j++)
                        {
                                str[j]=str[j+1];
                        }
                len--;
                }
        }
        cout<<""\nString [ ""<<str1<<"" ] after removing spaces = ""<<str<<""\n"";

        return 0;
}"
82,Write a C++ Program to Count Number of Words in a String.,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
        char strs[100]_._ countw=0_._ strw[15]_._ i;
        cout<<""\nEnter any string :: "";
        gets(strs);

        int len=strlen(strs);

        for(i=0; i<len; i++)
        {
                if(strs[i]==' ')
                {
                        countw++;
                }
        }
        cout<<""\nTotal Number of Words in a String is :: ""<<countw+1<<""\n"";

        return 0;
}"
83,Write a C++ Program to Delete a Word from a String,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
    int i_._ j = 0_._ k = 0_._ count = 0;
    char str[100]_._ str1[10][20]_._ word[20];
    cout<<""\nEnter any String :: "";
    gets(str);

    for (i=0; str[i]!='\0'; i++)
    {
        if (str[i]==' ')
        {
            str1[k][j] = '\0';
            k++;
            j=0;
        }
        else
        {
            str1[k][j]=str[i];
            j++;
        }
    }
    str1[k][j] = '\0';
    cout<<""\nEnter a word to delete :: "";
    cin>>word;


    for (i=0; i<k+1; i++)
    {
        if (strcmp(str1[i]_._ word) == 0)
        {
            for (j=i; j<k+1; j++)
                        {
                                strcpy(str1[j]_._ str1[j + 1]);
                                k--;
                        }
        }

    }
    cout<<""\nThe new String after deleting the word [ ""<<word<<"" ] :: \n\n"";
    for (i=0; i<k+1; i++)
    {
                cout<<str1[i]<<"" "";
    }

    cout<<""\n"";
    return 0;
}"
84,Write a C++ Program to Remove or Delete Vowels from a String. ,"#include<iostream>
#include<string.h>
#include<stdio.h>
using namespace std;

int main()
{
    char str[50]_._str1[50];
        int len_._ i_._ j;
        cout<<""\nEnter any string :: "";
        gets(str);

    strcpy(str1_._str);

        len=strlen(str);
        for(i=0; i<len; i++)
        {
                if(str[i]=='a' || str[i]=='e' || str[i]=='i' ||
                str[i]=='o' || str[i]=='u' || str[i]=='A' ||
                str[i]=='E' || str[i]=='I' || str[i]=='O' ||
                str[i]=='U')
                {
                        for(j=i; j<len; j++)
                        {
                                str[j]=str[j+1];
                        }
            len--;
            i--;
                }
        }
        cout<<""\nAfter Deleting the vowels_._ the string [ ""<<str1<<"" ] will be : ""<<str<<""\n"";

        return 0;
}"
85,Write a C++ Program to Check whether Substring is present in given string.,"#include<iostream>
#include<cstdlib>

using namespace std;

int main()
{
    int i_._j_._temp;
    char str[100];
    char substr[30];

    cout<<""\nEnter any string first :: "";
    gets(str);
    cout<<""\nEnter Substring u want to Search :: "";
    gets(substr);

    for(i=0;str[i]!='\0';i++)
    {
        j=0;
        if(str[i]==substr[j])
        {
            temp=i+1;
            while(str[i]==substr[j])
            {
                i++;
                j++;
            }

            if(substr[j]=='\0')
            {
                cout<<""\nThe substring [ ""<<substr<<"" ] is present in given string at position [ ""<<temp<<"" ]\n"";
                exit(0);
            }
            else
            {
                i=temp;
                temp=0;
            }
        }
    }

    if(temp==0)
        cout<<""\nThe substring [ ""<<substr<<"" ] is not present in given string.\n"";

    return 0;
}"
86,Write a C++ Program to Print all Permutations of a String with Duplicates.,"#include <iostream>
#include <string.h>

using namespace std;

void swap(char *x_._ char *y)
{
    char temp;
    temp = *x;
    *x = *y;
    *y = temp;
}

void permutation(char *a_._ int l_._ int r)
{
   int i;

   if (l == r)
     cout << a << ""\n"";
   else
   {
       for (i = l; i <= r; i++)
       {
          swap((a+l)_._ (a+i));
          permutation(a_._ l+1_._ r);
          swap((a+l)_._ (a+i));
       }
   }
}

int main()
{
    char string[20];
    int n;

    cout << ""\nEnter any string :: "";
    cin >> string;

    n = strlen(string);
    permutation(string_._ 0_._ n-1);

    return 0;"
87,Write a C++ Program to Convert first letter from lowercase to uppercase,"#include<iostream>
using namespace std;

int main()
{

    int i;
    char a[30];
    cout<<""\nEnter any string :: "";
    gets(a);
    cout<<""\n"";

     if(islower(a[0]))
     a[0]=toupper(a[0]);

     for(i=0;a[i]!='\0';++i)
     {
            if(a[i]==' ')
                if(islower(a[i+1]))
                    a[i+1]=toupper(a[i+1]);
     }

        cout<<""\nUpdated New String is :: ""<<a<<""\n"";

        return 0;
   int main()
{

    int i;
    char a[30];
    cout<<""\nEnter any string :: "";
    gets(a);
    cout<<""\n"";

     if(islower(a[0]))
     a[0]=toupper(a[0]);

     for(i=0;a[i]!='\0';++i)
     {
            if(a[i]==' ')
                if(islower(a[i+1]))
                    a[i+1]=toupper(a[i+1]);
     }

        cout<<""\nUpdated New String is :: ""<<a<<""\n"";

        return 0;
    }"
88,Write a C++ Program to check whether a String is Palindrome or not,"
#include<iostream>
using namespace std;

int main()
{
    int i_._j_._len_._flag=1;
    char a[20];
    cout<<""\nEnter any string :: "";
    cin>>a;

    for(len=0;a[len]!='\0';++len);
        for(i=0_._j=len-1;i<len/2;++i_._--j)
        {
            if(a[j]!=a[i])
                flag=0;
        }

    if(flag==1)
        cout<<""\nThe Entered String [ ""<<a<<"" ] is Palindrome.\n"";
    else
        cout<<""\nThe Entered String [ ""<<a<<"" ] is NOT Palindrome.\n"";

    return 0;
}"
89,Write a C++ Program to capitalize first letter of each word,"#include<iostream>
#include<stdio.h>
#include<ctype.h>
#include<string.h>
using namespace std;

int main()
{

    int i;
    char a[30];
    cout<<""\nEnter any string :: "";
    gets(a);

    int len = strlen(a);

    for(i=0;i<len;++i)
    {
        if(i==0)
        {
            if(islower(a[i]))
            a[i]=toupper(a[i]);
        }
        else
        {
            if(a[i]!=' ')
            {
                if(isupper(a[i]))
                    a[i]=tolower(a[i]);
            }
            else
            {
                i++;
                if(islower(a[i]))
                    a[i]=toupper(a[i]);
            }
        }
    }
    cout<<""\nUpdated New String is :: ""<<a<<""\n"";

    return 0;
}"
90,Write a C++ Program to find Largest Element in an Array.,"
#include<iostream>

using namespace std;

int main()
{
    int i_._a[50]_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nStored Data in Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

    int  largest=a[0];

        for (i=0;i<size;i++)
    {
                if(a[i]>largest)
                {
                        largest=a[i];
                }
        }
        cout<<""\n\nLargest Element in an Array :: ""<<largest<<endl;

        return 0;
}"
91,Write a C++ Program to Display First and Last element of an array.,"#include <iostream>
using namespace std;

int main()
{

    int i_._a[50]_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

    cout<<""\nFirst number in the Array :: ""<<a[0]<<endl;
    // first element of an array is a[0]
    
    cout<<""\nLast number in the Array :: ""<<a[size-1]<<endl;
    // last element of an array is n[SIZE_OF_ARRAY - 1]
    return 0;
}"
92,Write a C++ Program to Insert an element in an array at specific position.,"#include<iostream>

using namespace std;

int main()
{
    int i_._a[50]_._no_._pos_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nStored Data in Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

  cout<<""\n\nEnter position to insert number :: "";
  cin>>pos;

  if(pos>size)
  {
    cout<<""\nThis is out of range.\n"";
  }
  else
  {
    cout<<""\nEnter number to be inserted :: "";
    cin>>no;
    --pos;

  for(i=size;i>=pos;i--)
  {
    a[i+1]=a[i];
  }
  a[pos]=no;

  cout<<""\nNew Array is :: \n\n"";

  for(i=0;i<size+1;i++)
  {
    cout<<"" ""<<a[i]<<"" "";
  }

  }
  cout<<""\n"";

  return 0;

 "
93,Write a C++ Program to Find Even and Odd Numbers using array. ,"#include<iostream>
using namespace std;

int main()
{
   int arr[20]_._even[20]_._odd[20]_._i_._j=0_._k=0_._size;

   cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>arr[i];
        }

  cout<<""\nStored Data in Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<arr[i]<<"" "";
  }

   for(i=0; i<size;i++)
   {
   if(arr[i]%2==0)
   {
    even[j]=arr[i];
    j++;
   }
   else
   {
   odd[k]=arr[i];
   k++;
   }
   }

  cout<<""\n\nEven Elements in Array are :: \n\n"";

  for(i=0; i<j ;i++)
   {
     cout<<"" ""<<even[i]<<"" "";
   }

  cout<<""\n\nOdd Elements in Array are :: \n\n"";

  for(i=0; i<k; i++)
   {
    cout<<"" ""<<odd[i]<<"" "";
   }

   cout<<""\n"";

  return 0;

  }"
94,Write a C++ Program to Delete an element in an array at desired position,"#include<iostream>
using namespace std;

int main()
{
   int i_._a[50]_._no_._pos_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nStored Data in Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

  cout<<""\n\nEnter position to Delete number :: "";
  cin>>pos;

  if(pos>size)
  {
    cout<<""\nThis is out of range.\n"";
  }
  else
   {
   --pos;
   for(i=pos;i<=size-1;i++)
   {
    a[i]=a[i+1];
   }
   cout<<""\nNew Array is :: \n\n"";

  for(i=0;i<size-1;i++)
  {
    cout<<"" ""<<a[i]<<"" "";
  }

  }
  cout<<""\n"";

  return 0;

  "
95,Write a C++ Program to Reverse elements in an array,"#include<iostream>
using namespace std;

int main()
{
   int a[20]_._b[20]_._i_._j_._size;

   cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nThe Entered Array is :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

   cout<<""\n\nReverse of Given Array is :: \n\n"";

   for(i=size-1_._j=0; i>=0;i--_._j++)
   {
    b[i]=a[j];
   }

   for(i=0;i<size;i++)
  {
  cout<<"" ""<<b[i]<<"" "";
  }

  cout<<""\n"";

  return 0;
  }"
96,Write a C++ Program to Find Sum of Elements of an Array. ,"#include<iostream>

using namespace std;

int main()
{
    int i_._a[50]_._sum=0_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nStored Data in Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

   cout<<""\n\nSum of all Elements of array is :: "";

   for(i=0;i<size;i++)
   {
    sum=sum+a[i];
   }

  cout<<sum<<""\n"";

  return 0;

}"
97,Write a C++ Program to Find Duplicate Elements in an Array. ,"#include<iostream>

using namespace std;

int main()
{
    int i_._j_._a[50]_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nStored Data in Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

  cout<<""\n\nDuplicate Values in Given Array are :: \n\n"";
  for(i=0; i<size; i++)
   {
    for(j=i+1;j<size;j++)
    {
    if(a[i]==a[j])
    {
    cout<<"" ""<<a[i]<<"" "";
    }
   }
   }

  cout<<""\n"";

  return 0;
 }"
98,Write a C++ Program to Add Two Matrices using array,"#include<iostream>
using namespace std;

int main()
{

        int arr1[5][5]_._ arr2[5][5]_._ arr3[5][5]_._ sub_._ i_._ j_._m_._n;

    cout<<""Enter size of matrix ( Max:5 ) :: "";
    cin>>m;
    cout<<""\nEnter Elements to Matrix A Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr1[""<<i<<""][""<<j<<""] Element :: "";
            cin>>arr1[i][j];
        }

    }

    cout<<""\nEnter Elements to Matrix B Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr2[""<<i<<""][""<<j<<""] Element :: "";
            cin>>arr2[i][j];
        }

    }


        cout<<""\nAdding Matrix ( A + B ) ..... \n"";
        for(i=0; i<m; i++)
        {
                for(j=0; j<m; j++)
                {
                        arr3[i][j]=arr1[i][j]+arr2[i][j];
                }
        }

        cout<<""\nAfter Addition_._ Matrix C is :: \n"";

        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < m; ++j)
            {
                cout<<""\t""<<arr3[i][j];
            }
            printf(""\n\n"");
        }

        return 0;
}"
99,Write a C++ Program to Sort the elements in array in descending order.,"#include<iostream>

using namespace std;

int main()
{
    int i_._j_._a[50]_._size_._temp;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

    cout<<""\nData before sorting :: \n\n"";

    for(i=0;i<size;i++)
    {
      cout<<"" ""<<a[i]<<"" "";
    }

    for(i=0;i<size;i++)
    {
    for(j=0;j<size-i-1;j++)
    {
    if(a[j]>a[j+1])
    {
    temp=a[j];
    a[j]=a[j+1];
    a[j+1]=temp;
    }
    }
    }
    cout<<""\n\nData after sorting :: \n\n"";
    for(j=size-1;j>=0 ;j--)
    {
    cout<<"" ""<<a[j]<<"" "";
    }
    cout<<""\n\n"";
    return 0;
}"
100,Write a C++ Program to Sort Array Elements in Ascending order. ,"#include<iostream>

using namespace std;

int main()
{
    int i_._j_._temp_._a[50]_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nStored Data Before Sorting In Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

 for(i=0;i<size;i++)
 {
     for(j=0;j<size-i-1;j++)
     {
         if(a[j]>a[j+1])
         {
             temp=a[j];
             a[j]=a[j+1];
             a[j+1]=temp;
         }
     }
 }

 cout<<""\n\nStored Data After Sorting In Array :: \n\n"";

 for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }

  cout<<""\n"";

  return 0;

 }"
101,Write a C++ Program to Reverse an Array using functions.,"#include <iostream>
using namespace std;

void Reverse_Array(int array[]_._int size);

int main()
{
        int i_._a[50]_._size;
    cout<<""Enter array size( Max:50 ) :: "";
    cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>a[i];
        }

  cout<<""\nStored Data in Array :: \n\n"";

  for(i=0;i<size;i++)
  {
  cout<<"" ""<<a[i]<<"" "";
  }
        // Calling Reverse Array Values Function
        Reverse_Array(a_._size);
        cout << ""\n\nReversed Array Values are :: "" << endl;
    for(i=0;i<size;i++)
    {
      cout<<"" ""<<a[i]<<"" "";
    }

    cout<<""\n"";

        return 0;
}

//------Reverse Array Function---------------

void Reverse_Array(int array[]_._int size)
{
        int temp;
        size--;
        for (int i=0;size>=i;size--_._i++)
    {
                temp=array[i];
                array[i]=array[size];
                array[size]=temp;
        }
}"
102,Write a C++ Program to Pass an array in a function. ,"#include<iostream>
using namespace std;

void pass(int[]_._int);

int main()
{
    int a[]={1_._2_._3_._4_._5};

    pass(a_._5);

    return 0;
}

void pass(int b[]_._int n)
{
    int i;
    for(i=0;i<n;i++)
    {
        cout<<""\n""<<b[i]<<""\n"";
    }"
103,Write a C++ Program for Three Dimensional Array Example.,"#include<iostream>
using namespace std;

int main()
{

        int arr[3][4][2] = {
                              {
                                 {2_._ 4}_._
                                 {7_._ 8}_._
                                 {3_._ 4}_._
                                 {5_._ 6}
                              }_._
                              {
                                 {7_._ 6}_._
                                 {3_._ 4}_._
                                 {5_._ 3}_._
                                 {2_._ 3}
                              }_._
                              {
                                 {8_._ 9}_._
                                 {7_._ 2}_._
                                 {3_._ 4}_._
                                 {5_._ 1}
                              }
                           };
        cout<<""\narr[0][0][0] = ""<<arr[0][0][0]<<""\n"";
        cout<<""\narr[0][2][1] = ""<<arr[0][2][1]<<""\n"";
        cout<<""\narr[2][3][1] = ""<<arr[2][3][1]<<""\n"";

        return 0;
}"
104,Write a C++ Example Program for Two Dimensional Array. ,"#include<iostream>
using namespace std;

int main()
{

        int arr[10][10]_._ row_._ col_._ i_._ j;
        cout<<""Enter rows for Array :: "";
        cin>>row;
        cout<<""\nEnter columns for Array :: "";
        cin>>col;
        cout<<""\nNow Enter ""<<row<<""*""<<col<<"" Array Elements :: \n"";
        for(i=0; i<row; i++)
        {
                for(j=0; j<col; j++)
                {
                    cout<<""\nEnter arr[""<<i<<""][""<<j<<""] Element :: "";
                        cin>>arr[i][j];
                }
        }
        cout<<""\nThe Entered Array is :: \n\n"";
        for(i=0; i<row; i++)
        {
                for(j=0; j<col; j++)
                {
                        cout<<""\t""<<arr[i][j];
                }
                cout<<""\n\n"";
        }

        return 0;
}"
105,Write a C++ Program to Delete an Element in an array.,"#include<iostream>
using namespace std;

int main()
{

        int arr[50]_._ size_._ i_._ del_._ count=0;

        cout<<""Enter array size( Max:50 ) :: "";
        cin>>size;
        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter arr[""<<i<<""] Element :: "";
                cin>>arr[i];
        }

        cout<<""\nEnter element to be delete :: "";
        cin>>del;

        for(i=0; i<size; i++)
        {
                if(arr[i]==del)
                {
                        for(int j=i; j<(size-1); j++)
                        {
                                arr[j]=arr[j+1];
                        }
                        count++;
                        break;
                }
        }
        if(count==0)
        {
                cout<<""\nElement not found..!!\n"";
        }
        else
        {
                cout<<""\nElement deleted successfully..!!\n"";
                cout<<""\nNow the new array is ::\n"";
                for(i=0; i<(size-1); i++)
                {
                        cout<<arr[i]<<"" "";
                }
        }
    cout<<""\n"";

        return 0;
}"
106,Write a C++ Program to Find the Smallest Number in an array.,"#include<iostream>
using namespace std;

int main()
{

        int small_._ arr[50]_._ m_._ j;
        cout<<""Enter size of Array ( Max:50 ) :: "";
    cin>>m;
    cout<<""\nEnter Elements to Array Below :: \n"";

        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr[""<<j<<""] Element :: "";
            cin>>arr[j];
        }


        cout<<""\nSearching for smallest element ...\n\n"";
        small=arr[0];
        for(j=0; j<m; j++)
        {
                if(small>arr[j])
                {
                        small=arr[j];
                }
        }
        cout<<""Smallest Element in Array = ""<<small<<""\n"";


        return 0;
}"
107,Write a C++ Program to Find Largest of n Numbers in an Array. ,"#include<iostream>
using namespace std;

int main()
{

        int large_._ arr[100]_._ size_._ i;
        cout<<""Enter Size of Array :: "";
        cin>>size;

        cout<<""\nEnter array elements :: \n"";

        for(i=0; i<size; i++)
        {
            cout<<""\nEnter [""<<i+1<<""]""<<"" Element :: "";
                cin>>arr[i];
        }



        cout<<""\nSearching for largest number ...\n\n"";
        large=arr[0];
        for(i=0; i<size; i++)
        {
                if(large<arr[i])
                {
                        large=arr[i];
                }
        }
        cout<<""Largest Number in Array = ""<<large<<""\n"";

        return 0;
}"
108,Write a C++ Program for One Dimensional Array (1-D) ,"#include<iostream>
using namespace std;

int main()
{

        int arr[50]_._ m_._j;

        cout<<""Enter size of Array ( Max:50 ) :: "";
    cin>>m;
    cout<<""\nEnter Elements to Array Below :: \n"";

        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr[""<<j<<""] Element :: "";
            cin>>arr[j];
        }

        cout<<""\nThe Elements in the Array are :: \n\n"";
        for(j=0; j<m; j++)
        {
                cout<<arr[j]<<""  "";
        }

        cout<<""\n"";
        return 0;
}"
109,Write a C++ Program to find Average of n Numbers using array.,"#include <iostream>
using namespace std;

int main()
{
    int n_._ i;
    float a[100]_._ sum=0.0 _._ average;

    cout<<""Enter size of Array (Value of N ):: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
        sum += a[i];
    }

    average = sum / n;
    cout << ""\nAverage of ""<<n<<"" Numbers is = "" << average<<""\n"";

    return 0;
}"
110,"
Write a C++ Program to Accessing Elements of an Array Using Pointer. ","#include <iostream>
using namespace std;

int main()
{
   int a[100]_._n_._i;
   cout<<""Enter size of Array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
    }

   cout << ""Accessing Elements through Pointers are :: \n"";
   for(int i = 0; i < n; ++i)
   {
       cout << endl << *(a + i);
   }

    cout<<""\n"";

   return 0;
}"
111,Write a C++ Program to Multiply Two Matrices using array,"
#include<iostream>
using namespace std;

int main()
{

        int arr1[5][5]_._ arr2[5][5]_._ arr3[5][5]_._ sum=0_._ i_._ j_._ k_._m_._n;

        cout<<""Enter size of matrix ( Max:5 ) :: "";
    cin>>m;
    cout<<""\nEnter Elements to Matrix A Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr1[""<<i<<""][""<<j<<""] Element :: "";
            cin>>arr1[i][j];
        }

    }

    cout<<""\nEnter Elements to Matrix B Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr2[""<<i<<""][""<<j<<""] Element :: "";
            cin>>arr2[i][j];
        }

    }

        cout<<""\nMultiplying two matrices.....\n"";
        for(i=0; i<3; i++)
        {
                for(j=0; j<3; j++)
                {
                        sum=0;
                        for(k=0; k<3; k++)
                        {
                                sum = sum + arr1[i][k] * arr2[k][j];
                        }
                        arr3[i][j] = sum;
                }
        }
        cout<<""\nMultiplication of two Matrices : \n\n"";
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < m; ++j)
            {
                cout<<""\t""<<arr3[i][j];
            }
            printf(""\n\n"");
        }

        return 0;
}"
112,Write a C++ Program to Find Transpose of a Matrix using array,"#include <iostream>
using namespace std;

int main()
{
    int a[5][5]_._ trans[5][5]_._ r_._ c_._ i_._ j;

    cout << ""Enter rows of matrix: "";
    cin >> r;
    cout << ""Enter columns of matrix: "";
    cin >> c;

    cout<<""\nEnter Elements to Matrix Below :: \n"";

    for(i=0;i<r;i++)
    {
        for(j=0;j<c;++j)
        {
            cout<<""\nEnter a1[""<<i<<""][""<<j<<""] Element :: "";
            cin>>a[i][j];
        }

    }
    // Displaying the matrix a[][]
    cout << ""\n The Entered Matrix is :: \n"" << endl;
    for (i = 0; i < r; ++i)
        {
            for (j = 0; j < c; ++j)
            {
                cout<<""\t""<<a[i][j];
            }
            printf(""\n\n"");
        }

    // Finding transpose of matrix a[][] and storing it in array trans[][].
    for(i = 0; i < r; ++i)
        for(j = 0; j < c; ++j)
        {
            trans[j][i]=a[i][j];
        }

    // Displaying the transpose_._i.e_._ Displaying array trans[][].
    cout << endl << ""Transpose of Matrix :: "" << endl;
    for (i = 0; i < r; ++i)
        {
            for (j = 0; j < c; ++j)
            {
                cout<<""\t""<<trans[i][j];
            }
            printf(""\n\n"");
        }

    return 0;
}"
113,Write a C++ Program to Subtract Two Matrices using array.,"#include<iostream>
using namespace std;

int main()
{

        int arr1[5][5]_._ arr2[5][5]_._ arr3[5][5]_._ sub_._ i_._ j_._m_._n;

         cout<<""Enter size of matrix ( Max:5 ) :: "";
    cin>>m;
    cout<<""\nEnter Elements to Matrix A Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr1[""<<i<<""][""<<j<<""] Element :: "";
            cin>>arr1[i][j];
        }

    }

    cout<<""\nEnter Elements to Matrix B Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter arr2[""<<i<<""][""<<j<<""] Element :: "";
            cin>>arr2[i][j];
        }

    }


        cout<<""\nSubtracting Matrix ( A - B ) ..... \n"";
        for(i=0; i<m; i++)
        {
                for(j=0; j<m; j++)
                {
                        arr3[i][j]=arr1[i][j]-arr2[i][j];
                }
        }

        cout<<""\nAfter Subtraction_._ Matrix C is :: \n"";

        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < m; ++j)
            {
                cout<<""\t""<<arr3[i][j];
            }
            printf(""\n\n"");
        }

        return 0;
}"
114,Write a C++ Program for implementation of Quick Sort using array,"#include <iostream>

using namespace std;

void quick_sort(int[]_._int_._int);
int partition(int[]_._int_._int);

int main()
{
    int a[50]_._n_._i;

    cout<<""Enter size of Array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
    }


    quick_sort(a_._0_._n-1);
    cout<<""\nAfter Quick Sort_._ Sorted List is :: \n\n"";

    for(i=0;i<n;i++)
    {
         cout<<a[i]<<""  "";
    }

    cout<<""\n"";

    return 0;
}

void quick_sort(int a[]_._int l_._int u)
{
    int j;
    if(l<u)
    {
        j=partition(a_._l_._u);
        quick_sort(a_._l_._j-1);
        quick_sort(a_._j+1_._u);
    }
}

int partition(int a[]_._int l_._int u)
{
    int v_._i_._j_._temp;
    v=a[l];
    i=l;
    j=u+1;

    do
    {
        do
            i++;

        while(a[i]<v&&i<=u);

        do
            j--;
        while(v<a[j]);

        if(i<j)
        {
            temp=a[i];
            a[i]=a[j];
            a[j]=temp;
        }
    }while(i<j);

    a[l]=a[j];
    a[j]=v;

    return(j);
}"
115,Write a C++ Program to implement Shell Sort using Array. ,"#include<iostream>

using namespace std;

void sort(int a[]_._int n)
{
    int gap_._i_._j_._temp;

    for(gap=n/2;gap>0;gap/=2)
    {
        for(i=gap;i<n;i+=1)
        {
            temp=a[i];
            for(j=i;j>=gap&&a[j-gap]>temp;j-=gap)
                a[j]=a[j-gap];

            a[j]=temp;
        }
    }
}

int main()
{
    int a[20]_._i_._n;

    cout<<""Enter size of Array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
    }


    sort(a_._n);

    cout<<""\nAfter shell sort_._ Sorted List is :: \n\n"";
    for(i=0;i<n;++i)
    {
        cout<<a[i]<<""  "";
    }

    cout<<""\n"";

    return 0;
}"
116,Write a C++ Program to find Union of Two Sorted Arrays.,"#include<iostream>

using namespace std;

int main()
{
    int a1[20]_._a2[20]_._u[40]_._i_._j_._k_._n_._m;

    cout<<""Enter size of first array: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a1[i];
    }

    cout<<""\nEnter size of second array: "";
    cin>>m;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<m;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a2[i];
    }


    for(i=0_._j=0_._k=0;i<n&&j<m;){
        if(a1[i]<a2[j]){
            u[k]=a1[i];
            i++;
            k++;
        }
        else if(a1[i]>a2[j]){
            u[k]=a2[j];
            j++;
            k++;
        }
        else{
            u[k]=a1[i];
            i++;
            j++;
            k++;
        }
    }

    if(i<n){
        for(;i<n;++i){
            u[k]=a1[i];
            k++;
        }
    }
    else if(j<m){
        for(;j<m;++j){
            u[k]=a2[j];
            k++;
        }
    }

    cout<<""\nUnion of two arrays is :: \n\n"";
    for(i=0;i<k;++i)
    {
        cout<<u[i]<<""  "";
    }

    cout<<""\n"";

    return 0;
}"
117,Write a C++ Program to find Union of Two Unsorted Arrays.,"#include<iostream>

using namespace std;

int main()
{
    int a1[20]_._a2[20]_._u[40]_._i_._j_._k_._n_._m_._flag;

    cout<<""Enter size of first array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a1[i];
    }

    cout<<""\nEnter size of second array :: "";
    cin>>m;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<m;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a2[i];
    }

        k=0;
    for(i=0;i<n;++i){
        u[k]=a1[i];
        k++;
    }

    for(i=0;i<m;++i){
        flag=1;
        for(j=0;j<n;++j){
            if(a2[i]==a1[j]){
                flag=0;
                break;
            }
        }

        if(flag){
            u[k]=a2[i];
            k++;
        }
    }

    cout<<""\nUnion of two arrays is :: \n\n"";
    for(i=0;i<k;++i)
    {
        cout<<u[i]<<""  "";
    }

    cout<<""\n"";

    return 0;
}"
118,Write a C++ Program to implement Insertion Sort using Array.,"#include<iostream>

using namespace std;

int main()
{
    int i_._j_._n_._temp_._a[30];

    cout<<""Enter size of Array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
    }

    for(i=1;i<=n-1;i++)
    {
        temp=a[i];
        j=i-1;

        while((temp<a[j])&&(j>=0))
        {
            a[j+1]=a[j];
            j=j-1;
        }

        a[j+1]=temp;
    }

    cout<<""\nAfter Insertion Sort_._ Sorted list is :: \n\n"";
    for(i=0;i<n;i++)
    {
        cout<<a[i]<<""  "";
    }
    cout<<""\n"";

    return 0;
}"
119,Write a C++ Program to implement Selection Sort using Array.,"#include<iostream>

using namespace std;

int main()
{
    int i_._j_._n_._loc_._temp_._min_._a[30];

    cout<<""Enter size of Array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
    }

    for(i=0;i<n-1;i++)
    {
        min=a[i];
        loc=i;
        for(j=i+1;j<n;j++)
        {
            if(min>a[j])
            {
                min=a[j];
                loc=j;
            }
        }

        temp=a[i];
        a[i]=a[loc];
        a[loc]=temp;
    }

    cout<<""\nAfter Selection Sort_._ Sorted list is :: \n\n"";
    for(i=0;i<n;i++)
    {
        cout<<a[i]<<""  "";
    }
    cout<<""\n"";

    return 0;
}"
120,Write a C++ Program to Find Largest and Smallest Element of a Matrix.,"#include<iostream>

using namespace std;

int main()
{
    int m_._n_._a[10][10]_._i_._j_._high_._low;
    cout<<""Enter no. of rows :: "";
    cin>>m;
    cout<<""\nEnter no. of coloumns :: "";
    cin>>n;
    cout<<""\nEnter Elements to Matrix Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<n;++j)
        {
            cout<<""\nEnter a[""<<i<<""][""<<j<<""] Element :: "";
            cin>>a[i][j];
        }

    }

    cout<<""\nThe given matrix is :: \n\n"";
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < n; ++j)
            {
                cout<<""\t""<<a[i][j];
            }
            printf(""\n\n"");
        }

    high=a[0][0];
    low=a[0][0];

    for(i=0;i<m;++i)
    {
        for(j=0;j<n;++j)
        {
            if(a[i][j]>high)
                high=a[i][j];
            else
                if(a[i][j]<low)
                    low=a[i][j];
        }
    }

    cout<<""\nHighest Element :: ""<<high<<""\n\nLowest Element :: ""<<low<<""\n"";

    return 0;
}"
121,Write a C++ Program to implement Binary Search using array,"#include<iostream>

using namespace std;

int main()
{
    int search(int []_._int_._int);
    int n_._i_._a[100]_._e_._res;
    cout<<""Enter size of Array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
    }

    cout<<""\nEnter element to search :: "";
    cin>>e;

    res=search(a_._n_._e);

    if(res!=-1)
        cout<<""\nElement found at position ""<<res+1<<""\n"";
    else
        cout<<""\nElement is not found....!!!"";

    return 0;
}

int search(int a[]_._int n_._int e)
{
    int f_._l_._m;
    f=0;
    l=n-1;

    while(f<=l)
    {
        m=(f+l)/2;
        if(e==a[m])
            return(m);
        else
            if(e>a[m])
                f=m+1;
            else
                l=m-1;
    }

    return -1;
}"
122,Write a C++ Program to implement Linear Search using Arrays. ,"#include<iostream>

using namespace std;

int main()
{
    int a[20]_._n_._x_._i_._flag=0;

    cout<<""Enter size of Array :: "";
    cin>>n;
    cout<<""\nEnter elements to the array :: \n"";

    for(i=0;i<n;++i)
    {
        cout<<""\nEnter ""<<i+1<<"" element :: "";
        cin>>a[i];
    }


    cout<<""\nEnter element to search :: "";
    cin>>x;

    for(i=0;i<n;++i)
    {
        if(a[i]==x)
        {
            flag=1;
            break;
        }
    }

    if(flag)
        cout<<""\nElement is found at position ""<<i+1;
    else
        cout<<""\nElement not found"";

    return 0;
}"
123,Write a C++ Program to Find Sum of Diagonals elements in a Matrix,"#include<iostream>

using namespace std;

int main()
{
    int a[10][10]_._d1sum=0_._d2sum=0_._m_._i_._j;
    cout<<""Enter size of matrix :: "";
    cin>>m;
    cout<<""\nEnter Elements to Matrix Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter a[""<<i<<""][""<<j<<""] Element :: "";
            cin>>a[i][j];
        }

    }

    cout<<""\nThe given matrix is :: \n\n"";
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < m; ++j)
            {
                cout<<""\t""<<a[i][j];
            }
            printf(""\n\n"");
        }



    for(i=0;i<m;++i)
        for(j=0;j<m;++j)
        {
            if(i==j)
                d1sum+=a[i][j];
            if(i+j==(m-1))
                d2sum+=a[i][j];
        }

    cout<<""\nSum of 1st diagonal is :: ""<<d1sum;
    cout<<""\n\nSum of 2nd diagonal is :: ""<<d2sum;

    return 0;
}"
124,Write a C++ Program to Find Sum of Diagonals elements in a Matrix,"#include<iostream>

using namespace std;

int main()
{
    int a[10][10]_._d1sum=0_._d2sum=0_._m_._i_._j;
    cout<<""Enter size of matrix :: "";
    cin>>m;
    cout<<""\nEnter Elements to Matrix Below :: \n"";

    for(i=0;i<m;i++)
    {
        for(j=0;j<m;++j)
        {
            cout<<""\nEnter a[""<<i<<""][""<<j<<""] Element :: "";
            cin>>a[i][j];
        }

    }

    cout<<""\nThe given matrix is :: \n\n"";
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < m; ++j)
            {
                cout<<""\t""<<a[i][j];
            }
            printf(""\n\n"");
        }



    for(i=0;i<m;++i)
        for(j=0;j<m;++j)
        {
            if(i==j)
                d1sum+=a[i][j];
            if(i+j==(m-1))
                d2sum+=a[i][j];
        }

    cout<<""\nSum of 1st diagonal is :: ""<<d1sum;
    cout<<""\n\nSum of 2nd diagonal is :: ""<<d2sum;

    return 0;
}"
125,Write a C++ Program to Print Lowerhalf and Upperhalf of Triangle Matrix.,"#include<iostream>

using namespace std;

int main()
{
    int a[10][10]_._i_._j_._m;
    cout<<""Enter size of the Matrix(min:3_._max:5):"";
    cin>>m;
    cout<<""\nEnter the Matrix row wise:\n"";

    for(i=0;i<m;i++)
        for(j=0;j<m;++j)
            cin>>a[i][j];

    cout<<""\n\n"";

    cout<<""Upperhalf  of  Triangle Matrix :: \n"";

    for(i=0;i<m;++i)
    {
        for(j=0;j<m;++j)
        {
            if(i<j)
                cout<<a[i][j]<<"" "";
            else
                cout<<""  "";
        }

        cout<<""\n"";
    }

    cout<<""\n"";

    cout<<""Lowerhalf  of  Triangle Matrix :: \n"";

    for(i=0;i<m;++i)
    {
        for(j=0;j<m;++j)
        {
            if(j<i)
                cout<<a[i][j]<<"" "";
            else
                cout<<"" "";
        }
        cout<<""\n"";
    }

    return 0;
}"
126,Write a C++ Program to Find Sum Above and Below of Main Diagonal Matrix.,"#include<iostream>
 
using namespace std;
 
int main()
{
    int arr[5][5]_._a=0_._b=0_._i_._j_._n;
    cout<<""Enter size of matrix(max 5):"";
    cin>>n;
    cout<<""Enter the matrix:\n"";
    
    for(i=0;i<n;++i)
        for(j=0;j<n;++j)
            cin>>arr[i][j];
    
    for(i=0;i<n;++i)
        for(j=0;j<n;++j)
            if(j>i)
                a+=arr[i][j];
            else
                if(i>j)
                    b+=arr[i][j];
    
    cout<<""\nSum of elements above the diagonal:""<<a;
    cout<<""\nSum of elements below the diagonal:""<<b;
 
    return 0;
}"
127,Write a C++ Menu Driven Program for Queue Operations using Arrays.,"#include<iostream>

using namespace std;

class queue
{
  public:
  int q[5]_._front_._rear_._x_._result;
  void enq();
  void dque();
  void disp();
  queue()
  {
    front=0;
    rear=0;
  }
};
void queue::enq()
{
  if(rear>=5)
  cout<<""\nQueue overflow!!\n"";
  else
  {
    cout<<""\nEnter the number to be inserted: "";
    cin>>x;
    rear++;
    q[rear]=x;
    cout<<""\nNumber pushed in the queue:""<<q[rear];
  }
}
void queue::dque()
{
  if(rear==0)
  cout<<""\nQueue underflow!!\n"";
  else
  {
    if(front==rear)
    {
      front=0;
      rear=0;
    }
    else
      front++;
  }
  cout<<""\nDeleted element is:"";
  result=q[front];
  cout<<result;
}
void queue::disp()
{
  if(rear==0)
    cout<<""\nQueue underflow!!\n"";
  else
    cout<<""\nContents of queue is:"";
  for(int i=front+1;i<=rear;i++)
    cout<<q[i]<<""\t"";
}

int main()
{
  int c;
  queue qu;
 cout<<""\n**********"";
 cout<<""QUEUE"";
 cout<<""**********\n"";
  do
  {
    cout<<""\n1.Insertion\n2.Deletion\n3.Display\n"";
    cout<<""\nEnter your choice:"";
    cin>>c;
    switch(c)
    {
      case 1:
    qu.enq();
    break;
      case 2:
    qu.dque();
    break;
      case 3:
    qu.disp();
    break;
      default:
    cout<<""\nInvalid choice!!\n"";
    }
  }
  while(c<4);
  return 0;
}"
128,Write a C++ Menu Driven Program for Stack Operations Using Arrays.,"#include<stdio.h>
#include<iostream>

using namespace std;

class Stack
{
int top;
int arr[50];
public:
    Stack()
{
       top=-1;
}

    void push();
    void pop();
    void view();
    int isEmpty();
    int isFull();
};

int Stack::isEmpty()
{
    return (top==(-1)?1:0);
}

int Stack::isFull()
{
    return ( top == 50 ? 1 : 0 );
}

void Stack::push()
{
    if(isFull())
    {
        cout<<""\nSTACK IS FULL { OVERFLOW }"";
    }
    else
    {
        int i;
        cout<<""\nEnter an element :: "";
        cin>>i;
        ++top;
        arr[top]=i;
        cout<<""\nInsertion successful.\n"";
    }
}

void Stack::pop()
{
    int num;
    if(isEmpty())
    {
            cout<<""\n STACK IS EMPTY [ UNDERFLOW ] "";
    }
    else
    {
    cout<<""\nDeleted item is : ""<<arr[top]<<""\n"";
    top--;
    }
}

void Stack::view()
{
    if(isEmpty())
    {
            cout<<""\n STACK IS EMPTY [ UNDERFLOW ] "";
    }
    else
    {
    cout<<""\nSTACK :\n"";
    for(int i=top;i>=0;i--)
    {
            cout<<arr[i]<<""\n"";
    }
    }
}


int main()
{
    Stack s;
    int ch;
    ch=0;
    while(ch!=4)
    {
        cout<<""\n1. Push\n"";
        cout<<""2. Pop\n"";
        cout<<""3. Display\n"";
        cout<<""4. Quit\n"";
        cout<<""\nEnter your Choice :: "";
        cin>>ch;

        switch(ch)
        {
            case 1:
                s.push();
                break;

            case 2:
                s.pop();
                break;

            case 3:
                s.view();
                break;

            case 4:
                ch=4;
                cout<<""\nPress any key .. "";
                break;

            default:
                cout<<""\nWrong Choice!! \n"";
                break;
        }
    }

    return 0;
}"
129,Write a C++ Program to implement Merge Sort using Divide and Conquer Algorithm,"#include <iostream>
using namespace std;

int a[100];
void merge(int_._int_._int);
void merge_sort(int low_._int high)
{
 int mid;
 if(low<high)
 {
  mid=(low+high)/2;
  merge_sort(low_._mid);
  merge_sort(mid+1_._high);
  merge(low_._mid_._high);
 }
}
void merge(int low_._int mid_._int high)
{
 int h_._i_._j_._b[100]_._k;
 h=low;
 i=low;
 j=mid+1;

 while((h<=mid)&&(j<=high))
 {
  if(a[h]<=a[j])
  {
   b[i]=a[h];
   h++;
  }
  else
  {
   b[i]=a[j];
   j++;
  }
  i++;
 }
 if(h>mid)
 {
  for(k=j;k<=high;k++)
  {
   b[i]=a[k];
   i++;
  }
 }
 else
 {
  for(k=h;k<=mid;k++)
  {
   b[i]=a[k];
   i++;
  }
 }
 for(k=low;k<=high;k++) a[k]=b[k];
}
int main()
{
 int num_._i;

 cout<<""Enter no.of elements you want to sort:"";
 cin>>num;

 cout<<""Enter ""<< num <<"" Elements : ""<<endl;

 for(i=1;i<=num;i++)
 {
  cout<<i<<"" Element : "";
  cin>>a[i] ;
 }
 merge_sort(1_._num);
 cout<<endl;
 cout<<""After Merge Sort_._ Sorted Array is :""<<endl;

 for(i=1;i<=num;i++)
 {
      cout<<a[i]<<"" "";
 }

 cout<<endl;

return 0;
}"
130,Write a C++ Program to implement Linear Search using recursion.,"
#include<iostream>
using namespace std;

int recursiveLinearSearch(int array[]_._int key_._int size)
{
        size=size-1;
        if(size <0)
    {
                return -1;
        }
        else if(array[size]==key)
        {
                return 1;
        }
        else
        {
                return recursiveLinearSearch(array_._key_._size);
        }
}

int main()
{
        int size;
        cout<<""\nEnter Size Of Array :: "";
        cin>>size;
        int array[size]_._ key_._i;

        for (int j=0;j<size;j++)
    {
                cout<<""\nEnter [ ""<<j<<"" ] Element :: "";
                cin>>array[j];
        }

        cout<<""\nThe Array entered is :: \n\n"";

        for (int a=0;a<size;a++)
    {
                cout<<""Arr[ ""<<a<<"" ]  =  "";
                cout<<array[a]<<endl;
        }

        cout<<""\nEnter any Key To Search in Array :: "";
        cin>>key;
        int result;

        result=recursiveLinearSearch(array_._key_._size--);

        if(result==1) {
                cout<<""\nKey Found in Array .\n "";
        } else {
                cout<<""\nKey NOT Found in Array .\n "";
        }
        return 0;
}"
131,Write a C++ Program to Find Factorial of a number using recursion. ,"#include<iostream>
using namespace std;

int factorial(int n);

int main()
{
    int n;

    cout << ""\nEnter any positive integer :: "";
    cin >> n;

    cout << ""\nFactorial of [ "" << n << "" ]  =  [ "" << factorial(n)<<"" ]\n"";

    return 0;
}

int factorial(int n)
{
    if(n > 1)
        return n * factorial(n - 1);
    else
        return 1;
}"
132,Write a C++ program to Find Sum of n Natural Numbers using Recursion,"#include<iostream>
using namespace std;

int add(int n);

int main()
{
    int n;

    cout << ""\nEnter any positive integer :: "";
    cin >> n;

    cout << ""\nThe Sum of natural numbers upto [ ""<<n<<"" ]  =  "" << add(n)<<""\n"";

    return 0;
}

int add(int n)
{
    if(n != 0)
        return n + add(n - 1);
    return 0;
}"
133,Write a C++ program to Check Number can Express as Sum of Prime Numbers. ,"#include <iostream>
using namespace std;

bool checkPrime(int n);

int main()
{
    int n_._ i;
    bool flag = false;

    cout << ""\nEnter any positive  integer :: "";
    cin >> n;
    cout<<""\n"";

    for(i = 2; i <= n/2; ++i)
    {
        if (checkPrime(i))
        {
            if (checkPrime(n - i))
            {
                cout << n << "" = "" << i << "" + "" << n-i << endl;
                flag = true;
            }
        }
    }

    if (!flag)
      cout <<""\nThe Number [ ""<< n << "" ] can't be expressed as sum of two prime numbers.\n"";

    return 0;
}

// Check prime number
bool checkPrime(int n)
{
    int i;
    bool isPrime = true;

    for(i = 2; i <= n/2; ++i)
    {
        if(n % i == 0)
        {
            isPrime = false;
            break;
        }
    }

    return isPrime;
}"
134,Write a C++ Program to Check Prime Number using function.,"#include <iostream>
using namespace std;

int checkPrimeNumber(int);

int main()
{
  int n;

  cout << ""\nEnter any positive integer :: "";
  cin >> n;

  if(checkPrimeNumber(n) == 0)
    cout <<""\nThe Number [ ""<< n << "" ] is a prime number.\n"";
  else
    cout <<""\nThe Number [ ""<< n << "" ] is not a prime number.\n"";

  return 0;
}

int checkPrimeNumber(int n)
{
  bool flag = false;

  for(int i = 2; i <= n/2; ++i)
  {
      if(n%i == 0)
      {
          flag = true;
          break;
      }
  }
  return flag;
}"
135,Write a C++ Program to find Prime Numbers between two numbers.  ,"#include <iostream>
using namespace std;

int checkPrimeNumber(int);

int main()
{
    int n1_._ n2;
    bool flag;

    cout << ""\nEnter 1st positive integer :: "";
    cin >> n1;
    cout << ""\nEnter 2nd positive integer :: "";
    cin >> n2;

    cout << ""\nPrime numbers between [ "" << n1 << "" and "" << n2 << "" ] are :: "";

    for(int i = n1+1; i < n2; ++i)
    {
        // If i is a prime number_._ flag will be equal to 1
        flag = checkPrimeNumber(i);

        if(flag == true)
            cout << i << ""  "";
    }
    return 0;
}

// user-defined function to check prime number
int checkPrimeNumber(int n)
{
    bool flag = true;

    for(int j = 2; j <= n/2; ++j)
    {
        if (n%j == 0)
        {
            flag = false;
            break;
        }
    }
    return flag;
}"
136,Write a C++ Program to find GCD of two numbers using recursion.,"#include <iostream>
using namespace std;

int hcf(int n1_._ int n2);

int main()
{
   int n1_._ n2;

   cout << ""\nEnter 1st positive integer :: "";
   cin >> n1;
    cout << ""\nEnter 2nd positive integer :: "";
   cin >> n2;

   cout << ""\nGCD of Two Numbers [ "" << n1 << "" & "" <<  n2 << "" ] is :: "" << hcf(n1_._ n2)<<""\n"";

   return 0;
}

int hcf(int n1_._ int n2)
{
    if (n2 != 0)
       return hcf(n2_._ n1 % n2);
    else
       return n1;
}"
137,Write a C++ Program to find Power of a Number using Recursion,"#include <iostream>
using namespace std;

int calculatePower(int_._ int);

int main()
{
    int base_._ powerRaised_._ result;

    cout << ""\nEnter base value :: "";
    cin >> base;

    cout << ""\nEnter power of base :: "";
    cin >> powerRaised;

    result = calculatePower(base_._ powerRaised);

    cout <<""\nThe Power of a Number [ ""<< base << ""^"" << powerRaised << "" ] = "" << result<<""\n"";

    return 0;
}

int calculatePower(int base_._ int powerRaised)
{
    if (powerRaised != 0)
        return (base*calculatePower(base_._ powerRaised-1));
    else
        return 1;
}"
138,Write a C++ program to Reverse a String using recursion.,"#include <iostream>
using namespace std;

void reverse(const string& a);

int main()
{
    string str;
    cout << ""\nPlease Enter any string :: "";
    getline(cin_._ str);

    cout<<""\nReverse of String [ ""<<str<<"" ] is :: "";
    reverse(str);

    return 0;
}

void reverse(const string& str)
{
    size_t numOfChars = str.size();

    if(numOfChars == 1)
       cout << str << endl;
    else
    {
       cout << str[numOfChars - 1];
       reverse(str.substr(0_._ numOfChars - 1));
    }
}"
139,Write a C++ Program for Fibonacci Series using Recursive function.,"#include<iostream>
 using namespace std;

int fibonacci(int n)
{
    if((n==1)||(n==0))
    {
        return(n);
    }
    else
    {
        return(fibonacci(n-1)+fibonacci(n-2));
    }
}

int main()
{
    int n_._i=0;
    cout<<""\nHow many terms for Fibonacci Series :: "";
    cin>>n;
    cout<<""\nFibonacci Series for [ ""<<n<<"" ] Terms as follows :: \n\n"";

    while(i<n)
    {
        cout<<""  ""<<fibonacci(i);
        i++;
    }
    cout<<""\n"";

    return 0;
}"
140,Write a C++ program to Swap Values using call by reference.,"#include<iostream>
using namespace std;

void swap(int &_._int &);

int main()
{
    int a_._b;

    cout<<""\nEnter 1st number :: "";
    cin>>a;
    cout<<""\nEnter 2nd number :: "";
    cin>>b;

    cout<<""\nBefore Swapping :: \n\ta = ""<<a<<""\tb = ""<<b<<""\n"";
    swap(a_._b);
    cout<<""\nAfter Swapping :: \n\ta = ""<<a<<""\tb = ""<<b<<""\n"";

    return 0;
}

void swap(int & x_._int & y)
{
    int temp;
    temp=x;
    x=y;
    y=temp;
}"
141,Write a C++ Program to print series using function: x + x^3/3! + x^5/5! +…..+ x^n/n!. ,"#include<iostream>
using namespace std;

double sum(int _._int );
double res;

int main()
{
    int x_._n;

    cout<<""\nEnter value of x :: "";
    cin>>x;
    cout<<""\nEnter value of n :: "";
    cin>>n;

    res=sum(x_._n);

    cout<<""\nSum of series [ x + x^3/3! + x^5/5! +.....+ x^n/n!] is :: [ ""<<res<<"" ]\n"";

    return 0;
}

double sum(int a_._int b)
{
    long power(int_._int);
    int i_._j;
    double s=0_._fac=1;
    long p;

    for(i=1;i<=b;i+=2)
    {
    p=power(a_._i);
    for(j=1;j<=i;++j)
    {
    fac*=j;
    }
    s+=p/fac;
    fac=1;
    }
    return(s);
}

long power(int x_._int i)
{
    long res=1_._j;
    for(j=1;j<=i;++j)
    {
    res*=x;
    }
    return(res);
}"
142,Write a C++ Program for Addition Subtraction Multiplication using function,"#include<iostream>
using namespace std;

int sum(int_._int);
int sub(int_._int);
int mul(int_._int);

int res=0;

int main()
{
    int a_._b_._m_._su_._s;
    cout<<""\nEnter 1st number :: "";
    cin>>a;
    cout<<""\nEnter 2nd number :: "";
    cin>>b;

    s=sum(a_._b);
    su=sub(a_._b);
    m=mul(a_._b);

    cout<<""\nAddition of two Numbers [ ""<<a<<"" + ""<<b<<"" ] = ""<<s<<""\n"";
    cout<<""\nSubtraction of two Numbers [ ""<<a<<"" - ""<<b<<"" ] = ""<<su<<""\n"";
    cout<<""\nMultiplication of two Numbers [ ""<<a<<"" * ""<<b<<"" ] = ""<<m<<""\n"";

    return 0;
}

sum(int a_._int b)
{
    res=a+b;
    return(res);
}

sub(int a_._int b)
{
    res=a-b;
    return(res);
}

mul(int a_._int b)
{
    res=a*b;
    return(res);
}"
143,"
Write a C++ Program to find Cube of a Number using function.","#include<iostream>
using namespace std;

int main()
{
    float cube(float);
                                   //function prototype
    float a_._cu;
    cout<<""\nEnter any number :: "";
    cin>>a;

    cu=cube(a);                                         //function calling

    cout<<""\nThe Cube of Number [ ""<<a<<"" ] is :: ""<<cu<<""\n"";

    return 0;
}

float cube(float a)
{
    float cu;
    cu=a*a*a;
    return(cu);
}"
144,Write a C++ Program to find Largest of two numbers using Inline function,"#include<iostream>
using namespace std;

inline int Largest(int a_._int b)
{
        int r;
        r=(a>b)?a:b;
        return(r);
}

int main()
{
        int a_._b;

        cout<<""\nEnter 1st number :: "";
        cin>>a;
        cout<<""\nEnter 2nd number :: "";
        cin>>b;

        cout<<""\nLargest of two numbers [ ""<<a<<""_._ ""<<b<<"" ] is :: ""<<Largest(a_._b)<<""\n"";
}"
145,Write a C++ Program to find Factorial of a number using class.,"#include<iostream>
using namespace std;

class factorial
{
        private:
                        int n_._n1_._f=1;
        public:
                void input();
                void calc();
                void display();
};

void factorial::input()
{
        cout<<""\nEnter any number :: "";
        cin>>n;
}

void factorial::calc()
{
        n1=n;
        if(n==0||n==1)
        cout<<""\nFactorial of Number [ ""<<n<<"" ] is :: 1\n"";
        else
        {
                while(n>0)
                {
                        f=f*n;
                        n--;
                }
        }

}

void factorial::display()
{
                cout<<""\nFactorial of [ ""<<n1<<"" ] is :: ""<<f<<""\n"";
}

int main ()
{
        factorial f;
        f.input();
        f.calc();
        f.display();

        return 0;
}"
146,Write a C++ Program to find Largest of three Numbers using class.,"#include<iostream>
using namespace std;

class largest
{
        private:
                int x_._y_._z;
    public:
        void input()
        {
                cout<<""\nEnter 1st number :: "";
                cin>>x;
                cout<<""\nEnter 2nd number :: "";
                cin>>y;
                cout<<""\nEnter 3rd number :: "";
                cin>>z;
        }

        void calc()
        {
                int r;
                r=((x>y)&&(x>z)?x:(y>x)&&(y>z)?y:z);

                cout<<""\nThe Largest Number among [ ""<<x<<""_._ ""<<y<<""_._ ""<<z<<"" ] = ""<<r<<""\n"";
        }
};

int main()
{
        largest g;
        g.input();
        g.calc();

        return 0;
}"
147,Write a C++ Program to Swap two numbers and characters using call by value.,"#include<iostream>
using namespace std;

void swap(int_._int);
void swapc(char_._char);

int main()
{
        char x_._y;
        int a_._b;
        cout<<""\nEnter 1st character :: "";
        cin>>x;
        cout<<""\nEnter 2nd character :: "";
        cin>>y;
        cout<<""\nEnter 1st integer :: "";
        cin>>a;
        cout<<""\nEnter 2nd integer :: "";
        cin>>b;

        cout<<""\nBefore Swapping_._ Value of Characters :: \n\tx = ""<<x<<""\ty = ""<<y<<""\n"";
        cout<<""\nBefore Swapping_._ Value of Integers :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

    swap(a_._b);
    swapc(x_._y);

    cout<<""\nOutside Function After Swapping_._ Value of Characters :: \n\tx = ""<<x<<""\ty = ""<<y<<""\n"";
        cout<<""\nOutside Function After Swapping_._ Value of Integers :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

}
void swap(int a_._int b)
{
        int c;
        c=a;
        a=b;
        b=c;
        cout<<""\nInside Function After Swapping_._ Value of Integers :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

}
void swapc(char x_._char y)
{
        char z;
        z=x;
        x=y;
        y=z;
        cout<<""\nInside Function After Swapping_._ Value of Characters :: \n\tx = ""<<x<<""\ty = ""<<y<<""\n"";
}"
148,"
Write a C++ program to find Reverse of a Number using class. ","#include<iostream>
using namespace std;

class rev
{
        private:
                        int n_._n1_._rn=0_._d;
        public:
                void input();
                void calc();
                void display();
};

void rev::input()
{
        cout<<""\nEnter any positive no. :: "";
        cin>>n;
}

void rev::calc()
{
        n1=n;
        while(n>0)
        {
                d=n%10;
                rn=(rn*10)+d;
                n/=10;

        }
}

void rev::display()
{
                cout<<""\nReverse of [ ""<<n1<<"" ] is :: ""<<rn<<""\n"";
}

int main ()
{
        rev r;
        r.input();
        r.calc();
        r.display();

        return 0;

}"
149,Write a C++ Program to Swap two numbers and characters using call by address,"#include<iostream>
using namespace std;

void swap(int *_._int *);
void swapc(char *_._char *);

int main()
{
        char x_._y;
        int a_._b;
        cout<<""\nEnter 1st character :: "";
        cin>>x;
        cout<<""\nEnter 2nd character :: "";
        cin>>y;
        cout<<""\nEnter 1st integer :: "";
        cin>>a;
        cout<<""\nEnter 2nd integer :: "";
        cin>>b;

        cout<<""\nBefore Swapping_._ Value of Characters :: \n\tx = ""<<x<<""\ty = ""<<y<<""\n"";
        cout<<""\nBefore Swapping_._ Value of Integers :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

    swap(&a_._&b);
    swapc(&x_._&y);

    cout<<""\nOutside Function After Swapping_._ Value of Characters :: \n\tx = ""<<x<<""\ty = ""<<y<<""\n"";
        cout<<""\nOutside Function After Swapping_._ Value of Integers :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

}

void swap(int *a_._int *b)
{
        int c;
        c=*a;
        *a=*b;
        *b=c;
        cout<<""\nInside Function After Swapping_._ Value of Integers :: \n\tA = ""<<*a<<""\tB = ""<<*b<<""\n"";

}

void swapc(char *x_._char *y)
{
        char z;
        z=*x;
        *x=*y;
        *y=z;
        cout<<""\nInside Function After Swapping_._ Value of Characters :: \n\tx = ""<<*x<<""\ty = ""<<*y<<""\n"";
}"
150,Write a C++ program to find Reverse of a Number using class. ,"#include<iostream>
using namespace std;

class rev
{
        private:
                        int n_._n1_._rn=0_._d;
        public:
                void input();
                void calc();
                void display();
};

void rev::input()
{
        cout<<""\nEnter any positive no. :: "";
        cin>>n;
}

void rev::calc()
{
        n1=n;
        while(n>0)
        {
                d=n%10;
                rn=(rn*10)+d;
                n/=10;

        }
}

void rev::display()
{
                cout<<""\nReverse of [ ""<<n1<<"" ] is :: ""<<rn<<""\n"";
}

int main ()
{
        rev r;
        r.input();
        r.calc();
        r.display();

        return 0;

}"
151,"
Write a C++ Program to Swap two numbers and characters using call by address.","#include<iostream>
using namespace std;

void swap(int *_._int *);
void swapc(char *_._char *);

int main()
{
        char x_._y;
        int a_._b;
        cout<<""\nEnter 1st character :: "";
        cin>>x;
        cout<<""\nEnter 2nd character :: "";
        cin>>y;
        cout<<""\nEnter 1st integer :: "";
        cin>>a;
        cout<<""\nEnter 2nd integer :: "";
        cin>>b;

        cout<<""\nBefore Swapping_._ Value of Characters :: \n\tx = ""<<x<<""\ty = ""<<y<<""\n"";
        cout<<""\nBefore Swapping_._ Value of Integers :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

    swap(&a_._&b);
    swapc(&x_._&y);

    cout<<""\nOutside Function After Swapping_._ Value of Characters :: \n\tx = ""<<x<<""\ty = ""<<y<<""\n"";
        cout<<""\nOutside Function After Swapping_._ Value of Integers :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

}

void swap(int *a_._int *b)
{
        int c;
        c=*a;
        *a=*b;
        *b=c;
        cout<<""\nInside Function After Swapping_._ Value of Integers :: \n\tA = ""<<*a<<""\tB = ""<<*b<<""\n"";

}

void swapc(char *x_._char *y)
{
        char z;
        z=*x;
        *x=*y;
        *y=z;
        cout<<""\nInside Function After Swapping_._ Value of Characters :: \n\tx = ""<<*x<<""\ty = ""<<*y<<""\n"";
}"
152,Write a C++ Program to find Sum and Product using inline function. ,"#include<iostream>
using namespace std;

inline int sum(int a_._int b_._int c_._int d_._int e)
{
        return(a+b+c+d+e);
}

inline int mul(int a_._int b_._int c_._int d_._int e)
{
        return(a*b*c*d*e);
}

int main()
{
        int a_._b_._c_._d_._e;
        cout<<""\nEnter 1st number :: "";
        cin>>a;
        cout<<""\nEnter 2nd number :: "";
        cin>>b;
        cout<<""\nEnter 3rd number :: "";
        cin>>c;
        cout<<""\nEnter 4th number :: "";
        cin>>d;
        cout<<""\nEnter 5th number :: "";
        cin>>e;

        cout<<""\nSum of 5 Numbers [ ""<<a<<""+""<<b<<""+""<<c<<""+""<<d<<""+""<<e<<"" ] = ""<<sum(a_._b_._c_._d_._e)<<""\n"";
        cout<<""\nProduct of 5 Numbers [ ""<<a<<""*""<<b<<""*""<<c<<""*""<<d<<""*""<<e<<"" ] = ""<<mul(a_._b_._c_._d_._e)<<""\n"";

        return 0;
}"
153,Write a C++ Program to Add Two Time Objects using call by reference.,"#include<iostream>
using namespace std;

class time
{
        int hr_._min_._sec;
        public:
                void get()
                {
                    cout<<""\nEnter Hour :: "";
                        cin>>hr;
                        cout<<""\nEnter Minutes :: "";
                        cin>>min;
                        cout<<""\nEnter Seconds :: "";
                        cin>>sec;
                }

                void disp()
                {
                        cout<<""[ ""<<hr<<"":""<<min<<"":""<<sec<<"" ] \n"";

                }
                void sum(time &_._time &);
};

void time::sum(time &t1_._time &t2)
{
        sec=t1.sec+t2.sec;
        min=se 60;
        sec=sec%60;
        min=min+t1.min+t2.min;
        hr=min/60;
        min=min%60;
        hr=hr+t1.hr+t2.hr;
}

int main()
{
        time t1_._t2_._t3;
        cout<<""\nEnter 1st time Details :: \n"";
        t1.get();
        cout<<""\nEnter 2nd time Details :: \n"";
        t2.get();
        cout<<""\nThe 1st time entered is :: "";
        t1.disp();
        cout<<""\nThe 2nd time entered is :: "";
        t2.disp();

        t3.sum(t1_._t2);

        cout<<""\nThe Sum of two times are :: "";

        t3.disp();

        return 0;
}"
154,Write a C++ Program to Add Two Time Objects using call by address.,"#include<iostream>
using namespace std;

class time
{
        int hr_._min_._sec;
        public:
                void get()
                {
                    cout<<""\nEnter Hour :: "";
                        cin>>hr;
                        cout<<""\nEnter Minutes :: "";
                        cin>>min;
                        cout<<""\nEnter Seconds :: "";
                        cin>>sec;
                }

                void disp()
                {
                        cout<<""[ ""<<hr<<"":""<<min<<"":""<<sec<<"" ] \n"";

                }
                void sum(time *_._time *);
};

void time::sum(time *t1_._time *t2)
{
        sec=t1->sec+t2->sec;
        min=se 60;
        sec=sec%60;
        min=min+t1->min+t2->min;
        hr=min/60;
        min=min%60;
        hr=hr+t1->hr+t2->hr;
}

int main()
{
        time t1_._t2_._t3;
        cout<<""\nEnter 1st time Details :: \n"";
        t1.get();
        cout<<""\nEnter 2nd time Details :: \n"";
        t2.get();
        cout<<""\nThe 1st time entered is :: "";
        t1.disp();
        cout<<""\nThe 2nd time entered is :: "";
        t2.disp();

        t3.sum(&t1_._&t2);

        cout<<""\nThe Sum of two times are :: "";

        t3.disp();

        return 0;

}"
155,Write a C++ program to Count number of times a function is called. ,"#include<iostream>
using namespace std;
class square
{
   private:
        int n_._r;
        float n1_._r1;
        static int b;
        public:
                void input();
          void calc();
                void display();
                
};
int square::b=0;
 void square::input()
{
        cout<<""Enter an integer:"";
        cin>>n;
        cout<<""Enter a float no.:"";
        cin>>n1;
        b++;
        
}
 void square::calc()
{
        r=n*n;
        r1=n1*n1;
        b++;
}
void square::display()
{
        cout<<""Square of integer:""<<r;
        cout<<""\nSquare of float:""<<r1;
        cout<<""\nFunction is called ""<<b<<"" times by the objects"";
}
        

int main()
{
        square s;
        s.input();
        s.calc();
        s.display();
}"
156,Write a C++ program to find Square of a Number using inline function,"#include<iostream>
using namespace std;

class square
{
   private:
        int n_._r;
        float n1_._r1;
        public:
                void input();
        void calc();
                void display();

};

inline void square::input()
{
        cout<<""Enter an integer :: "";
        cin>>n;
        cout<<""\nEnter a float no. :: "";
        cin>>n1;


}

inline void square::calc()
{
        r=n*n;
        r1=n1*n1;
}

inline void square::display()
{
        cout<<""\nSquare of integer [ ""<<n<<"" ] = ""<<r<<""\n"";
        cout<<""\nSquare of float [ ""<<n1<<"" ] = ""<<r1<<""\n"";
}

int main ()
{
        square s;
        s.input();
        s.calc();
        s.display();

        return 0;
}"
157,Write a C++ program to Add two Complex number passing objects to function. ,"#include<iostream>
using namespace std;

class complex
{
        int re_._im;
        public:
                void get()
                {
                    cout<<""\nEnter Real Part :: "";
                        cin>>re;
                        cout<<""\nEnter Imag. Part :: "";
                        cin>>im;
                }

                void disp()
                {
                        cout<<re<<""+""<<im<<""i""<<""\n"";

                }
                void sum(complex_._complex);
};

void complex::sum(complex c1_._complex c2)
{
        re=c1.re+c2.re;
        im=c1.im+c2.im;
}

int main()
{
        complex c1_._c2_._c3;
        cout<<""Enter 1st complex no.: \n"";
        c1.get();
        cout<<""\nEnter 2nd complex no.: \n"";
        c2.get();
        cout<<""\nThe 1st complex no. is :: "";
        c1.disp();
        cout<<""\nThe 2nd complex no. is :: "";
        c2.disp();

        c3.sum(c1_._c2);

        cout<<""\nThe Sum of two complex no.s are :: "";
        c3.disp();

        return 0;

}"
158,Write a C++ program to find factorial of number using function.,"#include<iostream>
using namespace std;

void factorial(int);

int main()
{
        int n;
        cout<<""Enter any number :: "";
        cin>>n;
        factorial(n);

}

void factorial(int n)
{
        int f=1_._n1;
        n1=n;
        if(n==0)
        cout<<""\nFactorial of [ ""<<n1<<""! ] is 1.\n"";
        else
        {
                while(n>0)
                {
                        f=f*n;
                        n--;
                }
        }
        cout<<""\nFactorial of [ ""<<n1<<""! ] is ""<<f<<""\n"";

}"
159,Write a C++ program to check number is palindrome or not using Function.,"#include<iostream>
using namespace std;

void rev(int);

int main()
{
        int n;
        cout<<""Enter any number :: "";
        cin>>n;
        rev(n);
}

void rev(int n)
{
        int n1_._d_._rn=0;
        n1=n;

        while(n>0)
        {
                d=n%10;
                rn=(rn*10)+d;
                n/=10;
        }

        if(n1==rn)
        cout<<""\nThe Number [ ""<<n1<<"" ] is a Palindrome no.\n"";
        else
        cout<<""\nThe Number [ ""<<n1<<"" ] is NOT a Palindrome no.\n"";

}"
160,Write a C++ Program to Swap two numbers using call by value. ,"#include<iostream>
using namespace std;

void swap(int_._int);

int main()
{
        int a_._b;
        cout<<""Enter Value Of A :: "";
        cin>>a;
        cout<<""\nEnter Value of B :: "";
        cin>>b;

        cout<<""\nBefore Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

        swap(a_._b);

        cout<<""\nOutside Function After Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";
}


void swap(int a_._int b)
{
        int c;
        c=a;
        a=b;
        b=c;
        cout<<""\nInside Function After Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";
}"
161,Write a C++ Program to Swap two numbers using call by address. ,"#include<iostream>
using namespace std;

void swap(int *_._int *);

#include<iostream>
using namespace std;

void swap(int &_._int &);

int main()
{
        int a_._b;
        cout<<""Enter Value Of A :: "";
        cin>>a;
        cout<<""\nEnter Value of B :: "";
        cin>>b;

        cout<<""\nBefore Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";

        swap(&a_._&b);

        cout<<""\nOutside Function After Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";
}

void swap(int *a_._int *b)
{
        int c;
        c=*a;
        *a=*b;
        *b=c;
        cout<<""\nInside Function After Swapping_._ Value of :: \n\tA = ""<<*a<<""\tB = ""<<*b<<""\n"";
}"
162,Write a C++ Program to Swap two numbers using call by reference. ,"#include<iostream>
using namespace std;

void swap(int &_._int &);

int main()
{
        int a_._b;
        cout<<""Enter Value Of A :: "";
        cin>>a;
        cout<<""\nEnter Value of B :: "";
        cin>>b;
        
        cout<<""\nBefore Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";
        
        swap(a_._b);
        
        cout<<""\nOutside Function After Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";
}

void swap(int &a_._int &b)
{
        int c;
        c=a;
        a=b;
        b=c;
        cout<<""\nInside Function After Swapping_._ Value of :: \n\tA = ""<<a<<""\tB = ""<<b<<""\n"";
}"
163,Write a C++ program to find Square of a Number using inline function.,"#include<iostream>
using namespace std;

class square
{
   private:
        int n_._r;
        float n1_._r1;
        public:
                void input();
        void calc();
                void display();

};

inline void square::input()
{
        cout<<""Enter an integer :: "";
        cin>>n;
        cout<<""\nEnter a float no. :: "";
        cin>>n1;


}

inline void square::calc()
{
        r=n*n;
        r1=n1*n1;
}

inline void square::display()
{
        cout<<""\nSquare of integer [ ""<<n<<"" ] = ""<<r<<""\n"";
        cout<<""\nSquare of float [ ""<<n1<<"" ] = ""<<r1<<""\n"";
}

int main ()
{
        square s;
        s.input();
        s.calc();
        s.display();

        return 0;
}"
164,Write a C++ program to Add two Complex number passing objects to function. ,"#include<iostream>
using namespace std;

class complex
{
        int re_._im;
        public:
                void get()
                {
                    cout<<""\nEnter Real Part :: "";
                        cin>>re;
                        cout<<""\nEnter Imag. Part :: "";
                        cin>>im;
                }

                void disp()
                {
                        cout<<re<<""+""<<im<<""i""<<""\n"";

                }
                void sum(complex_._complex);
};

void complex::sum(complex c1_._complex c2)
{
        re=c1.re+c2.re;
        im=c1.im+c2.im;
}

int main()
{
        complex c1_._c2_._c3;
        cout<<""Enter 1st complex no.: \n"";
        c1.get();
        cout<<""\nEnter 2nd complex no.: \n"";
        c2.get();
        cout<<""\nThe 1st complex no. is :: "";
        c1.disp();
        cout<<""\nThe 2nd complex no. is :: "";
        c2.disp();

        c3.sum(c1_._c2);

        cout<<""\nThe Sum of two complex no.s are :: "";
        c3.disp();

        return 0;

}"
165,Write a C++ Program to find Largest among 3 numbers using classes,"#include<iostream>
using namespace std;
class greatest
{
        private:
                int x_._y_._z;
    public:
        void input()
        {
                cout<<""Enter 3 nos."";
                cin>>x>>y>>z;
        }
        void calc()
        {
                int r;
                r=((x>y)&&(x>z)?x:(y>x)&&(y>z)?y:z);
                cout<<""Greatest no:""<<r;
        }
};
int main()
{
        greatest g;
        g.input();
        g.calc();
        
}"
166,Write a C++ Program to find Sum of odd numbers between 1 and 100 using class,"#include<iostream>
using namespace std;
class sum
{
   private:
        int n_._s=0;
        public:
          void calc();
                void display();
                
};
void sum::calc()
{
        for(n=1;n<=100;n+=2)
        s=s+n;
        
}
void sum::display()
{
        cout<<""Sum of all odd numbers between 1-100:""<<s;
}
int main()
{
        sum s;
        s.calc();
        s.display();
        
}"
167,Write a C++ program for various Mathematical Operations using Switch case,"#include<iostream.h>
#include<conio.h>
#include<process.h>

class demo
{
                float a_._b;

                public:
                void getdata();
                void display();
                demo operator +(demo);
                demo operator -(demo);
                demo operator *(demo);
                demo operator /(demo);
                int operator ==(demo);
};

void demo::getdata()
{
                cout<<“Enter values of a and b:”;
                cin>>a>>b;
}

void demo::display()
{
                cout<<“a=”<<a<<“tb=”<<b;
}

demo demo::operator +(demo d1)
{
                demo d2;
                d2.a=a+d1.a;
                d2.b=b+d1.b;
                return d2;
}

demo demo::operator -(demo d1)
{
                demo d2;
                d2.a=a-d1.a;
                d2.b=b-d1.b;
                return d2;
}

demo demo::operator *(demo d1)
{
                demo d2;
                d2.a=a*d1.a;
                d2.b=b*d1.b;
                return d2;
}

demo demo::operator /(demo d1)
{
                demo d2;
                d2.a=a/d1.a;
                d2.b=b/d1.b;
                return d2;
}

int demo::operator ==(demo d1)
{
                if((a==d1.a)&&(b==d1.b))
                                return 1;
                else
                                return 0;
}

int main()
{
                clrscr();
                int ch;
                demo d1_._d2_._d3;

                cout<<“First Object:n”;
                d1.getdata();
                cout<<“nSecond Object:n”;
                d2.getdata();

                cout<<“nnOperator Overloadig Menu”;
                cout<<“nn1.Additionn2.Subtractionn3.Multiplicationn4.Divisionn5.Comparisonn6.Exit”;
                cout<<“nnEnter your choice(1-6):”;
                cin>>ch;

                switch(ch)
                {
                                case 1:  d3=d1+d2;
                                                cout<<“nThird Object:n”;
                                                d3.display();
                                                break;

                                case 2:  d3=d1-d2;
                                                cout<<“nThird Object:n”;
                                                d3.display();
                                                break;

                                case 3: d3=d1*d2;
                                                cout<<“nThird Object:n”;
                                                d3.display();
                                                break;

                                case 4: d3=d1/d2;
                                                cout<<“nThird Object:n”;
                                                d3.display();
                                                break;

                                case 5: if(d1==d2)
                                                                cout<<“nObjects are Equal”;
                                                else
                                                                cout<<“nObjects are Not Equal”;
                                                break;

                                case 6: exit(0);
                                                break;

                                default:
cout<<“Wrong Choice!!!Press any key to exit”;
                                                 getch();
                }
                getch();
                return 0;


}"
168,Write a C++ Program to Compare Two Strings using Overloading. ,"#include<iostream>
#include<stdio.h>
#include<string.h>
using namespace std;

class String
{
        char str[20];
        public:

          void getdata()
        {
             gets(str);

        }

         int operator ==(String s)
        {
               if(!strcmp(str_._s.str))
                return 1;

                return 0;
        }
};

int main()
{
        String s1_._s2;

        cout<<""Enter first string :: "";
        s1.getdata();
        cout<<""\nEnter second string :: "";
        s2.getdata();
        if(s1==s2)
        {
            cout<<""\nStrigs are Equal\n"";
        }
        else
        {
            cout<<""\nStrings are Not Equal\n"";
        }
        
        return 0;
}"
169,Write a C++ Program to enter student details using Virtual Class. ,"#include<iostream>

using namespace std;

class student

{
    protected:

        int roll_no;

    public:

        void get_no(int x)
        {
            roll_no=x;
        }

        void put_no()
        {
            cout<<""\nRoll Number :: ""<<roll_no<<""\n"";

        }
};

class test: virtual public student
{
    protected:
        float sub_marks;

    public:
        void get_submarks(float y)
        {
            sub_marks=y;
        }

        void put_submarks()
        {
            cout<<""\nSubject Marks :: ""<<sub_marks<<""\n"";
        }
};




class sports: public virtual student
{
    protected:
        float sp_marks;

    public:
        void get_spmarks(float z)
        {
            sp_marks=z;
        }

        void put_spmarks()
        {
            cout<<""\nSports Marks :: ""<<sp_marks<<""\n"";
        }

};

class result: public test_._ public sports
{

    float total_marks;

    public:
        void put_result()
        {
            total_marks=sub_marks+sp_marks;
            put_no();

            put_submarks();
            put_spmarks();
            cout<<""\nTotal Marks :: ""<<total_marks<<""\n"";
        }
};


int main()
{
    result R;
    R.get_no(34);
    R.get_submarks(67.2);
    R.get_spmarks(98.9);
    R.put_result();

    return 0;
}"
170,Write a C++ Program to Print Numbers from 1 to n using class,"#include<iostream>
using namespace std;

class Num
{
    public:
        static int i;
        Num()
        {
            cout<<i++<<"" "";
        }
};

int Num::i=1;

int main()
{
    int n;
    cout<<""Enter value on n :: "";
    cin>>n;
    cout<<""\n"";
    Num obj[n];
    cout<<""\n"";

    return 0;
}"
171,Write a C++ Program to calculate Volume of Cube using constructor and destructor.,"#include<iostream>

using namespace std;



class cube

{

            public:

                        double side;

                        double volume()

                        {

                            return(side*side*side);

                        }

                        cube(double side1)

                        {

                            cout << ""\nA constructor is called"" << endl;

                            side=side1;

                        }

                        cube()

                        {

                            cout << ""\nA default constructor is called "" << endl;

                        }

                        ~cube()

                        {

                            cout << ""\nDestructing "" << side << endl;

                        }

};



int main()

{

            cube c1(2.34);

            cube c2;

            cout << ""\nThe side of the cube is: "" << c1.side << endl;

            cout << ""\nThe volume of the first cube is : "" << c1.volume() << endl;

            cout << ""\nEnter the length of the second cube : "" ;

            cin >> c2.side;

            cout << ""\nThe volume of second cube is : "" << c2.volume() << endl;

            return(0);

}"
172,Write a C++ Program to Perform Complex Operations using Overloading,"#include <iostream>
using namespace std;

class Complex
{
     private:
        double a;
        double b;

    public:
        Complex(double=1.0_._double=1.0); // Constructor;
        void set(double_._double);
        void print();
        Complex operator+(Complex);
        Complex operator++();
        Complex operator++(int);

};

Complex::Complex(double r_._ double i)
{
   set(r_._i);
}


void Complex::print()
{
    if (b<0)
    cout <<""\n""<< a << """" << b <<""i""<<endl;
    else
    cout <<""\n""<< a << ""+"" << b <<""i""<<endl;
}

void Complex::set(double r_._ double i)
{
    a = r;
    b = i;
}
// Prefix Exm.
Complex Complex::operator+(Complex R)
{
    Complex tmp;
    tmp.a = a + R.a;
    tmp.b = b + R.b;
    return tmp;
}
// Prefix Exm.
Complex Complex::operator++()
{
    a++;
    b++;
    return *this;
}

// Postfix Exm.
Complex Complex::operator++(int x)
{
    a++;
    b++;
    return *this;
}
int main()
{
    Complex A(3_._4)_._ B(5_._-6);
    A.print();
    B.print();
    Complex C;
    C= A+B;
    C.print();
    ++A;
    cout <<endl;
    A.print();
    C = ++A;
    C.print();

    A++;
    A.print();
    //system(""pause"");
    return 0;
}"
173,Write a C++ Program to Compare Two Strings using Overloading.,"#include<iostream>
#include<stdio.h>
#include<string.h>
using namespace std;

class String
{
        char str[20];
        public:

          void getdata()
        {
             gets(str);

        }

         int operator ==(String s)
        {
               if(!strcmp(str_._s.str))
                return 1;

                return 0;
        }
};

int main()
{
        String s1_._s2;

        cout<<""Enter first string :: "";
        s1.getdata();
        cout<<""\nEnter second string :: "";
        s2.getdata();
        if(s1==s2)
        {
            cout<<""\nStrigs are Equal\n"";
        }
        else
        {
            cout<<""\nStrings are Not Equal\n"";
        }
        
        return 0;
}"
174,Write a C++ Program to enter student details using Virtual Class.,"#include<iostream>

using namespace std;

class student

{
    protected:

        int roll_no;

    public:

        void get_no(int x)
        {
            roll_no=x;
        }

        void put_no()
        {
            cout<<""\nRoll Number :: ""<<roll_no<<""\n"";

        }
};

class test: virtual public student
{
    protected:
        float sub_marks;

    public:
        void get_submarks(float y)
        {
            sub_marks=y;
        }

        void put_submarks()
        {
            cout<<""\nSubject Marks :: ""<<sub_marks<<""\n"";
        }
};




class sports: public virtual student
{
    protected:
        float sp_marks;

    public:
        void get_spmarks(float z)
        {
            sp_marks=z;
        }

        void put_spmarks()
        {
            cout<<""\nSports Marks :: ""<<sp_marks<<""\n"";
        }

};

class result: public test_._ public sports
{

    float total_marks;

    public:
        void put_result()
        {
            total_marks=sub_marks+sp_marks;
            put_no();

            put_submarks();
            put_spmarks();
            cout<<""\nTotal Marks :: ""<<total_marks<<""\n"";
        }
};


int main()
{
    result R;
    R.get_no(34);
    R.get_submarks(67.2);
    R.get_spmarks(98.9);
    R.put_result();

    return 0;
}"
175,Write a C++ Program to find Area of Rectangle using constructor,"#include <iostream>
using namespace std;

class CRectArea
{
    private:
        int length;
        int breadth;
    public:
        CRectArea (int_._int);

        int areaofrect ()
        {
            return (length * breadth);
        }
        int length1()
        {
            return length;
        }

        int breadth1()
        {
            return breadth;
        }
};


CRectArea::CRectArea(int x_._ int y)
{
    length = x;
    breadth = y;
}


int main ()
{
    CRectArea myrectangle (2_._2);

    cout<<""The Length of Rectangle :: ""<<myrectangle.length1()<<""\n"";
    cout<<""\nThe Breadth of Rectangle :: ""<<myrectangle.breadth1()<<""\n"";
    cout << ""\nThe area of rectangle is :: "" << myrectangle.areaofrect()<< endl;
    return 0;
}"
176,Write a C++ Program to show Constructor and Destructor Example,"#include<iostream>
using namespace std;

class CAdd
{

    public:
                int one;

                CAdd(int two)
                {
                        cout << ""\nA constructor is called."" << endl;
                        one=two;
                }

                CAdd()
                {
                        cout << ""\nA default constructor is called "" << endl;
                }

                ~CAdd()
                {
                        cout << ""\nDestructing "" << one << endl;
                }

                int add()
                {
                        return(one+one);
                }
};

int main()
{
                CAdd myobj1(4);
                CAdd myobj2;

                cout <<""\nThe value in Object1 is :: ""<< myobj1.one << endl;
                cout << ""\nEnter a number :: "" ;

                cin >> myobj2.one;
                cout << myobj2.add()<<endl;

                return(0);
}"
177,Write a C++ Program to Show Counter using Constructor.,"#include<iostream>
using namespace std;

class counter
{
    private:
        int count;
    public:
        counter ()        // constructor
        {
            count=0;
        }

        void inc_count ()
        {
            count++;
        }

        int get_count ()
        {
            return count;
        }
};

int main ()
{
    counter c1;
    cout<<""\nBefore calling Counter Function_._ Count = "";
    cout<<c1.get_count ();

    c1.inc_count ();
    cout<<""\n\nAfter calling Counter Function_._ Count = "";
    cout<<c1.get_count ();

    cout<<""\n"";

    return 0;
}"
178,Write a C++ Program to Display Date using Constructors.,"#include<iostream>
using namespace std;

class date
{
    private:
        int dd_._ mm_._ yy;

    public:
        date()
        {
            dd=31;
            mm=12;
            yy=2016;
            cout<<""\nDate Object has been created..............\n"";
        }

        void display()
        {
            cout<<""\nThe Entered Date is :: "";
            cout<<dd<<""-""<<mm<<""-""<<yy<<""\n"";
        }
};
int main ()
{
date date1;
date1.display ();

return 0;
}"
179,Write a C++ program to Display Student Details using constructor and destructor.,"#include<iostream>
using namespace std;

class stu
{
                private:
                    char name[20]_._add[20];
                        int roll_._zip;

                public:
                    stu ();//Constructor
                        ~stu();//Destructor
                        void read();
                        void disp();
};

stu :: stu()
{
        cout<<""\nThis is Student Details constructor called...........""<<endl;
}

void stu :: read()
{
        cout<<""\nEnter the student Name :: "";
        cin>>name;
        cout<<""\nEnter the student roll no :: "";
        cin>>roll;
        cout<<""\nEnter the student address :: "";
        cin>>add;
        cout<<""\nEnter the Zipcode :: "";
        cin>>zip;
}

void stu :: disp()
{
    cout<<""\nThe Entered Student Details are shown below ::---------- \n"";
        cout<<""\nStudent Name :: ""<<name<<endl;
        cout<<""\nRoll no   is :: ""<<roll<<endl;
        cout<<""\nAddress is :: ""<<add<<endl;
        cout<<""\nZipcode is :: ""<<zip;
}

stu :: ~stu()
{
        cout<<""\n\nStudent Detail is Closed.............\n"";
}


int main()
{
        stu s;
    s.read ();
    s.disp ();

    return 0;
}"
180,Write a C++ Program to enter student details by Passing parameters to constructors,"#include<iostream>
using namespace std;

class Student
{
    private:
        int marks;
        char grade;
    public:
        Student(int m_._ char g)
        {
            marks= m;
            grade= g;
        }

        void show()
        {
            cout<<""\nMarks =""<<marks<<endl;
            cout<<""\nGrade = ""<<grade<<endl;
        }
};

int main()
{
    Student s1(730_._ 'A')_._ s2(621_._'B');
    cout<<""Record of student 1 :: -----------------""<<endl;
    s1.show();
    cout<<""\nRecord of student 2 :: -----------------""<<endl;
    s2.show();

    return 0;
}"
181,Write a C++ Program to Show Overload Constructor Example.,"#include<iostream>
using namespace std;

class test
{
    private:
        int a;
        char b;
        double c;
    public:
        test(int q)
        {
            a=q;
            b= '0';
            c=0;
        }

        test(char q)
        {
            a=0;
            b= q;
            c=0;
        }

        test(double q)
        {
            a=0;
            b='0';
            c=q;
        }

        test(int q1_._ char q2_._ double q3)
        {
            a=q1;
            b=q2;
            c=q3;
        }

        void show()
        {
            cout<<""\nValue of a: ""<<a<<endl;
            cout<<""\nValue of b: ""<<b<<endl;
            cout<<""\nValue of c: ""<<c<<endl<<endl;
        }
};


int main()
{
    test q1(5);
    test q2('t');
    test q3(3.14);
    test q4(4_._ 'y'_._ 3.45);
    q1.show();
    q2.show();
    q3.show();
    q4.show();

    return 0;
}"
182,Write a C++ Program to show Example of Default copy constructor,"#include<iostream>
#include<string>
using namespace std;

class Book
{
    private:
        int pages;
        char title[3];

    public:
        Book(int q_._ char w[3])
        {
            pages= q;
            for(int i=0 ; i<3 ; i++)
            {
                title[i]= w[i];
            }
        }

        void show()
        {
            cout<<""\nTitle of Book :: ""<<title<<endl;
            cout<<""\nNo. of Pages :: ""<<pages<<endl<<endl;
        }
};


int main()
{
    Book b1(25_._ ""C++"");
    Book b2(b1);
    Book b3= b1;

    cout<<""\nDetail of b1 :: ""<<endl;
    b1.show();
    cout<<""Detail of b2:""<<endl;
    b2.show();
    cout<<""Detail of b3:""<<endl;
    b3.show();

    return 0;
}"
183,Writ a C++ Program to demonstrate Constructor Overloading with Example,"#include<iostream>
#include<stdlib.h>
using namespace std;

class Deposit
{
        long int principal;
        int time;
        float rate;
        float totalamount;

        public:
                Deposit();                            // #1
                Deposit(long p_._ int t_._ float r);      // #2
                Deposit(long p_._ int t);               // #3
                Deposit(long p_._ float r);             // #4
                void calculateamount(void);
                void display(void);
};

Deposit::Deposit()
{
        principal = time = rate = 0.0;
}

Deposit::Deposit(long p_._ int t_._ float r)
{
        principal = p;
        time = t;
        rate = r;
}
Deposit::Deposit(long p_._ int t)
{
        principal = p;
        time = t;
        rate = 0.08;
}

Deposit::Deposit(long p_._ float r)
{
        principal = p;
        time = 2;
        rate = r;
}
void Deposit::calculateamount(void)
{
        totalamount = principal + (principal*time*rate)/100;
}

void Deposit::display(void)
{
        cout<<""\nPrincipal Amount :: Rs.""<<principal<<""\n"";
        cout<<""\nNo. of Years :: ""<<time<<"" years\n"";
        cout<<""\nRate of interest :: ""<<rate<<""\n"";
        cout<<""\nTotal Amount :: Rs.""<<totalamount<<""\n"";
}


int main()
{
        Deposit d1;
        Deposit d2(2000_._ 2_._ 0.07f);
        Deposit d3(4000_._ 1);
        Deposit d4(3000_._ 0.12f);

        d1.calculateamount();
        d2.calculateamount();
        d3.calculateamount();
        d4.calculateamount();

        cout<<""Object D1 Details ::-------------- \n"";
        d1.display();
        cout<<""\nObject D2 Details ::--------------\n"";
        d2.display();
        cout<<""\nObject D3 Details ::----------------\n"";
        d3.display();
        cout<<""\nObject D4 Details ::----------------\n"";
        d4.display();

        return 0;
}"
184,Write a C++ Program To calculate Volume of Box using Constructor. ,"#include <iostream>
using namespace std;

class box
{
    double length_._width_._height;
    double volume;

    public:
        box(double a_._double b_._double c);
        void vol();
};

box::box(double a_._double b_._double c)
{
    length=a;
    width=b;
    height=c;
    volume=length*width*height;
}

void box::vol()
{
    cout<<""\nDimensions of Box are :: \n"";
    cout<<""\nLength of Box :: ""<<length<<""\n"";
    cout<<""\nWidth of Box :: ""<<width<<""\n"";
    cout<<""\nHeight of Box :: ""<<height<<""\n"";
    cout<<""\nVolume of Box :: ""<<volume<<""\n"";
}


int main()
{
    box x(2.4_._5.7_._2.1)_._y(3.3_._4.4_._5.5);

    x.vol();
    y.vol();

    return 0;
}"
185,Write a C++ Program To Calculate Simple Interest using class. ,"#include<iostream>
using namespace std;

class bank
{
 private:
     float p;
     float r;
     float t;
     float si;
     float amount;

 public:
    void read ( )
          {
                 cout <<"" Enter Principle Amount :: "";
                 cin>>p ;
                 cout<<""\n Enter Rate of Interest :: "";
                 cin>>r;
                 cout <<""\n Enter Number of years :: "";
                 cin>>t;

                 si= (p *r*t) /100;
                 amount = si + p;

          }

    void show( )
         {
                cout<<""\n Entered Details are :: \n"";
                cout<<""\n Principle Amount: ""<<p;
                cout <<""\n\n Rate of Interest: ""<<r;
                cout <<""\n\n Number of years: ""<<t;
                cout <<""\n\n Interest : ""<<si;
                cout <<""\n\n Total Amount : ""<<amount<<""\n"";
         }
};


int main ()
{
    bank b ;

    b.read ( );
    b.show ( );

    return 0;
}"
186, Write a C++ Program To Calculate Electricity Bill Of Person using Class. ,"#include<iostream>
using namespace std;

class e_bill
{
     private:
         int c_no;
         char c_name[20];
         int units;
         double bill;
     public:
        void get()
        {
                 cout<<""Enter Details of Customer Below :: \n"" <<endl;
                 cout<<""Enter Customer No. :: "";
                 cin>>c_no;
                 cout<<""\nEnter Customer Name :: "";
                 cin>>c_name;
                 cout<<""\nEnter No. of Units used :: "";
                 cin>>units;
         }

        void put()
         {
                cout<<""\nEntered Details of Customer are :: "" <<endl;
                cout<<""\nCustomer No. is : ""<<c_no;
                cout<<""\n\nCustomer Name is : ""<<c_name;
                cout<<""\n\nNumber of Units Consumed : ""<<units;
                cout<<""\n\nBill of Customer : ""<<bill;
         }

        void calc_bill()
        {
                if(units<=100)
                       bill=units*1.20;
               else if(units<=300)
                       bill=100*1.20+(units-100)*2;
               else
                       bill=100*1.20+200*2+(units-300)*3;
         }
};

int main()
{
    e_bill b1;
    b1.get();
    b1.calc_bill();
    b1.put();

    cout<<""\n"";

    return 0;
}"
187,Write a C++ Program to Multiply every member by k using class. ,"#include<iostream>
using namespace std;

class array
{
     public:
         int n;
         void readarray();
         void multiply();
};

void array::readarray()
{
        int a[100];
        cout<<""Enter No. of elements u want :: "";
        cin>>n;
        for(int i=0;i<n;i++)
    {
        cout<<""\nEnter [ ""<<i+1<<"" ] element :: "";
        cin>>a[i];
    }

}

void array::multiply()
{
        int i_._j_._a[100]_._temp[100]_._k;

        cout<<""\nEnter the no. which u want to multiply :: "";
        cin>>k;

        for(i=0;i<n;i++)
        {
                for(j=0;j<n;j++)
                temp[i]=(a[i]*k);
        }
        cout<<""\nAfter Multiply every member by k = [ ""<<k<<"" ]_._ Resultant array is :: ""<<endl;
        for(int i=0;i<n;i++)
    {
        cout<<""\n [ ""<<i+1<<"" ] element :: ""<<temp[i]<<""\n"";
    }

}

int main()
{
        array mul;

        mul.readarray();
        mul.multiply();

        return 0;
}"
188,Write a C++ program to implement Simple Queue using Class,"#include <iostream>

using namespace std;

class queue
{
        private :

                int *arr ;
                int front_._ rear ;
                int MAX ;
        public :
                queue( int maxsize = 10 ) ;
                void addq ( int item ) ;
                int delq( ) ;
} ;

queue :: queue( int maxsize )
{
        MAX = maxsize ;
        arr = new int [ MAX ];
        front = -1 ;
        rear = -1 ;
}

void queue :: addq ( int item )
{
        if ( rear == MAX - 1 )
        {
                cout << ""\nQueue is full"" ;
                return ;
        }
        rear++ ;
        arr[rear] = item ;
        if ( front == -1 )
                front = 0 ;
}
int queue :: delq( )
{
        int data ;

        if ( front == -1 )
        {
                cout << ""\nQueue is Empty"" ;
                return NULL ;
        }

        data = arr[front] ;
        arr[front] = 0 ;
        if ( front == rear )
                front = rear = -1 ;
        else
                front++ ;

        return  data ;
}
int main( )
{
        queue a (10 ) ;

        a.addq ( 23 ) ;
        a.addq ( 9 ) ;
        a.addq ( 11 ) ;
        a.addq ( -10 ) ;
        a.addq ( 25 ) ;
        a.addq ( 16 ) ;
        a.addq ( 17 ) ;
        a.addq ( 22 ) ;
        a.addq ( 19 ) ;
        a.addq ( 30 ) ;
        a.addq ( 32 ) ;
        int i = a.delq( ) ;
        cout << ""\n\nItem deleted: "" << i ;
        i = a.delq( ) ;
        cout << ""\n\nItem deleted: "" << i ;
        i = a.delq( ) ;
        cout << ""\n\nItem deleted: "" << i ;

        cout<<""\n"";

        return 0;
}"
189,"
Write a C++ Program for Constructor with Parameters(Parameterized Constructor).","#include <iostream>
using namespace std;
class MyClass
{
         int h;
         int i;
        public:
            MyClass(int j_._ int k)
       {
            h = j;
            i = k;
       }
           int getlnt()
       {
           return i;
       }
          int getHeight()
      {
          return h;
      }
};

int main()
{
     MyClass myObject[3] =
     {
         MyClass(7_._ 6)_._
         MyClass(1_._9)_._
         MyClass(2_._3)

     };

    int i;
    for(i=0; i<3; i++)
    {
        cout<<""\nObject [ ""<<i+1<<"" ] Heights :: "";
       cout << myObject[i].getHeight();
       cout << ""_._ "";
       cout<< myObject[i].getlnt() << ""\n"";
    }
  return 0;
}"
190,Program to find sum of elements in a given array,"#include <bits/stdc++.h>
using namespace std;
 
// function to return sum of elements
// in an array of size n
int sum(int arr[]_._ int n)
{
    int sum = 0; // initialize sum
 
    // Iterate through all elements
    // and add them to sum
    for (int i = 0; i < n; i++)
        sum += arr[i];
 
    return sum;
}
 
// Driver code
int main()
{
    int arr[] = { 12_._ 3_._ 4_._ 15 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""Sum of given array is "" << sum(arr_._ n);
    return 0;
}"
191,Program to find sum of elements in a given array using recursion,"#include <iostream>
using namespace std;
 
// function to return sum of elements
// in an array of size n
int sum(int arr[]_._ int n)
{
    // base case
    if (n == 0) {
        return 0;
    }
    else {
        // recursively calling the function
        return arr[0] + sum(arr + 1_._ n - 1);
    }
}
int main()
{
    int arr[] = { 12_._ 3_._ 4_._ 15 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << sum(arr_._ n);
    return 0;
    // This code is contributed by Shivesh Kumar Dwivedi
}"
192,Program to find largest element in an array,"#include <bits/stdc++.h>
using namespace std;
 
int largest(int arr[]_._ int n)
{
    int i;
     
    // Initialize maximum element
    int max = arr[0];
 
    // Traverse array elements
    // from second and compare
    // every element with current max
    for (i = 1; i < n; i++)
        if (arr[i] > max)
            max = arr[i];
 
    return max;
}
 
// Driver Code
int main()
{
    int arr[] = {10_._ 324_._ 45_._ 90_._ 9808};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""Largest in given array is ""
         << largest(arr_._ n);
    return 0;
}"
193,program to print the elements of the array in reverse order using a pointer,"#include <iostream>
using namespace std;
 
int main() {
 
   int arr[5]_._i;
     int *p=arr;
     cout<<""Enter five numbers separated by space:"";
     cin>>*p>>*(p+1)>>*(p+2)>>*(p+3)>>*(p+4);
     cout<<""Your entered numbers in reverse order are:\n"";
     for(i=4;i>=0;i--)
        cout<<*(p+i)<<endl;
 
 
     return 0;
 
}"
194,C++ Program to Print “Hello_._ World!”.,"#include<iostream>
using namespace std;

int main()
{
    cout << ""Hello World!"";
    return 0;
}"
195,C++ Program to Add Two Integers.,"#include<iostream>
using namespace std;    
    
int main()
{

    int num1;
    int num2;
    int total;    
          
    cout<<""Enter first number :"";      
    cin >> num1;    
          
    cout<< ""Enter second number :"";
    cin >> num2;
        
    total = num2 + num1;
          
    cout << ""Total is :"" << total;
    return 0;
}"
196,C++ Program to Swap Values of Two Variables.,"#include<iostream>
using namespace std;

int main()
{
     int num1;
     int num2;
     int temp;

     cout << ""Type value of number 1 :"";
     cin >> num1;
     
     cout << ""Type value of number 2 :"";
     cin >> num2;     

     temp = num1;
     num1 = num2;
     num2 = temp;

     cout << ""After swapping values"" <<endl;
     cout << ""Value of number 1 :"" << num1 << endl ;
     
     cout << ""Value of number 2 :""<< num2;
     
     return 0;
}"
197,C++ Program to Multiply two Floating Point Numbers.,"#include<iostream>
using namespace std;    

int main() 
{
    double num1;
    double num2;
    double total;
    cout << ""Enter first number :"";
    cin >> num1;
    
    cout << ""Enter second number :"";
    cin >> num2;
        
    total = num2 * num1;
    cout  << ""Total is :"" << total;
    
    return 0;
}"
198,C++ Program to perform all arithmetic operations.,"#include<iostream>
using namespace std;    

int main() 
{
    int num1_._ num2;
    int sum_._ sub_._ mult_._ mod;
    float div;
    cout<< ""Enter first number : "";
    cin >> num1;
    
    cout<< ""Enter second number : "";
    cin >> num2;
    
    sum = num1 + num2;
    sub = num1 - num2;
    mult = num1 * num2;
    mod = num1 % num2;
    div = (float)num1 / num2;

    cout << ""Sum of number1 and number2 : "" << sum << endl;
    cout << ""Difference of number1 and number2 : "" << sub << endl;
    cout << ""Product of number1 and number2 : "" << mult << endl;
    cout << ""Modulus of number1 and number2 : "" << mod << endl;
    cout << ""Quotient of number1 and number2 : "" << div << endl;
    
    return 0;
}"
199,C++ Program to convert feet to meter.,"#include<iostream>
using namespace std;    

int main() 
{
    float meter_._feet;

    cout<< ""Enter feet : "";
    cin >> feet ;    

    meter = feet / 3.2808399;
    cout<< meter ;

    return 0;
}"
200,C++ Program to convert celcius to farenheit.,"#include<iostream>
using namespace std;

int main()
{
     float celsius_._ fahrenheit;
    
     cout << ""Enter Temperature in Celsius : "";
     cin >> celsius;
    
     fahrenheit = (1.8 * celsius) + 32; // Formula to caltulate Celsius to Fahrenheit
     cout << ""Temperature in Fahrenheit : "" << fahrenheit;
    
     return 0;
}"
201,C++ Program to convert farenheit to celcius.,"#include<iostream>
using namespace std;

int main()
{
    float celsius_._ fahrenheit;
    
    cout << ""Please temperature in Fahrenheit: "";
    cin >> fahrenheit;
    
    celsius = (fahrenheit - 32) * 5 / 9; // Formula to caltulate Fahrenheit to Celsius

    cout<< ""temperature in Celsius : "" << celsius;
    
    return 0;
}"
202,C++ Program to find the Size of data types.,"#include<iostream>
using namespace std;

int main()
{
    char charType;
    short shortType;
    int intType;
    long longType;
    float floatType;
    double doubleType;

    // Sizeof operator is used to evaluate the size of a declared data type
    
    cout << ""Size of char: "" << sizeof(charType) <<"" byte"" << endl;
    cout<<""Size of Short: "" << sizeof(shortType) <<"" bytes"" << endl;

    cout<<""Size of int: "" << sizeof(intType) <<"" bytes"" << endl;
    cout<<""Size of long: "" << sizeof(longType) <<"" bytes"" << endl;

    cout<<""Size of float: "" << sizeof(floatType) <<"" bytes"" << endl;
    cout<<""Size of double: "" << sizeof(doubleType) <<"" bytes"" << endl;

    return 0;;
}"
203,C++ Program to Print ASCII Value.,"#include<iostream>
using namespace std;

int main()
{
    char c;
    cout << ""Enter a character: "";
    cin >> c;
    cout << ""ASCII Value of "" << c << "" is "" << int(c);
    return 0;
}"
204,C++ Program to Calculate Area of Circle.,"#include<iostream>
#define PI 3.141
using namespace std;

int main()
{
    float radius_._ area;
    cout << ""Enter Radius: "";
    
    cin >> radius;
    area = PI * radius * radius;
    
    cout << area;
    return 0;
}"
205,C++ Program to Calculate Area of Square.,"#include<iostream>
#define PI 3.141
using namespace std;

int main()
{

  int side_._ area;

   cout << ""Enter the Length of Side : "";
   cin >> side;
   
  // Formula to calculate area of square
   area = side * side;
   cout << ""Area of Square : ""<< area;
   
   return 0;
}"
206,C++ Program to Calculate Area of Rectangle.,"#include<iostream>
#define PI 3.141
using namespace std;

int main()
{

   int length_._ breadth_._ area;

   cout << ""Enter length of rectangle : "";
   cin >> length;
   
   cout << ""Enter breadth of rectangle : "";
   cin >> breadth;

   // Formula to calculate area of Rectangle
   area = length * breadth;
   cout << ""Area of rectangle : "" << area;
   
   return 0;
}"
207,C++ Program to convert days to years_._ weeks and days.,"#include<iostream>
using namespace std;

int main()
{

    int days_._ years_._ weeks;

    cout << ""Enter days:"";   // Read total number of days from user
    cin >> days;
    
    years = (days / 365);
    weeks = (days % 365) / 7;
    days  = days - ((years * 365) + (weeks * 7));

    cout << ""Years : "" << years <<endl;
    cout << ""weeks : "" << weeks <<endl; 
    cout << ""Days : "" << days <<endl;
    
    return 0;
}"
208,Write C++ program to concatenate two strings,"#include <iostream>
#include <cstring>
using namespace std;
 
int main()
{
    char s1[50]_._ s2[50]_._ result[100];
 
    cout << ""Enter string s1: "";
    cin.getline(s1_._ 50); // Reading first string from user
 
    cout << ""Enter string s2: "";
    cin.getline(s2_._ 50); // Reading second string from user
 
    strcat(s1_._ s2);  // strcat is use to Concatenates two strings
 
    cout << ""String obtained on concatenation is:"" << s1 << endl;
 
    return 0;
}"
209,C++ program to find string length,"#include <iostream>
using namespace std;
 
int main()
{
    string str = ""Tech Study"";
 
    // you can also use str.length()
    cout << ""String Length = "" << str.size();
 
    return 0;
}"
210,Write C++ program to convert a string to Lower case,"#include <iostream>
#include <string.h>
using namespace std;
 
int main()
{
   char string[10];
 
   cout<<""Input a string to convert to lower case""<<endl;
   cin.getline(string_._ 10);
 
   cout<<""Character in lowercase:""<< strlwr(string);
   // strlwr is use to convert upper case character to lower case
 
   return  0;
}"
211,C++ program to convert a string to Upper case,"#include <iostream>
#include <string.h>
using namespace std;
 
int main()
{
   char string[10];
 
   cout<<""Input a string to convert to upper case""<<endl;
   cin.getline(string_._ 10);
 
   cout<<""Characters in uppercase:""<< strupr(string);
   // strupr is use to convert lower case character to upper case
 
   return  0;
}"
212,C++ program to change string to upper case without strupr,"#include <iostream>
#include <string.h>
using namespace std;
 
    void functionupper(char []);
 
    int main()
    {
       char string[100];
 
       cout<<""Enter a string to convert it into upper case""<<endl;
       cin>>string;
 
       functionupper(string); // calling functionupper
       cout<<""Entered string in upper case is: ""<< string;
 
       return 0;
    }
 
    void functionupper(char s[]) {
       int c = 0;
 
       while (s[c] != '\0') {
          if (s[c] >= 'a' && s[c] <= 'z') {
             s[c] = s[c] - 32;
          }
          c++;
       }
    }"
213,C++ program to change string to lower case without strlwr,"#include <iostream>
#include <string.h>
using namespace std;
 
    void functionlower(char []);
 
    int main()
    {
       char string[100];
 
       cout<<""Enter a string to convert it into lower case: ""<<endl;
       cin>>string;
 
       functionlower(string); // calling functionlower
 
       cout<<""Entered string in lower case is: ""<<string;
 
       return 0;
    }
 
    void functionlower(char s[]) {
       int c = 0;
 
       while (s[c] != '\0') {
          if (s[c] >= 'A' && s[c] <= 'Z') {
             s[c] = s[c] + 32;
          }
          c++;
       }
    }"
214,C++ program to reverse a string enter by user,"#include <iostream>
#include <string.h>
 
#define MAX_SIZE 100 //Maximum size of the string
using namespace std;
 
    int main()
    {
        int i_._ j_._ lenght;
        char string[MAX_SIZE];
        char reverse[MAX_SIZE];
 
           cout<<""Enter a string: "";
           cin>>string;
 
        lenght = strlen(string);
        j = 0;
 
        for(i=lenght-1; i>=0; i--)
        {
            reverse[j] = string[i];
            j++;
        }
        reverse[j] = '\0';
 
        cout<<reverse;
 
    return 0;
 
}"
215,C++ program to count number of alphabets_._ digits and special characters in string,"#include <iostream>
#include <string.h>
 
#define MAX_SIZE 100 //Maximum size of the string
using namespace std;
 
int main()
{
    char string[MAX_SIZE];
    int alphabets_._ digits_._ specialchars_._ i;
 
    alphabets = digits = specialchars = i = 0;
 
    cout<<""Enter any string: "";
    cin>>string;
 
     while(string[i]!='\0')
    {
        if((string[i]>='a' && string[i]<='z') || (string[i]>='A' && string[i]<='Z'))
        {
            alphabets++;
        }
        else if(string[i]>='0' && string[i]<='9')
        {
            digits++;
        }
        else
        {
            specialchars++;
        }
 
        i++;
    }
 
    cout<<""Total Alphabets: ""<<alphabets<<endl;
    cout<<""Total Digits: ""<<digits<<endl;
    cout<<""Total Special characters: ""<<specialchars<<endl;
 
}"
216,C++ program to compare two strings using strcmp,"#include <iostream>
#include <string.h>
 
#define MAX_SIZE 100 //Maximum size of the string
using namespace std;
 
int main()
{
    char str1[1000]_._ str2[1000];
 
    cout<<""Enter the first string""<<endl;
    cin>>str1;
 
    cout<<""Enter the second string""<<endl;
    cin>>str2;
 
    if (strcmp(str1_._str2) == 0)
        cout<<""Entered strings are equal""<<endl;
    else
        cout<<""Entered strings are not equal""<<endl;
 
return 0;
 
}"
217,C++ Program to check whether an integer entered by the user is odd or even,"#include<iostream>
using namespace std;    

int main()
{    
    int number;
    cout << ""Enter a number: "";
    cin >> number;

    // True if remainder is 0
    if( number%2 == 0 )
        
        cout<< number << "" is an even number"";
    else
       cout<< number << "" is an odd number"";
       
    return 0;
}"
218,C++ Program to find the largest number among three number.,"#include<iostream>
using namespace std;

int main()
{
    int num1_._ num2_._ num3;
   
    cout << ""Enter three numbers: "";
    cin >> num1 >> num2 >> num3;

    if( num1 >= num3 && num1 >= num3 ){
    
        cout << num1 << "" is the largest number."";
    }
    
    else if( num2 >= num1 && num2 >= num3 ){
         cout << num2 << "" is the largest number."";
    } 
    
    else if( num3 >= num1 && num3 >= num2 ){
         cout << num3 << "" is the largest number."";
    }        

    return 0;
}"
219,C++ Program to Find the Largest Number using Conditional Operator.,"#include<iostream>
using namespace std;

int main()
{
    int num1_._ num2_._ num3_._ largest;

    cout<<""Enter three numbers: "";
    cin >> num1 >> num2 >> num3;

    largest = num1 > num2 ? (num1 > num3 ? num1 : num3) : (num2 > num3 ? num2 : num3) ;
    
    cout << largest << "" is the largest number."";

    return 0;
}"
220,C++ Program to find the Largest among Three Variables using Nested if.,"#include<iostream>
using namespace std;

int main()
{
    int num1_._ num2_._ num3;
    cout << ""Enter three numbers: ""<<endl;

    cin >> num1 >> num2 >> num3;
    if(num1 >= num2)
    {
        if(num1 >= num3)
            cout <<num1 << "" is the largest number"";
        else
             cout <<num3 << "" is the largest number"";
    }

    else if(num2 >= num3)
        cout <<num2 << "" is the largest number"";

    else
        cout <<num3 << "" is the largest number"";

    return 0;
}"
221,C++ program to check leap year using conditional Operator.,"#include <stdio.h>
int main()
{
    int year;

    cout<< ""Enter any year: "";

    scanf(""%d""_._ &year);

    (year%4==0 && year%100!=0) ? printf(""%d is leap year""_._year) :

    (year%400 ==0 ) ? cout << ""Leap year"" : cout<< year << "" is not leap year"" ;

    return 0;
}"
222,C++ program to check alphabets using conditional operator.,"#include<iostream>
using namespace std;

int main()
{
    char ch;

    cout<<""Enter any character: "";
    cin>> ch;

    cout << ""It is "" <<(((ch>='a' && ch<='z') || (ch>='A' && ch<='Z')) ? ""albhabet"" : ""not albhabet"");

    return 0;
}"
223,C++ program to check number is positive_._ negative or zero.,"#include<iostream>
using namespace std;

int main()
{
    char ch;

    cout<<""Enter any character: "";
    cin>> ch;

    cout << ""It is "" <<(((ch>='a' && ch<='z') || (ch>='A' && ch<='Z')) ? ""albhabet"" : ""not albhabet"");

    return 0;
}"
224,C++ program to check uppercase or lowercase alphabets.,"#include<iostream>
using namespace std;

int main()
{
  char ch;

    cout << ""Enter any character: "";
    cin >> ch;

     if(ch >= 'a' && ch <= 'z')
    {
        cout << ch<< "" is lowercase alphabet.: "";
    }
    else if(ch >= 'A' && ch <= 'Z')
    {
        cout << ch<< "" is uppercase alphabet.: "";
    }
    else
    {        
        cout << ch<< "" is not an alphabet.: "";       
    }

    return 0
}"
225,C++ program to check entered character vowel or consonant.,"#include<iostream>
using namespace std;

int main()
{
  char ch;

    cout << ""Enter any character: "";
    cin >> ch;

    // Condition for vowel checking
    if(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u' || ch=='A' || ch=='E' || ch=='I' || ch=='O' || ch=='U')
    {
        cout << ch << "" is a vowel"";
    }
    else if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
    {
        cout << ch << "" is a consonant"";
    }

    return 0;
}"
226,C++ program to check whether a character is alphabet_._ digit or special character.,"#include<iostream>
using namespace std;

int main()
{
    char ch;
    cout << ""Enter any character"";
    cin >> ch;

    // Alphabet checking condition
    if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
    {
        cout << ch << "" is an Alphabet"";
    }
    else if(ch >= '0' && ch <= '9')
    {
        cout << ch << "" is a Digit"";
    }
    else
    {
        cout << ch << "" is a Special Character"";
    }

    return 0;
}"
227,C++ program to print day name of week.,"#include<iostream>
using namespace std;

int main()
{
    int week;

    cout<<""Enter week number (1-7):"";
    cin >> week;

    if(week == 1)
    {
        cout << ""Monday"";
    }
    else if(week == 2)
    {
        cout << ""Tuesday"";
    }
    else if(week == 3)
    {
        cout << ""Wednesday"";
    }
    else if(week == 4)
    {
        cout << ""Thursday"";
    }
    else if(week == 5)
    {
        cout << ""Friday"";
    }
    else if(week == 6)
    {
        cout << ""Saturday"";
    }
    else if(week == 7)
    {
        cout << ""Sunday"";
    }
    else
    {
        cout << ""Invalid Input! Please enter week in between 1-7."";
    }
    return 0;
}"
228,C++ program to accept two integers and check whether they are equal or not.,"#include<iostream>
using namespace std;

int main()
{
    int num1_._ num2;

    cout << ""Input the values for Number1 and Number2 :"";
    cin >> num1 >> num2;

    if (num1 == num2)
    {
        cout << ""Number1 and Number2 are equal"";
    }

    else
    {
        cout << ""Number1 and Number2 are not equal"";
    }
}"
229,C++ program to detrermine a candidate’s age is eligible for casting the vote or not.,"#include<iostream>
using namespace std;


int main()
{
    int Candiateage;

    cout << ""Input the age of the candidate :""<<endl;
    cin >> Candiateage;

    if (Candiateage < 18)
    {
        cout << ""Sorry_._ You are not eligible to caste your vote."" <<endl;
        cout << ""You would be able to caste your vote after "" << 18-Candiateage << "" year"" <<endl;
    }
    else
    {
         cout << ""Congratulation! You are eligible for casting your vote."" << endl ;
    }
    return 0;

}"
230,C++ program to find the eligibility of admission for an engineering course based on the criteria.,"#include<iostream>
using namespace std;

int main()
{

    int p_._ c_._ m_._ t_._ mp;

    cout << ""Eligibility Criteria for an engineering:"" <<endl;
    cout << ""Marks in Mathematics >= 65"" <<endl;
    cout << ""Marks in Physics >= 55"" <<endl;
    cout << ""Marks in Chemestry >= 50"" <<endl;
    cout << ""Total in all three subject >= 180"" <<endl;
    cout << ""or Total in Maths and Physics >= 140"" <<endl;
    cout << ""-------------------------------------"" <<endl;

    cout << ""Input the marks obtained in Physics :"" <<endl;
    cin >> p;
    cout << ""Input the marks obtained in Chemistry :"" <<endl;
    cin >> c;
    cout << ""Input the marks obtained in Mathematics :"" <<endl;
    cin >> m;
    cout << ""Total marks of Mathematics_._ Physics and Chemistry :"" << m + p + c << endl;
    cout << ""Total marks of Maths and  Physics :"" << m + p;

    if (m>=65)

        if(p>=55)

            if(c>=50)

                if((m + p + c) >= 180 || (m + p) >= 140)
                    cout << ""The  candidate is eligible for admission."" <<endl;

                else
                    cout << ""The candidate is not eligible."" <<endl;
            else
                cout << ""The candidate is not eligible.""<<endl;
        else
            cout << ""The candidate is not eligible.""<<endl;
    else
        cout << ""The candidate is not eligible.""<<endl;

}"
231,C++ program to calculate the total marks_._ percentage and division of student.,"#include<iostream>
#include<string.h>
using namespace std;

int main()
{
    int rollno_._ phy_._ che_._ it_._ total;
    float percentage;
    char name[20]_._ div[10];

    cout << ""Input the Roll Number of the student :"";
    cin >> rollno;

    cout << ""Input the Name of the Student :"";
    cin >> name;

    cout << ""Input the marks of Physics_._ Chemistry and Information Technology: "";
    cin >> phy >> che >> it;

    total = phy + che + it;
    percentage = total/3.0;

    if (percentage >= 60)
    strcpy(div_._ ""First"");

    else
    if (percentage < 60 && percentage >= 48)
        strcpy(div_._""Second"");

    else
        if (percentage <48 && percentage >= 36)
        strcpy(div_._ ""Pass"");

         else
        strcpy(div_._ ""Fail"");

       cout << ""Roll No : "" << rollno <<endl << ""Name of Student : "" << name <<endl;

       cout << ""Marks in Physics : "" << phy << endl;
       cout << ""Marks in Chemistry : "" << che << endl;
       cout << ""Marks in Information Technology : "" << it << endl;
       cout << ""Total Marks = "" << total <<endl;
       cout << ""Percentage = "" << percentage <<endl;
       cout << ""Division = "" << div <<endl;


}"
232,C++ program to enter month number and print number of days in month.,"#include<iostream>
using namespace std;

int main()
{
    int month;
    cout << ""Enter month number (1-12):"";
    cin >> month;

    if(month == 1)
    {
        cout << ""Enter month : January "" <<endl;
        cout << ""No. of days : 31 days"" <<endl;
    }
    else if(month == 2)
    {
        cout << ""Enter month : February "" <<endl;
        cout << ""No. of days :  28 or 29 days"" <<endl;
    }
    else if(month == 3)
    {
        cout << ""Enter month : March "" <<endl;
        cout << ""No. of days :  31 days"" <<endl;
    }
    else if(month == 4)
    {
        cout << ""Enter month : April "" <<endl;
        cout << ""No. of days :  30 days"" <<endl;
    }
    else if(month == 5)
    {
        cout << ""Enter month : May "" <<endl;
        cout << ""No. of days :  31 days"" <<endl;
    }
    else if(month == 6)
    {
        cout << ""Enter month : June "" <<endl;
        cout << ""No. of days :  30 days"" <<endl;
    }
    else if(month == 7)
    {
        cout << ""Enter month : July "" <<endl;
        cout << ""No. of days :  31 days"" <<endl;
    }
    else if(month == 8)
    {
        cout << ""Enter month : August "" <<endl;
        cout << ""No. of days :  31 days"" <<endl;
    }
    else if(month == 9)
    {
        cout << ""Enter month : September "" <<endl;
        cout << ""No. of days :  30 days"" <<endl;
    }
    else if(month == 10)
    {
        cout << ""Enter month : October "" <<endl;
        cout << ""No. of days :  31 days"" <<endl;

    }
    else if(month == 11)
    {
        cout << ""Enter month : November "" <<endl;
        cout << ""No. of days :  30 days"" <<endl;
    }
    else if(month == 12)
    {
        cout << ""Enter month : December "" <<endl;
        cout << ""No. of days :  31 days"" <<endl;
    }
    else
    {
        cout << ""Invalid input! Please enter month number between (1-12)."";
    }

    return 0;

}"
233,C++ program to count total number of notes in entered amount.,"#include<iostream>
using namespace std;

int main()
{
    int amount;

    int note1_._ note2_._ note5_._ note10_._ note20_._ note50_._ note100_._ note500;

    note1 = note2 = note5 = note10 = note20 = note50 = note100 = note500 = 0;

    cout << ""Enter amount: ""<<endl;
    cin >> amount;

    if(amount >= 500)
    {
        note500 = amount/500;
        amount -= note500 * 500;
    }
    if(amount >= 100)
    {
        note100 = amount/100;
        amount -= note100 * 100;
    }
    if(amount >= 50)
    {
        note50 = amount/50;
        amount -= note50 * 50;
    }
    if(amount >= 20)
    {
        note20 = amount/20;
        amount -= note20 * 20;
    }
    if(amount >= 10)
    {
        note10 = amount/10;
        amount -= note10 * 10;
    }
    if(amount >= 5)
    {
        note5 = amount/5;
        amount -= note5 * 5;
    }
    if(amount >= 2)
    {
        note2 = amount /2;
        amount -= note2 * 2;
    }
    if(amount >= 1)
    {
        note1 = amount;
    }

    cout << ""Total number of notes"" <<endl;
    cout << ""500 = "" << note500 <<endl;
    cout << ""100 = "" << note100 <<endl;
    cout << ""50 = "" << note50 <<endl;
    cout << ""20 = "" << note20 <<endl;
    cout << ""10 = "" << note10 <<endl;
    cout << ""5 = "" << note5 <<endl;
    cout << ""2 = "" << note2 <<endl;
    cout << ""1 = "" << note1 <<endl;

    return 0;

}"
234,C++ program to check whether a triangle can be formed by the given value for the angles.,"#include<iostream>
using namespace std;

int main()
{
    int anglea_._ angleb_._ anglec_._ sum;

    cout << ""Input three angles of triangle : "";
    cin >> anglea >> angleb >> anglec;

    // Calculate the sum of all angles of triangle
    sum = anglea + angleb + anglec;
    // Check whether sum=180 then its a valid triangle otherwise invalid triangle
    if(sum == 180)
    {
        cout << ""It is a valid triangle. ""<<endl;
    }
    else
    {
        cout << ""It is a invalid triangle."";
    }
    return 0;

}"
235,C++ program to print alphabets from a to z,"#include <iostream>
using namespace std;
 
int main()
{
    int character=0;
    char ch='A';
    do
    {
         character=int(ch);
 
         cout<<ch<<"" "";
         character++;
         ch=char(character);
 
    }
    while(ch<='Z');
 
 
}"
236,C++ program to print ASCII values of all characters,"#include <iostream>
using namespace std;
 
int main()
{
    char c;
 
    // Printing ASCII value of all Uppercase Alphabet
    for(c = 'A'; c <= 'Z'; c++){
       cout << ""ASCII value of: "" << c << "" = "" << (int)c <<endl;
    }
    return 0;
}"
237,Write C++ program to print multiplication table of a given number,"#include <iostream>
using namespace std;
 
int main()
{
    int num=0_._ i;
   //Reading number
 
    cout<<""Enter number to print table: ""<<endl;
    cin>>num;
    for(i=1; i<=10; i++)
    {
        //Printing table of number entered by user
        cout<<num<<"" x ""<<i << "" = ""<<num*i<<endl;
    }
    return 0;
 
}"
238,C++ program to print all natural numbers in reverse order,"#include <iostream>
using namespace std;
 
int main()
{
    int num=0_._ i;
 
   //Reading number
    cout<<""Enter any number: ""<<endl;
    cin>>num;
    /*Running loop from the number entered by user_._
      and Decrementing by 1*/
    for(i=num; i>=1; i--)
    {
        cout<<i;
    }
    return 0;
 
}"
239,C++ program to print sum of digits enter by user,"#include <iostream>
using namespace std;
 
int main()
{
    int num_._ total;
 
   //Reading number
    cout<<""Enter any number: ""<<endl;
    cin>>num;
 
    //Adding sum of digit in total variable
    for(total = 0; num > 0; num = num/10)
        total = total + (num%10);
 
    //Printing sum of digit
    cout<<""Sum of digits: ""<< total;
    return 0;
}"
240,C++ program to find sum of even numbers between 1 to n,"#include <iostream>
using namespace std;
 
int main()
{
    int i_._ num_._ sum=0;
 
   //Reading number
    cout<<""Enter any number: ""<<endl;
    cin>>num;
 
     for(i=2; i<=num; i+=2)
     {
        //Adding current even number to sum variable
        sum += i;
     }
     cout<<""Sum of all even number between 1 to "" << num << "": ""<<sum;
 
    return 0;
}"
241,C++ program to find sum of odd numbers between 1 to n,"#include <iostream>
using namespace std;
 
int main()
{
    int i_._ num_._ sum=0;
 
   //Reading number
    cout<<""Enter any number: ""<<endl;
    cin>>num;
 
     for(i=1; i<=num; i+=2)
     {
        //Adding current even number to sum variable
        sum += i;
     }
     cout<<""Sum of all odd number between 1 to "" << num << "": ""<<sum;
 
    return 0;
}"
242,swap first and last digit of a number,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int num_._ last_._ first_._ temp_._ swap_._ count = 0;
 
    //Reading a number from user
    cout<<""Enter any number:"";
    cin>>num;
 
    temp = num;
    last = temp % 10;
    count = (int)log10(temp);
 
    while(temp>=10)
    {
        temp /= 10;
    }
    first = temp;
    swap = (last * pow(10_._ count) + first) + (num - (first * pow(10_._ count) + last));
 
    cout<<""Last Digit: ""<<last<<endl;
 
    cout<<""First Digit: ""<<first<<endl;
 
    cout<<num<<"" is swapped to ""<<swap;
 
    return 0;
}"
243,find the sum of first and last digit of any number,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int num_._ sum=0_._ firstDigit_._ lastDigit;
 
     //Reading a number from user
    cout<<""Enter any number:"";
    cin>>num;
 
     lastDigit = num % 10;
 
    firstDigit = num;
 
    while(num >= 10)
    {
        num = num / 10;
    }
    firstDigit = num;
 
     //Finding sum of first and last digit
    sum = firstDigit + lastDigit;
 
    cout<<""Sum of first and last digit: ""<<sum;
 
    return 0;
}"
244,find first and last digit of any number,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int num_._ last;
 
     //Reading a number from user
    cout<<""Enter any number:"";
    cin>>num;
 
    last = num%10;
 
    cout<<""The last digit of entered number: ""<< last<<endl;
 
    while(num>=10)
    {
        num = num/10;
    }
 
    cout<<""The first digit of entered number: ""<<num;
 
    return 0;
}"
245,C++ program to calculate product of digits of a number,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int num_._ product=1;
 
     //Reading a number from user
    cout<<""Enter any number:"";
    cin>>num;
 
    // Repeat the steps till n becomes 0
    while(num != 0)
    {
        product = product * (num % 10);
 
        // Remove the last digit from n
        num = num / 10;
    }
 
    cout<<""Product of digits: ""<<product;
 
    return 0;
}"
246,reverse a number using while & for loop,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int num_._ rev = 0;
 
     //Reading a number from user
    cout<<""Enter any number:"";
    cin>>num;
 
    //finding reverse number using while loop
     while (num > 0) {
      rev = rev * 10;
      rev = rev + num % 10;
      num = num / 10;
    }
 
    cout<<""Reversed number is: ""<<rev;
 
    return 0;
}"
247,C++ program to calculate power using while & for loop,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int base_._ exponent_._power_._ i;
 
    //Reading base & exponent
    cout<<""Enter base: "";
    cin>>base;
    cout<<""Enter exponent: "";
    cin>>exponent;
 
    power = 1;
    i = 1;
    //caculatinh power of given number
    while(i <= exponent)
    {
        power = power * base;
        i++;
    }
    cout<<""Power of ""<<base<<"" is: "" <<power;
 
    return 0;
}"
248,C++ program to find factorial of any number,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int num_._i;
    long long fact=1;
 
    //Reading a number from user
    cout<<""Enter any number to calculate factorial:"";
    cin>>num;
 
    fact = 1;
    i = 1;
 
    //Run loop from 1 to number entered by user
    while(i <= num)
    {
        fact = fact * i;
        i++;
    }
 
    cout<<""Factorial of ""<<num <<"" is: ""<<fact; ;
 
    return 0;
}"
249,Write C++ program to check whether a number is Armstrong number or not,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
     int num_._ sum = 0_._ i_._ r;
    //Reading a number from user
    cout<<""Enter any number to calculate factorial:"";
    cin>>num;
 
    //Finding armstrong number or not
    for(i = num; i>0; i=i/10)
    {
        r = i%10;
        sum = sum + r * r * r;
    }
     if ( num == sum ){
       cout<<num<<"" is an armstrong number.""<<endl;;
     }
    else{
        cout<<num<<"" is not an armstrong number.""<<endl;;
    }
 
    return 0;
}"
250,Write C++ program to find Armstrong numbers between 1 to n,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
     int lower_._ higher_._ i_._ temp1_._ temp2_._ remainder_._ n = 0_._ result = 0;
 
     //Reading two numbers from user
    cout<<""Enter two numbers: "";
    cin>>lower;
    cin>>higher;
 
    cout<<""Armstrong numbers between ""<< lower << "" and ""<<higher << "" are: "";
     for(i = lower + 1; i < higher; ++i)
    {
        temp2 = i;
        temp1 = i;
 
        // number of digits calculation
        while (temp1 != 0)
        {
            temp1 /= 10;
            ++n;
        }
 
        // result contains sum of nth power of its digits
        while (temp2 != 0)
        {
            remainder = temp2 % 10;
            result += pow(remainder_._ n);
            temp2 /= 10;
        }
 
        // checking if number i is equal to the sum of nth power of its digits
        if (result == i) {
            cout<<i<<endl;
        }
 
        // resetting the values to check Armstrong number for next iteration
        n = 0;
        result = 0;
 
    }
 
    return 0;
}"
251,C++ program to calculate compound Interest,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    float amount_._ rate_._ intrest_._ time_._ ci_._ a;
 
    /*Reading amount_._ rate of intrest
       and period in years from user
     */
     cout<<""Type the amount: "";
     cin>>amount;
 
     cout<<""Type the interest rate: "";
     cin>>rate;
 
     cout<<""Type the period in years: "";
     cin>>time;
 
     intrest = 1+(rate/100);
 
     // ci=pow(intrest_._time);
     ci = 1;
     for(a = 1; a <= time; a++)
        ci = ci * intrest;
 
     ci = amount * ci - amount;
 
     cout<<""Your compound interest is: "" <<ci;
 
    return 0;
}"
252,C++ program to check a enter number is Prime number or not using while & for loop,"#include <iostream>
#include <math.h>
 
using namespace std;
 
int main()
{
    int num_._ i_._ f;
 
    //Reading a number from user
    cout<<""Enter any number:"";
    cin>>num;
 
    f = 0;
    i = 2;
    while(i <= num/2)
    {
        if(num%i == 0)
        {
            f=1;
            break;
        }
        i++;
    }
    if(f == 0)
 
        cout<<num<<"" is a Prime Number""<<endl;
    else
 
        cout<<num<<"" is Not a Prime Number""<<endl;
 
   return 0;
}"
253,C++ program to check whether a number is palindrome or not,"#include <iostream>
 
using namespace std;
 
int main()
{
    int num_._ i_._ rev;
 
    //Reading a number from user
    cout<<""Enter any number:"";
    cin>>num;
 
    rev = num;
    for(i=0; num>0; num=num/10)
    {
        i = i * 10;
        i = i + (num%10);
    }
     //Checking if reverse number is equal to original num or not.
    if(rev == i)
       cout<< rev << "" is a Palindrome Number."";
    else
        cout<< rev << "" is not a Palindrome Number."";
 
   return 0;
}"
254,C++ program to print number in words,"#include <iostream>
 
using namespace std;
 
int main()
{
    int n_._ num = 0;
 
    //Reading a number from user
    cout<<""Enter any number to print in words: "";
    cin>>n;
 
    while(n != 0)
    {
        num = (num * 10) + (n % 10);
        n /= 10;
    }
     //print corresponding digit in words till num becomes 0
    while(num != 0)
    {
        switch(num % 10)
        {
            case 0: cout<<""zero "";
                break;
            case 1: cout<<""one "";
                break;
            case 2: cout<<""two "";
                break;
            case 3: cout<<""three "";
                break;
            case 4: cout<<""four "";
                break;
            case 5: cout<<""five "";
                break;
            case 6: cout<<""six "";
                break;
            case 7: cout<<""seven "";
                break;
            case 8: cout<<""eight "";
                break;
            case 9: cout<<""nine "";
                break;
        }
 
        num = num / 10;
    }
 
   return 0;
}"
255,program to find HCF of two numbers,"#include <iostream>
 
using namespace std;
 
int main()
{
    int i_._ num1_._ num2_._ min_._ HCF=1;
 
    //Read two numbers from user
    cout<<""Enter any two numbers:"";
    cin>>num1;
    cin>>num2;
 
    // Find min number between two numbers
    min = (num1<num2) ? num1 : num2;
 
    for(i=1; i<=min; i++)
    {
        if(num1%i==0 && num2%i==0)
        {
            HCF = i;
        }
    }
 
    cout<<""HCF of ""<<num1<< "" and ""<< num2<< "" is: "" <<HCF;
    return 0;
 
}"
256,program to find LCM of two numbers,"#include <iostream>
 
using namespace std;
 
int main()
{
    int i_._ num1_._ num2_._ max_._ cm=1;
 
    //Read two numbers from user
    cout<<""Enter any two numbers:"";
    cin>>num1;
    cin>>num2;
 
    // Find max number between num1 and num2
    max = (num1 > num2) ? num1 : num2;
 
    i = max;
 
    //Loop runs forever till lcm is not found
    while(1)
    {
        if(i%num1 == 0 && i%num2 == 0)
        {
            //If i divides both num1 and num2 then lcm is found hence exit from loop
            cm = i;
            break;
        }
         //If lcm is not found then generate next multiple of max between both numbers
 
        i += max;
    }
 
    cout<<""LCM of "" << num1 << "" and "" << "" is ""<< cm;
 
    return 0;
 
}"
257, Write C++ program to print number of days in a month using switch case,"#include <iostream>
 
using namespace std;
 
int main()
{
    int monthnumber;
 
    //Reading a month number from user
 
   cout<<""Enter month number(1-12): "";
   cin>>monthnumber;
 
    switch(monthnumber)
    {
        case 1: cout<<""31 days"";
            break;
        case 2: cout<<""28 or 29 days"";
            break;
        case 3: cout<<""31 days"";
            break;
        case 4: cout<<""30 days"";
            break;
        case 5: cout<<""31 days"";
            break;
        case 6: cout<<""30 days"";
            break;
        case 7: cout<<""31 days"";
            break;
        case 8: cout<<""31 days"";
            break;
        case 9: cout<<""30 days"";
            break;
        case 10: cout<<""31 days"";
            break;
        case 11: cout<<""30 days"";
            break;
        case 12: cout<<""31 days"";
            break;
        default: cout<<""Invalid input!!! enter month number between 1-12"";
 
    }
    return 0;
 
}"
258,Write C++ program to print day of week name using switch case,"#include <iostream>
 
using namespace std;
 
int main()
{
    int weeknumber;
 
   //Reading week no from user
   cout<<""Enter week number(1-7): "";
   cin>>weeknumber;
 
    switch(weeknumber)
    {
        case 1: cout<<""Monday"";
            break;
        case 2: cout<<""Tuesday"";
            break;
        case 3: cout<<""Wednesday"";
            break;
        case 4: cout<<""Thursday"";
            break;
        case 5: cout<<""Friday"";
            break;
        case 6: cout<<""Saturday"";
            break;
        case 7: cout<<""Sunday"";
            break;
        default: cout<<""Invalid input! Please enter week no. between 1-7."";
    }
 
    return 0;
 
}"
259,Write C++ program to create calculator using switch Statement,"#include <iostream>
 
using namespace std;
 
int main(){
    char mathoperator;
    double firstNumber_._ secondNumber;
 
    //Reading mathoperator from user
    cout<<""Enter an operator (+_._ -_._ *_._): "";
    cin>>mathoperator;
 
   //Reading operands from user
    cout<<""Enter two operands: "";
    cin>>firstNumber;
    cin>>secondNumber;
 
    switch(mathoperator)
    {
        cout << firstNumber << "" + "" << secondNumber << "" = "" << firstNumber+secondNumber;
            break;
 
        case '-':
             cout << firstNumber << "" - "" << secondNumber << "" = "" << firstNumber-secondNumber;
            break;
 
        case '*':
             cout << firstNumber << "" * "" << secondNumber << "" = "" << firstNumber*secondNumber;
            break;
 
        case '/':
             cout << firstNumber << "" / "" << secondNumber << "" = "" << firstNumber/secondNumber;
            break;
 
        // operator doesn't match any case constant (+_._ -_._ *_._ /)
        default:
            cout<<""Error! please enter correct operator"";
    }
 
    return 0;
 
}"
260,Write C++ program to check even or odd number using switch case,"#include <iostream>
 
using namespace std;
 
int main(){
 
    int num;
 
    //Reading a number from user
    cout<<""Enter any number to check even or odd: "";
    cin>>num;
 
     switch(num % 2)
    {
        //If n%2 == 0
        case 0: cout<<""Number is even"";
                break;
 
        //Else if n%2 == 1
        case 1: cout<<""Number is odd"";
                break;
    }
    return 0;
}"
261,Write C++ program to check vowel or consonant using switch case,"#include <iostream>
 
using namespace std;
 
int main(){
 
     char ch;
 
    //Reading an alphabet from user
    cout<<""Enter any alphabet: "";
    cin>>ch;
 
    // checking vowel and consonant
 
     switch(ch)
    {
        case 'a': cout<<""vowel"";
            break;
        case 'e': cout<<""vowel"";
            break;
        case 'i': cout<<""vowel"";
            break;
        case 'o': cout<<""vowel"";
            break;
        case 'u': cout<<""vowel"";
            break;
        case 'A': cout<<""vowel"";
            break;
        case 'E': cout<<""vowel"";
            break;
        case 'I': cout<<""vowel"";
            break;
        case 'O': cout<<""vowel"";
            break;
        case 'U': cout<<""vowel"";
            break;
        default: cout<<""consonant"";
    }
 
    return 0;
 
 
}"
262,Write C++ program to print gender (Male/Female) program according to given M/F.,"#include <iostream>
 
using namespace std;
 
int main(){
 
    char gender;
 
    //Reading gender from user
    cout<<""Enter gender (M/m or F/f): "";
    cin>>gender;
 
    switch(gender)
    {
        case 'M':
        case 'm':
            cout<<""Male"";
            break;
        case 'F':
        case 'f':
             cout<<""Female"";
            break;
        default:
             cout<<""Unspecified Gender""<<endl;
    }
 
    return 0;
 
}"
263,Write C++ Program to find maximum number using switch case.,"#include <iostream>
 
using namespace std;
 
int main(){
 
   int num1_._ num2;
 
    //Reading two numbers from user
    cout<<""Enter two numbers to find maximum number: "";
    cin>>num1;
    cin>>num2;
 
    //Condition to check maximum number
    switch(num1 > num2)
    {
        case 0: cout<<num2<<"" is Maximum number"";
            break;
 
         case 1: cout<<num1<<"" is Maximum number"";
            break;
    }
 
    return 0;
 
}"
264,Write C++ program to check even or odd using functions,"#include <iostream>
using namespace std;
 
int isEven(int num)
{
    return !(num & 1);
}
 
int main(){
 
    int num;
 
    // Inputting number from user
    cout<<""Enter any number: "";
    cin>>num;
 
    // If isEven() function return 0 then the number is even
    if(isEven(num))
    {
        //printing even number
        cout<<""The entered number is even."";
    }
    else
    {
        //printing odd number
        cout<<""The entered number is odd."";
    }
 
    return 0;
 
}"
265,Write C++ to check prime and armstrong numbers using function,"#include <iostream>
#include <math.h>
using namespace std;
 
int checkPrimeNumber(int n);
int checkArmstrongNumber(int n);
 
int main(){
 
    int num_._ flag;
 
    cout<<""Enter a positive integer: "";
    cin>>num;
 
     // Checking prime number
    flag = checkPrimeNumber(num);
    if (flag == 1)
        cout<<num<<"" is a prime number""<<endl;
    else
        cout<<num<<"" is not a prime number""<<endl;
 
    // Checking Armstrong number
    flag = checkArmstrongNumber(num);
    if (flag == 1)
        cout<<num<<"" is a Armstrong number""<<endl;
    else
        cout<<num<<"" is a not an Armstrong number""<<endl;
    return 0;
}
//function to check prime number
int checkPrimeNumber(int num)
{
    int i_._ flag = 1;
 
    for(i=2; i<=num/2; ++i)
    {
 
    // condition for non-prime number
        if(num%i == 0)
        {
            flag = 0;
            break;
        }
    }
    return flag;
}
 
//function to check Armstrong Number
int checkArmstrongNumber(int number)
{
    int originalNumber_._ remainder_._ result = 0_._ num = 0_._ flag;
 
    originalNumber = number;
 
    while (originalNumber != 0)
    {
        originalNumber /= 10;
        ++num;
    }
 
    originalNumber = number;
 
    while (originalNumber != 0)
    {
        remainder = originalNumber%10;
        result += pow(remainder_._ num);
        originalNumber /= 10;
    }
 
    // condition for Armstrong number
    if(result == number)
        flag = 1;
    else
        flag = 0;
 
    return flag;
}"
266,C++ program to find cube of a number using function,"#include <iostream>
using namespace std;
 
// Function declaration
double cube(double num);
 
 
int main()
{
    int num;
    double c;
 
    //Inputting number from user
    cout<<""Enter any number: ""<<endl;
    cin>>num;
 
    c = cube(num);
 
    cout<<""Cube of "" <<num << "" is ""<<c;
 
    return 0;
}
 
//Function to find cube of any number
double cube(double num)
{
    return (num * num * num);
}"
267,C++ Program to convert binary number to decimal,"#include <iostream>
#include <math.h>
using namespace std;
 
//Function declartion
int convertBinaryToDecimal(long long n);
 
int main()
{
    long long n;
    cout<<""Enter a binary number: "";
    // Inputting number from user
    cin>>n;
    //Printing binary number to decimal
    cout<<n<<"" in binary = ""<<convertBinaryToDecimal(n)<<"" in decimal"";
    return 0;
}
 
//Function to convert binary number to decimal
int convertBinaryToDecimal(long long n)
{
    int decimalNumber = 0_._ i = 0_._ remainder;
    while (n!=0)
    {
        remainder = n%10;
        n /= 10;
        decimalNumber += remainder*pow(2_._i);
        ++i;
    }
    return decimalNumber;
}"
268,C++ Program to convert decimal number to binary using function,"#include <iostream>
#include <math.h>
using namespace std;
 
//Function declaration
long long convertDecimalToBinary(int);
 
int main()
{
    int n_._ binaryNumber;
 
    cout << ""Enter a decimal number: "";
    cin >> n;
    binaryNumber = convertDecimalToBinary(n);
    cout << n << "" in decimal = "" << binaryNumber << "" in binary"" << endl ;
    return 0;
}
 
long long convertDecimalToBinary(int n)
{
    long long binaryNumber = 0;
    int remainder_._ i = 1_._ step = 1;
 
    while (n!=0)
    {
        remainder = n%2;
        cout << ""Step "" << step++ << "": "" << n << ""/2_._ Remainder = "" << remainder << ""_._ Quotient = "" << n/2 << endl;
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
    return binaryNumber;
}"
269,C++ program to find Length of the String by passing String/Character,"#include <iostream>
#include <math.h>
using namespace std;
 
//function declaration
int stringLength(char *);
 
int main()
{
    char text[100];
    int length;
 
    cout<<""Enter text (max- 100 characters): "";
    cin>>text;
 
    length = stringLength(text);
 
    cout<<""Input text is: ""<<text<<endl;
    cout<<""Length is: ""<<length<<endl;
 
    return 0;
}
 
 
int stringLength(char *str)
{
    int len=0;
 
    //calculating string length
    for(len=0; str[len]!='\0'; len++);
 
    //returning len
    return len;
}"
270,C++ program to print all strong numbers between 2 numbers,"#include <iostream>
using namespace std;
 
// Function declarations
long long fact(int num);
void printStrongNumbers(int start_._ int end);
 
 
int main()
{
    int start_._ end;
 
    /* Input start and end range */
    cout<<""Enter the lower limit: "";
    cin>>start;
    cout<<""Enter the upper limit: "";
    cin>>end;
 
    cout<<""List of strong numbers between""<<start<<""to ""<<end << "" are: ""<<endl;
    printStrongNumbers(start_._ end);
 
    return 0;
}
 
 
 
//Printing all strong numbers in a given range
void printStrongNumbers(int start_._ int end)
{
    long long sum;
    int num;
 
    // Iterates from start to end
    while(start != end)
    {
        sum = 0;
        num = start;
 
        // Calculating sum of factorial of digits
        while(num != 0)
        {
            sum += fact(num % 10);
            num /= 10;
        }
 
        // If sum of factorial of digits equal to current number
        if(start == sum)
        {
           cout<<start<<endl;
        }
 
        start++;
    }
}
 
//Recursively find factorial of any number
long long fact(int num)
{
    if(num == 0)
        return 1;
    else
        return (num * fact(num-1));
}"
271,C++ program to find prime numbers in given range using functions,"#include <iostream>
using namespace std;
 
 
// Function declarations
int isPrime(int num);
void printPrimes(int lower_._ int upper);
 
int main()
{
    int lower_._ upper;
 
    cout<<""Enter the lower and upper limit to list primes: "";
    cin>>lower;
    cin>>upper;
 
    // Calling function to print all primes between the given range.
    printPrimes(lower_._ upper);
    return 0;
}
 
 
 
// Print all prime numbers between lower limit and upper limit.
 
void printPrimes(int lower_._ int upper)
{
    cout<<""List of prime numbers between ""<<lower <<"" and ""<<upper <<"" are: ""<<endl;
 
    while(lower <= upper)
    {
        // Printing if current number is prime
        if(isPrime(lower))
        {
           cout<<lower<<endl;
        }
 
        lower++;
    }
}
 
//Checking whether a number is prime or not
int isPrime(int num)
{
    int i;
 
    for(i=2; i<=num/2; i++)
    {
        /*
         If the number is divisible by any number
         other than 1 and self then it is not prime
         */
        if(num % i == 0)
        {
            return 0;
        }
    }
 
    return 1;
}"
272,C++ program to find diameter_._ circumference and area of circle using function,"#include <iostream>
#include <math.h>
using namespace std;
 
//All Function declaration
double getDiameter(double radius);
double getCircumference(double radius);
double getArea(double radius);
 
 
int main()
{
    float radius_._ diameter_._ circle_._ area;
 
    // Inputting radius of circle from user
    cout<<""Enter radius of circle: "";
    cin>>radius;
 
    diameter  = getDiameter(radius);       // Calling getDiameter function
    circle = getCircumference(radius);  // Calling getCircumference function
    area = getArea(radius);           // Calling getArea function
 
    cout<<""Diameter of the circle: ""<<diameter <<"" units""<<endl;
    cout<<""Circumference of the circle: ""<< circle<<"" units""<<endl;
    cout<<""Area of the circle:""<< area<<"" sq. units""<<endl;
 
    return 0;
}
 
// Calculating diameter of circle whose radius is given
 
double getDiameter(double radius)
{
    return (2 * radius);
}
 
 
//Calculating circumference of circle whose radius is given
 
double getCircumference(double radius)
{
    return (2 * M_PI * radius); // PI = 3.14
}
 
//Finding area of circle whose radius is given
 
double getArea(double radius)
{
    return (M_PI * radius * radius); // PI = 3.14
}"
273,C++ program to print perfect numbers between given interval using function,"#include <iostream>
using namespace std;
 
// Function declarations
int isPerfect(int num);
void printPerfect(int start_._ int end);
 
 
 
int main()
{
    int start_._ end;
 
    // Inputting lower and upper limit to print perfect numbers
    cout<<""Enter lower limit to print perfect numbers: "";
    cin>>start;
    cout<<""Enter upper limit to print perfect numbers: "";
    cin>>end;
 
   cout<<""All perfect numbers between ""<<start<< "" to ""<<end <<"" are: ""<<endl;
    printPerfect(start_._ end);
 
    return 0;
}
 
int isPerfect(int num)
{
    int i_._ sum;
 
    // Finding sum of all proper divisors
    sum = 0;
    for(i=1; i<num; i++)
    {
        if(num % i == 0)
        {
            sum += i;
        }
    }
 
    /*
      If sum of proper positive divisors equals to given number
      then the number is perfect number
     */
    if(sum == num)
        return 1;
    else
        return 0;
}
 
//Printing all perfect numbers
void printPerfect(int start_._ int end)
{
    // Iterating from start to end
    while(start <= end)
    {
        if(isPerfect(start))
        {
           cout<<start<<endl;
        }
 
        start++;
    }
}"
274,C++ program to find power of a number using recursion,"#include <iostream>
#include <math.h>
using namespace std;
 
//function declaration
double Power(double base_._ int exponent);
 
int main()
{
    double base_._ power;
    int exponent;
 
    // Inputting base and exponent from user
    cout<<""Enter base: "";
    cin>>base;
    cout<<""Enter exponent: "";
    cin>>exponent;
 
    // Call Power function
    power = Power(base_._ exponent);
 
    //printf(""%.2lf ^ %d = %f""_._ base_._ exponent_._ power);
    cout<<base<< ""^""<<exponent<<"" = ""<<power;
 
    return 0;
}
 
/*
  Calculating power of any number.
  Returns base ^ exponent
 */
double Power(double base_._ int exponent)
{
    // Base condition
    if(exponent == 0)
        return 1;
    else if(exponent > 0)
        return base * pow(base_._ exponent - 1);
    else
        return 1 / pow(base_._ - exponent);
}"
275,C++ program to find sum of natural numbers in given range using recursion,"#include <iostream>
using namespace std;
 
// Function declaration
int sumofnnumbers(int start_._ int end);
 
int main()
{
    int start_._ end_._ sum;
 
    // Inputting lower and upper limit from user
    cout<<""Enter lower limit: "";
    cin>>start;
    cout<<""Enter upper limit: "";
    cin>>end;
 
    sum = sumofnnumbers(start_._ end);
 
    cout<<""Sum of natural numbers from ""<<start <<"" to ""<<end << "": "" <<sum;
 
    return 0;
}
 
//Recursively find the sum of natural number
 
int sumofnnumbers(int start_._ int end)
{
    if(start == end)
        return start;
    else
        return start + sumofnnumbers(start + 1_._ end);
}"
276, C++ program to print even or odd numbers in given range using recursion,"#include <iostream>
using namespace std;
 
// Function declaration
void printevenodd(int cur_._ int limit);
 
int main()
{
    int lowerLimit_._ upperLimit;
 
    // Inputting lower and upper limit from user
    cout<<""Enter lower limit: "";
    cin>>lowerLimit;
    cout<<""Enter upper limit: "";
    cin>>upperLimit;
    //printf(""Even/odd Numbers from %d to %d are: ""_._ lowerLimit_._ upperLimit);
    cout<<""Even/odd Numbers from ""<<lowerLimit <<"" to ""<<upperLimit<<endl;
    printevenodd(lowerLimit_._ upperLimit);
 
    return 0;
}
 
 
//Recursive function to print even or odd numbers in a given range.
 
void printevenodd(int cur_._ int limit)
{
    if(cur > limit)
        return;
 
    cout<<cur<<endl;
 
    // Recursively call to printevenodd to get next value
    printevenodd(cur + 2_._ limit);
}"
277,C++ program to find reverse of a number using recursion,"#include <iostream>
#include <math.h>
 
using namespace std;
 
 //Fuction declaration
int reverseNumber(int num);
 
int main()
{
    int num_._ reverse;
 
    // Inputting number from user
    cout<<""Enter any number: "";
    cin>>num;
 
    // Calling function to reverse any number
    reverse = reverseNumber(num);
 
    cout<<""Reverse of number ""<<num <<"" is: ""<<reverse;
 
    return 0;
}
 
//Recursive function to find reverse of any number
 
int reverseNumber(int num)
{
    // Find total digits in num
    int digit = (int) log10(num);
 
    // Base condition
    if(num == 0)
        return 0;
 
    return ((num%10 * pow(10_._ digit)) + reverseNumber(num/10));
}"
278,C++ program to find LCM of two numbers using recursion,"#include <iostream>
using namespace std;
 
// Function declaration
int Findlcm(int x_._ int y);
 
 
int main()
{
    int num1_._ num2_._ LCM;
 
    // Inputting two numbers from user
    cout<<""Enter any 2 numbers to find LCM: ""<<endl;
    cin>>num1;
    cin>>num2;
 
    if(num1 > num2)
        LCM = Findlcm(num2_._ num1);
    else
        LCM = Findlcm(num1_._ num2);
 
    cout<<""LCM of ""<<num1 << "" and ""<< num2 <<"" is: ""<<LCM;
 
    return 0;
}
 
int Findlcm(int x_._ int y)
{
    static int multiple = 0;
 
    // Increments multiple by adding max value to it
    multiple += y;
 
    if((multiple % x == 0) && (multiple % y == 0))
    {
        return multiple;
    }
    else
    {
        return Findlcm(x_._ y);
    }
}"
279,C++ program to find HCF of two numbers using recursion,"#include <iostream>
using namespace std;
 
int Findgcd(int x_._ int y); // Function declaration
 
int main()
{
    int num1_._ num2_._ hcf;
 
    // Inputting 2 numbers from user
    cout<<""Enter any 2 numbers to find HCF or GCD: ""<<endl;
    cin>>num1;
    cin>>num2;
 
    hcf = Findgcd(num1_._ num2);
 
    //printf(""GCD of %d and %d = %d""_._ num1_._ num2_._ hcf);
 
    cout<<""GCD of ""<<num1 <<"" and ""<<num2 <<"" = ""<<hcf;
    return 0;
}
 
int Findgcd(int x_._ int y)
{
    if(y == 0)
        return x;
    else
        return Findgcd(y_._ x%y);
}"
280,C++ program to print elements of array using recursion,"#include <iostream>
using namespace std;
 
#define MAX_SIZE 100
 
//Function declaration
void PrintArray(int arr[]_._ int start_._ int len);
 
 
int main()
{
    int arr[MAX_SIZE];
    int num_._ i;
 
    // Inputting size and elements in array
    cout<<""Enter size of the array: "";
    cin>>num;
 
    cout<<""Enter elements in the array: "";
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
 
    // Printing array recursively
    cout<<""Elements in the array: "";
    PrintArray(arr_._ 0_._ num);
 
    return 0;
}
 
// Printing array recursively within a given range.
 
void PrintArray(int arr[]_._ int start_._ int len)
{
    // Recursion base condition
    if(start >= len)
        return;
 
    // Printing the current array element
    cout<<arr[start]<<""\t"";
 
    // Recursively calling printArray to print next element in the array
    PrintArray(arr_._ start + 1_._ len);
}"
281,C++ program to find sum of array elements using recursion,"#include <iostream>
using namespace std;
 
#define MAX_SIZE 100
 
// Function declaration
int sum(int arr[]_._ int start_._ int len);
 
 
int main()
{
    int arr[MAX_SIZE];
    int num_._ i_._ sumofarray;
 
 
    // Inputtin size and elements in array
    cout<<""Enter size of the array: "";
    cin>>num;
    cout<<""Enter elements in the array: "";
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
 
 
    sumofarray = sum(arr_._ 0_._ num);
    cout<<""Sum of array elements: ""<<sumofarray;
 
    return 0;
}
 
// Recursively finding the sum of elements in an array.
int sum(int arr[]_._ int start_._ int len)
{
    // Recursion base condition
    if(start >= len)
        return 0;
 
    return (arr[start] + sum(arr_._ start + 1_._ len));
}"
282,C++ program to generate nth fibonacci term using recursion,"#include <iostream>
using namespace std;
 
int fibonacci(int n)
{
    if((n==1)||(n==0))
    {
        return(n);
    }
    else
    {
        return(fibonacci(n-1)+fibonacci(n-2));
    }
}
 
int main()
{
    int n_._i=0;
    cout<<""Input the number of terms for Fibonacci Series:"";
    cin>>n;
    cout<<""\nFibonacci Series is as follows\n"";
 
    while(i<n)
    {
        cout<<"" ""<<fibonacci(i);
        i++;
    }
 
    return 0;
}"
283,C++ program to find factorial of a number using recursion,"#include <iostream>
using namespace std;
 
// Function declaration
unsigned long long Findfact(int num);
 
int main()
{
    int num;
    unsigned long long factorial;
 
    // Inputting an integer from user
    cout<<""Enter any number: "";
    cin>>num;
 
    factorial = Findfact(num);
 
    cout<<""Factorial of "" <<num<< "" is ""<<factorial;
 
    return 0;
}
 
unsigned long long Findfact(int num)
{
    // Base condition
    if(num == 0)
        return 1;
    else
        return num * Findfact(num - 1);
}"
284,C++ program to check palindrome number using recursion,"#include <iostream>
#include <math.h>
using namespace std;
 
// Function declarations
int reverseNumber(int num);
int isPalindrome(int num);
 
int main()
{
    int num;
 
    // Inputting any number from user
    cout<<""Enter any number: "";
    cin>>num;
 
    if(isPalindrome(num) == 1)
    {
        cout<<num<<"" is palindrome number"";
    }
    else
    {
        cout<<num<<"" is NOT palindrome number"";
    }
 
    return 0;
}
 
 
int isPalindrome(int num)
{
 
    if(num == reverseNumber(num))
    {
        return 1;
    }
 
    return 0;
}
 
 
int reverseNumber(int num)
{
    // Finding number of digits in num
    int digit = (int)log10(num);
 
 
    if(num == 0)
        return 0;
 
    return ((num%10 * pow(10_._ digit)) + reverseNumber(num/10));
}"
285,C++ program to find maximum and minimum elements in array using recursion,"#include <iostream>
using namespace std;
#define MAX_SIZE 100
 
// Function declarations
int Findmaxnumber(int array[]_._ int index_._ int len);
int Findminnumber(int array[]_._ int index_._ int len);
 
 
int main()
{
    int array[MAX_SIZE]_._ Num_._ max_._ min;
    int i;
 
    // Inputting size and elements of array
    cout<<""Enter size of the array: "";
    cin>>Num;
    cout<<""Enter "" <<Num <<"" elements in array: "";
    for(i=0; i<Num; i++)
    {
       cin>>array[i];
    }
 
    max = Findmaxnumber(array_._ 0_._ Num);
    min = Findminnumber(array_._ 0_._ Num);
 
    cout<<""Minimum element in array: ""<<min<<endl;
    cout<<""Maximum element in array: ""<<max<<endl;
 
    return 0;
}
 
 
 //Recursive function to find maximum element in the given array.
int Findmaxnumber(int array[]_._ int index_._ int len)
{
    int max;
    if(index >= len-2)
    {
        if(array[index] > array[index + 1])
            return array[index];
        else
            return array[index + 1];
    }
 
    max = Findmaxnumber(array_._ index + 1_._ len);
 
    if(array[index] > max)
        return array[index];
    else
        return max;
}
 
//Recursive function to find minimum element in the array
int Findminnumber(int array[]_._ int index_._ int len)
{
    int min;
 
    if(index >= len-2)
    {
        if(array[index] < array[index + 1])
            return array[index];
        else
            return array[index + 1];
    }
 
    min = Findminnumber(array_._ index + 1_._ len);
 
    if(array[index] < min)
        return array[index];
    else
        return min;
}"
286,C++ program to swap two numbers using pointers,"#include <iostream>
using namespace std;
 
//Swap function to swap 2 numbers
void swap(int *num1_._ int *num2) {
   int temp;
   //Copy the value of num1 to some temp variable
   temp = *num1;
 
   //Copy the value of num2 to num1
   *num1 = *num2;
 
   //Copy the value of num1 stored in temp to num2
   *num2 = temp;
}
 
int main() {
   int num1_._ num2;
 
   //Inputting 2 numbers from user
   cout<<""\nEnter the first number : "";
   cin>>num1;
   cout<<""\nEnter the Second number : "";
   cin>>num2;
 
   //Passing the addresses of num1 and num2
   swap(&num1_._ &num2);
 
   //Printing the swapped values of num1 and num2
   cout<<""\nFirst number : ""<< num1;
   cout<<""\nSecond number: ""<<num2;
 
   return (0);
}"
287,C++ program to add two numbers using pointers,"#include <iostream>
using namespace std;
 
int main() {
 
    int num1_._ num2_._ *ptr1_._ *ptr2_._ sum=0;
    cout<<""Enter the two number :"";
    cin>>num1>>num2;
    ptr1 = &num1;
    ptr2 = &num2;
    sum = *ptr1 + *ptr2;
    cout<<""Sum of the two number is ""<<sum;
 
    return 0;
 
}"
288,C++ program to Sum of Array Elements using Pointers,"#include <iostream>
using namespace std;
 
int main() {
 
   int arr[5]_._ i_._ sum = 0;
    int *ptr;
 
    cout << ""Enter any 5 numbers :"";
    for (i = 0; i < 5; i++) {
        cin >> arr[i];
    }
 
    ptr = arr;
    for (i = 0; i < 5; i++) {
        sum = sum + *(ptr + i);
    }
 
    cout << ""\nSum of array elements :"" << sum;
 
    return 0;
 
}"
289,C++ program to find length of string using pointer,"#include <iostream>
#define MAX_SIZE 100 // Maximum size of the string
using namespace std;
 
int main() {
 
    char text[MAX_SIZE];
    char * str = text;
    int count = 0;
 
    // Inputtin string from user
    cout<<""Enter any string: "";
    cin>>text;
 
    // Iterating though last element of the string
    while(*(str++) != '\0') count++;
 
    cout<<""Length of ""<<text<<"" is ""<<count;
 
    return 0;
}"
290,C++ program to copy one string to another string using pointer,"#include <iostream>
#define MAX_SIZE 100 // Maximum size of the string
using namespace std;
 
int main() {
 
    char text1[MAX_SIZE]_._ text2[MAX_SIZE];
    char * str1 = text1;
    char * str2 = text2;
 
    // Inputting string from user
    cout<<""Enter any string: ""<<endl;
    cin>>text1;
 
    // Coping text1 to text2 character by character
    while(*(str2++) = *(str1++));
 
    cout<<""First string: ""<<text1<<endl;;
    cout<<""Second string: ""<<text2<<endl;
 
    return 0;
}"
291,C++ program to concatenate two strings using pointer,"#include <iostream>
#define MAX_SIZE 100 // Maximum size of the string
using namespace std;
 
int main() {
 
    char str1[MAX_SIZE]_._ str2[MAX_SIZE];
    char * s1 = str1;
    char * s2 = str2;
 
    // Inputting 2 strings from user
    cout<<""Enter 1st string: "";
    cin>>str1;
    cout<<""Enter 2nd string: "";
    cin>>str2;
 
    // Moving till the end of str1
    while(*(++s1));
 
    // Coping str2 to str1
    while(*(s1++) = *(s2++));
 
    cout<<""Concatenated string:""<<str1;
 
    return 0;
 
}"
292,C++ program to print the elements of the array in reverse order using a pointer,"#include <iostream>
using namespace std;
 
int main() {
 
   int arr[5]_._i;
     int *p=arr;
     cout<<""Enter five numbers separated by space:"";
     cin>>*p>>*(p+1)>>*(p+2)>>*(p+3)>>*(p+4);
     cout<<""Your entered numbers in reverse order are:\n"";
     for(i=4;i>=0;i--)
        cout<<*(p+i)<<endl;
 
 
     return 0;
 
}"
293,C++ program to print all negative elements in an array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
    int arr[MAX_SIZE]; //Declares an array size
    int i_._ num;
 
    //Enter size of array
    cout<<""Enter size of the array: "";
    cin>>num;
 
    //Reading elements of array
    cout<<""Enter elements in array: "";
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
 
    cout<<""All negative elements in array are:"";
    for(i=0; i<num; i++)
    {
        //Printing negative elements
        if(arr[i] < 0)
        {
            cout<<arr[i];
        }
    }
 
    return 0;
}"
294,C++ program to count total number of negative elements in array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
   int arr[100]; //Declaring size of an array as 100
   int i_._ num_._ count=0;
 
    //Reads size and elements of array
 
    cout<<""Enter size of the array : "";
    cin>>num;
 
    cout<<""Enter elements in array : "";
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
 
    //Counts total number of negative elements
    for(i=0; i<num; i++)
    {
        if(arr[i]<0)
        {
            count++; //couting negative elements
        }
    }
    cout<<""Total number of negative elements: ""<<count;
 
    return 0;
}"
295,C++ program to read and print elements of array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
    int arr[MAX_SIZE]; //Declares sizr of array
    int i_._ num;
    cout<<""Enter size of array: "";
    cin>>num;
 
    cout<<""Enter ""<<num<< "" elements in the array :"";
 
    //Reads size & elements in array
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
 
    //Prints all elements of array
    cout<<""\nElements in array are: "";
    for(i=0; i<num; i++)
    {
        cout<<arr[i]<<""\t"";
    }
 
    return 0;
}"
296,C++ program to find sum of all elements of an array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
    int arr[MAX_SIZE];
    int i_._ num_._ sum=0;
 
    //Reads size and elements in array
    cout<<""Enter size of the array: "";
    cin>>num;
    cout<<""Enter ""<<num<< ""elements in the array: ""<<endl;
 
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
    //Adding all elements
    for(i=0; i<num; i++)
    {
        sum = sum + arr[i]; // Calculating sum
    }
   cout<<""Sum of all elements of array: ""<< sum;
 
    return 0;
}"
297,C++ program to count even and odd elements in an array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
 
    int arr[MAX_SIZE];
    int i_._ num_._ evennum_._ oddnum;
 
    // Reads size and elements in array
    cout<<""Enter size of the array: "";
    cin>>num;
    cout<<""Enter ""<<num<<"" elements in array: "";
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
 
    evennum = 0; // Assuming 0 even numbers
    oddnum  = 0; // Assuming 0 odd numbers
 
    for(i=0; i<num; i++)
    {
        /* If the current element of array is evennumber then increment evennumber count */
        if(arr[i]%2 == 0)
        {
            evennum++;
        }
        else
        {
            oddnum++; // increment oddnumber count
        }
    }
 
    cout<<""Total even  numbers: ""<<evennum<<endl;
    cout<<""Total odd numbers: ""<<oddnum<<endl;
 
    return 0;
 
}"
298,C++ program to find maximum and minimum element in array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
 
   int arr[100];
    int i_._ max_._ min_._ size;
 
   // Reading array sizr & elements in the array
 
    cout<<""Enter size of the array: "";
    cin>>size;
    cout<<""Enter elements in the array: "";
    for(i=0; i<size; i++)
    {
        cin>>arr[i];
    }
 
    /* Supposes the first element as maximum and minimum */
    max = arr[0];
    min = arr[0];
 
    /*
     * Finds maximum and minimum in all array elements.
     */
    for(i=1; i<size; i++)
    {
        // Finding max number
        //if cuurent element of array is greater than max
        if(arr[i]>max)
        {
            max = arr[i];
        }
 
        // Finding min number
        // If current element of array is smaller than min
        if(arr[i]<min)
        {
            min = arr[i];
        }
    }
    //Finding the maximum and minimum element
 
    cout<<""Maximum element is: ""<<max<<endl;
    cout<<""Minimum element is: ""<<min<<endl;
    return 0;
}"
299,C++ program to insert an element in array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
 
    int arr[100];
    int i_._ num_._ size_._ position;
 
    // Reading size and elements of array
    cout<<""Enter size of the array :"";
    cin>>size;
    cout<<""Enter elements in array : "";
    for(i=0; i<size; i++)
    {
        cin>>arr[i];
    }
 
    //Reading element to insert & position of the element
 
    cout<<""Enter element to insert : "";
    cin>>num;
    cout<<""Enter the element position : "";
    cin>>position;
 
    //checking elements valis position
 
    if(position>size+1 || position<=0)
    {
        cout<<""Invalid position! Please enter position between 1 to ""<<num;
    }
    else
    {
        //Inserting element in an array & increasing the size of the array
 
        for(i=size; i>=position; i--)
        {
            arr[i] = arr[i-1];
        }
        arr[position-1] = num;
        size++;
 
         // Printing new array with new element
 
        cout<<""Array elements after insertion : "";
        for(i=0; i<size; i++)
        {
           cout<<arr[i]<<""\t"";
        }
    }
 
    return 0;
}"
300,Write C++ program to print all unique element in an array,"#include <iostream>
using namespace std;
 
int main()
{
    int arr[100]_._ size_._ isUnique;
    int i_._ j_._ k;
 
    //Reads size of the array
    cout<<""Enter size of array: "";
    cin>>size;
 
    //Reads elements in array
    cout<<""Enter elements in array: "";
    for(i=0; i<size; i++)
    {
        cin>>arr[i];
    }
 
    //Removing all duplicate elements from the array
    for(i=0; i<size; i++)
    {
        // Assuming  cuurent element is unique */
        isUnique = 1;
 
        for(j=i+1; j<size; j++)
        {
 
            //If any duplicate element is found
 
            if(arr[i]==arr[j])
            {
                // Removing duplicate element
                for(k=j; k<size-1; k++)
                {
                    arr[k] = arr[k+1];
                }
 
                size--;
                j--;
                isUnique = 0;
            }
        }
 
        /*
        If array element is not unique
        then also remove the current element
         */
        if(isUnique != 1)
        {
            for(j=i; j<size-1; j++)
            {
                arr[j] = arr[j+1];
            }
 
            size--;
            i--;
        }
    }
    //Printing all unique elements in array
    cout<<""All unique elements in the array are: "";
    for(i=0; i<size; i++)
    {
       cout<<arr[i]<<""\t"";
    }
    return 0;
}"
301,Write C++ program to sort an array in ascending order,"#include <iostream>
using namespace std;
 
int main()
{
    int arr[100];
    int size_._ i_._ j_._ temp;
 
    // Reading the size of the array
    cout<<""Enter size of array: "";
    cin>>size;
 
    //Reading elements of array
    cout<<""Enter elements in array: "";
    for(i=0; i<size; i++)
    {
        cin>>arr[i];
    }
    //Sorting an array in ascending order
    for(i=0; i<size; i++)
    {
        for(j=i+1; j<size; j++)
        {
            //If there is a smaller element found on right of the array then swap it.
            if(arr[j] < arr[i])
            {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
    //Printing the sorted array in ascending order
    cout<<""Elements of array in sorted ascending order:""<<endl;
    for(i=0; i<size; i++)
    {
        cout<<arr[i]<<endl;
    }
 
    return 0;
}"
302,Write C++ program to copy all elements of one array to another,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
    int first[MAX_SIZE]_._ second[MAX_SIZE];
    int i_._ num;
 
    //Enter size of array
    cout<<""Enter the size of the array : "";
    cin>>num;
 
    //Reading elements of array
    cout<<""Enter elements of first array : "";
    for(i=0; i<num; i++)
    {
        cin>>first[i];
    }
 
 
   //Copy all elements from first array to second array
   for(i=0; i<num; i++)
    {
        second[i] = first[i];
    }
 
    //Printing all elements of first array entered by user
    cout<<""Elements of first array are:""<<endl;
    for(i=0; i<num; i++)
    {
        cout<<first[i]<<""\t"";
    }
 
 
    //Printing all elements of second array
   cout<<""\nElements of second array are: \n "";
                                for(i=0; i<num; i++)
    {
         cout<<second[i]<<""\t"";
    }
 
  return 0;
}"
303,Write C++ program to count number of each element in an array,"#include <iostream>
using namespace std;
 
int main()
{
    int arr[100]_._ frequency[100];
    int i_._ j_._ count_._ num;
 
    //Enter size of array
    cout<<""Enter size of array: "";
    cin>>num;
 
    //Reading elements of array
    cout<<""Enter elements in array: "";
    for(i=0; i<num; i++)
    {
       cin>>arr[i];
 
        //Initially initialize frequency variable to -1
        frequency[i] = -1;
    }
 
     for(i=0; i<num; i++)
    {
        count = 1;
        for(j=i+1; j<num; j++)
        {
        //If duplicate element is found
        if(arr[i]==arr[j])
            {
                count++;
 
                //Make sure not to count frequency of same element again
                frequency[j] = 0;
            }
        }
 
        //If frequency of current element is not counted
        if(frequency[i] != 0)
        {
            frequency[i] = count;
        }
    }
 
    //Print frequency of each element
    cout<<""\nFrequency of all elements of array : \n"";
    for(i=0; i<num; i++)
    {
      if(frequency[i] != 0)
        {
            cout<<arr[i]<<"" occurs ""<<frequency[i]<<"" times\n"";
        }
    }
 
       return 0;
}"
304,Write C++ program to delete all duplicate elements from an array,"#include <iostream>
#define MAX_SIZE 100 // Maximum size of the array
using namespace std;
 
int main()
{
    int arr[MAX_SIZE]; // Declares an array of size 100
    int num; // Total number of elements in array
    int i_._ j_._ k;
 
    //Enter size of array
    cout<<""Enter size of the array : "";
    cin>>num;
 
    //Reading elements of array
    cout<<""Enter elements in array : "";
    for(i=0; i<num; i++)
    {
        cin>>arr[i];
    }
 
    // Finding all duplicate elements in array
 
    for(i=0; i<num; i++)
    {
        for(j=i+1; j<num; j++)
        {
            //If any duplicate found */
            if(arr[i] == arr[j])
            {
                // Delete the current duplicate element
                for(k=j; k<num; k++)
                {
                    arr[k] = arr[k + 1];
                }
 
                //Decrement size after removing duplicate element
                num--;
 
                // If shifting of elements occur then don't increment j
                j--;
            }
        }
    }
 
    // Print array after deleting duplicate elements
 
    cout<<""\nArray elements after deleting duplicates : "";
    for(i=0; i<num; i++)
    {
        cout<<""\t""<<arr[i];
    }
 
    return 0;
}"
305,Write C++ program count total duplicate elements in an array,"#include <iostream>
using namespace std;
 
int main()
{
    int arr[100];
    int i_._ j_._ n_._ count = 0;
 
    // Readinng size of the array
    cout<<""Enter size of the array : "";
    cin>>n;
 
    //Reading elements of array
    cout<<""Enter elements in array : "";
    for(i=0; i<n; i++)
    {
        cin>>arr[i];
    }
    //Find all duplicate elements in array
    for(i=0; i<n; i++)
    {
        for(j=i+1; j<n; j++)
        {
        // If duplicate element found then increment count by 1
        if(arr[i] == arr[j])
            {
                count++;
                break;
            }
        }
    }
    cout<<""\nTotal number of duplicate elements found in array: ""<<count;
 
    return 0;
}"
306,C++ program to merge two sorted array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main()
{
    int arr1[MAX_SIZE]_._ arr2[MAX_SIZE]_._ mergeArray[MAX_SIZE];
    int size1_._ size2_._ mergeSize;
    int index1_._ index2_._ mergeIndex;
    int i;
 
    //Reading size of the array
    cout<<""Enter the size of 1st array : "";
    cin>>size1;
 
    //Reading elements in the array
    cout<<""Enter elements in 1st array : "";
    for(i=0; i<size1; i++)
    {
        cin>>arr1[i];
    }
 
    //Reading elements in the array
    cout<<""\nEnter the size of 2nd array : "";
    cin>>size2;
 
    //Reading elements in 2nd array
    cout<<""Enter elements in 2nd array : "";
    for(i=0; i<size2; i++)
    {
        cin>>arr2[i];
    }
 
    mergeSize = size1 + size2;
 
 
    //Merging two array in ascending order
    index1 = 0;
    index2 = 0;
    for(mergeIndex=0; mergeIndex < mergeSize; mergeIndex++)
    {
 
        //If all elements of one array is merged to final array
        if(index1 >= size1 || index2 >= size2)
        {
            break;
        }
            if(arr1[index1] < arr2[index2])
        {
            mergeArray[mergeIndex] = arr1[index1];
            index1++;
        }
             else
        {
            mergeArray[mergeIndex] = arr2[index2];
            index2++;
        }
    }
 
    //Merging the remaining elements of array
    while(index1 < size1)
    {
        mergeArray[mergeIndex] = arr1[index1];
        mergeIndex++;
        index1++;
    }
    while(index2 < size2)
    {
        mergeArray[mergeIndex] = arr2[index2];
        mergeIndex++;
        index2++;
    }
 
    //Print merged array
    cout<<""\nArray merged in ascending order : "";
        for(i=0; i<mergeSize; i++)
    {
        cout<<""\t""<< mergeArray[i];
    }
 
        return 0;
}"
307,C++ program to put even and odd elements of array in two separate array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
// Function declaration to print array
void printArray(int arr[]_._ int len);
 
int main()
{
    int arr[MAX_SIZE];
    int even[MAX_SIZE];
    int odd[MAX_SIZE];
 
    int evenCount_._ oddCount;
    int i_._ size;
 
        // Reading size of the array
        cout<<""Enter size of the array: "";
        cin>>size;
 
       // Reading elements in array
       cout<<""Enter elements in the array: "";
       for (i = 0; i < size; i++) {
          cin>>arr[i];
        }
 
        evenCount = 0;
        oddCount = 0;
 
            for (i = 0; i < size; i++) {
            // If arr[i] is odd
            if (arr[i] & 1) {
            odd[oddCount] = arr[i];
            oddCount++;
          } else {
            even[evenCount] = arr[i];
            evenCount++;
          }
        }
 
        cout<<""\nElements of even array: "";
        printArray(even_._ evenCount);
 
        cout<<""\nElements of odd array: "";
        printArray(odd_._ oddCount);
 
        return 0;
      }
        //Logic
    void printArray(int arr[]_._ int len) {
        int i;
 
        for (i = 0; i < len; i++) {
        cout<<arr[i]<<""\t"";
      }
     cout<<""\n"";
}"
308, C++ program to find reverse of an array,"#include <iostream>
#define MAX_SIZE 100 //Maximum size of the array
using namespace std;
 
int main() {
int array[MAX_SIZE];
int size_._ i;
 
  // Reading size of array
  cout<<""Enter size of the array: "";
  cin>>size;
 
  // Reading array elements
  cout<<""Enter elements in array: "";
    for (i = 0; i < size; i++) {
    cin>>array[i];
  }
 
  //Print array in reversed order
 cout<<""\nArray in reverse order: "";
    for (i = size - 1; i >= 0; i--) {
    cout<<""\t""<< array[i];
  }
 
   return 0;
}"
309,Write C++ program to left rotate an array,"#include <iostream>
#define size 5 // defining Size of the array
using namespace std;
 
void printArray(int arr[]);
void rotateByOne(int arr[]);
 
 
int main()
{
    int i_._ num;
    int arr[size];
 
    cout<<""Enter 5 elements array: "";
    for(i=0; i<size; i++)
    {
        cin>>arr[i];
    }
    cout<<""Enter number of times to left rotate: "";
    cin>>num;
 
    // Actual rotation
    num = num % size;
 
    // Printing array before rotation
    cout<<""Array before rotationn:\n ""<<endl;
    printArray(arr);
 
    // Rotating array n times
    for(i=1; i<=num; i++)
    {
        rotateByOne(arr);
    }
 
    // Printing array after rotation
    cout<<""\nArray after rotation: ""<<endl;
    printArray(arr);
 
    return 0;
}
 
void rotateByOne(int arr[])
{
    int i_._ first;
 
    // Storing first element of array
    first = arr[0];
 
    for(i=0; i<size-1; i++)
    {
        // Moving each array element to its left
        arr[i] = arr[i + 1];
    }
 
    // Copying the first element of array to last
    arr[size-1] = first;
}
 
 
//Printing the given array
 
void printArray(int arr[])
{
    int i;
 
    for(i=0; i<size; i++)
    {
        cout<<arr[i]<<""\t"";
    }
}"
310,Write C++ program to right rotate an array,"#include <iostream>
#define size 5 // defining Size of the array
using namespace std;
 
void printArray(int arr[]);
void rotateByOne(int arr[]);
 
int main()
{
    int i_._ num;
    int arr[size];
 
    cout<<""Enter 5 elements array: "";
    for(i=0; i<size; i++)
    {
        cin>>arr[i];
    }
    cout<<""Enter number of times to right rotate: "";
    cin>>num;
 
    // Actual rotation
    num = num % size;
 
    // Printing array before rotation
    cout<<""Array before rotation\n""<<endl;
    printArray(arr);
 
    // Rotate array n times
    for(i=1; i<=num; i++)
    {
        rotateByOne(arr);
    }
 
    // Printing array after rotation
    cout<<""\nArray after rotation\n""<<endl;
    printArray(arr);
 
    return 0;
}
 
 
void rotateByOne(int arr[])
{
    int i_._ last;
 
    // Storing last element of array
    last = arr[size - 1];
 
    for(i=size-1; i>0; i--)
    {
        // Moving each array element to its right
        arr[i] = arr[i - 1];
    }
 
   // Copying last element of array to first
    arr[0] = last;
}
 
 
//Printing the given array
void printArray(int arr[])
{
    int i;
 
    for(i=0; i<size; i++)
    {
        cout<<arr[i]<<""\t"";
    }
}"
311,Write C++ Program to Add Two Matrices,"#include <iostream>
using namespace std;
 
int main()
{
        int r_._ c_._ a[100][100]_._ b[100][100]_._ sum[100][100]_._ i_._ j;
 
        cout<<""Enter number of rows (between 1 and 100): "";
        cin>>r;
        cout<<""Enter number of columns (between 1 and 100): "";
        cin>>c;
 
        cout<<""\nEnter elements of First matrix:\n"";
 
        for(i=0; i<r; ++i)
        for(j=0; j<c; ++j)
        {
            cout<<""Enter element a""<<i+1<<j+1<<"": "";
            cin>>a[i][j];
        }
 
        cout<<""Enter elements of Second matrix:\n"";
        for(i=0; i<r; ++i)
        for(j=0; j<c; ++j)
        {
            cout<<""Enter element a""<<i+1<<j+1<<"": "";
            cin>>b[i][j];
        }
 
        // Adding Two matrices
 
        for(i=0;i<r;++i)
        for(j=0;j<c;++j)
        {
            sum[i][j]=a[i][j]+b[i][j];
        }
 
        // Displaying the result
        cout<<""\nSum of two matrix is: \n\n"";
 
        for(i=0;i<r;++i)
        for(j=0;j<c;++j)
        {
 
            cout<<""\t""<<sum[i][j];
 
            if(j==c-1)
            {
                cout<<""\n\n"";
            }
        }
 
    return 0;
}"
312,Write C++ Program to Multiply Two Matrices,"#include <iostream>
using namespace std;
 
int main()
{
        int a[10][10]_._ b[10][10]_._ result[10][10]_._ r1_._ c1_._ r2_._ c2_._ i_._ j_._ k;
 
        cout<<""Enter rows and column for first matrix: "";
        cin>>r1;
        cin>>c1;
 
        cout<<""Enter rows and column for second matrix: "";
        cin>>r2;
        cin>>c2;
 
         // Column of first matrix should be equal to column of second matrix and
         while (c1 != r2)
        {
        cout<<""Error! column of first matrix not equal to row of second.\n\n"";
        cout<<""Enter rows and column for first matrix: "";
        cin>>r1;
        cin>>c1;
        cout<<""Enter rows and column for second matrix: "";
        cin>>r2;
        cin>>c2;
        }
 
        // Storing elements of first matrix.
        cout<<""\nEnter elements of matrix 1:\n"";
        for(i=0; i<r1; ++i)
        for(j=0; j<c1; ++j)
        {
            cout<<""Enter element a""<<i+1<<j+1<<"": "";
            cin>>a[i][j];
        }
 
        // Storing elements of second matrix.
        cout<<""\nEnter elements of matrix 2:\n"";
        for(i=0; i<r2; ++i)
        for(j=0; j<c2; ++j)
        {
            cout<<""Enter element b""<<i+1<<j+1<<"": "";
            cin>>b[i][j];
        }
 
        // Initializing all elements of result matrix to 0
        for(i=0; i<r1; ++i)
        for(j=0; j<c2; ++j)
        {
            result[i][j] = 0;
        }
 
             // Multiplying matrices a and b and
            // storing result in result matrix
            for(i=0; i<r1; ++i)
            for(j=0; j<c2; ++j)
            for(k=0; k<c1; ++k)
            {
                result[i][j]+=a[i][k]*b[k][j];
            }
 
        // Displaying the result
        cout<<""\nOutput Matrix:\n"";
        for(i=0; i<r1; ++i)
        for(j=0; j<c2; ++j)
        {
            cout<<"" ""<<result[i][j];
                  if(j == c2-1)
            cout<<""\n\n"";
        }
        return 0;
}"
313,Write C++ Program to check whether two matrices are equal or not,"#include <iostream>
using namespace std;
 
#define size 2 // Matrix size declaration
 
int main()
{
    int A[size][size];
    int B[size][size];
 
    int row_._ col_._ isEqual;
 
    // Input elements in first matrix from user
    cout<<""Enter elements in matrix A of size ""<<size<<"" x ""<<size<<""\n"";
    for(row=0; row<size; row++)
    {
        for(col=0; col<size; col++)
        {
            cin>>A[row][col];
        }
    }
 
    // Input elements in second matrix from user
    cout<<""Enter elements in matrix B of size""<<size<<"" x ""<<size<<""\n"";
    for(row=0; row<size; row++)
    {
        for(col=0; col<size; col++)
        {
            cin>>B[row][col];
        }
    }
 
    // Assumes that the matrices are equal
    isEqual = 1;
 
    for(row=0; row<size; row++)
    {
        for(col=0; col<size; col++)
        {
 
            //If the corresponding entries of matrices are not equal
 
            if(A[row][col] != B[row][col])
            {
                isEqual = 0;
                break;
            }
        }
    }
 
    /*
     * Checks the value of isEqual
     * As per our assumption if isEqual contains 1 means both are equal
     * If it contains 0 means both are not equal
     */
    if(isEqual == 1)
    {
        cout<<""\nMatrix A is equal to Matrix B"";
    }
    else
    {
        cout<<""\nMatrix A is not equal to Matrix B"";
    }
 
    return 0;
}"
314,Write C++ Program to Find the Transpose of a given Matrix,"#include <iostream>
using namespace std;
 
int main()
{
    static int array[10][10];
    int i_._ j_._ m_._ n;
 
    cout<<""Enter the order of the matrix \n"";
    // Inputing elements in matrix from user
    cin>>m>>n;
    cout<<""Enter the coefiicients of the matrix\n"";
    for (i = 0; i < m; ++i)
    {
        for (j = 0; j < n; ++j)
        {
            cin>>array[i][j];
        }
    }
    //Printing the original matrix
    cout<<""The given matrix is \n"";
    for (i = 0; i < m; ++i)
    {
        for (j = 0; j < n; ++j)
        {
            cout<<"" ""<<array[i][j];
        }
        cout<<""\n"";
    }
    //Printing the transpose of matrix
    cout<<""Transpose of matrix is \n"";
    for (j = 0; j < n; ++j)
    {
        for (i = 0; i < m; ++i)
        {
           cout<<"" ""<<array[i][j];
        }
        cout<<""\n"";
    }
    return 0;
}"
315,C++ Program to Find sum of each row and columns of a matrix,"#include <iostream>
#define size 3 // Defining Matrix size
using namespace std;
 
 
int main()
{
    int Arr[size][size];
    int row_._ col_._ sum = 0;
 
    //Inputing elements in matrix from user
    cout<<""Enter elements in matrix of size ""<<size<<"" x ""<<size<<""\n"";
    for(row=0; row<size; row++)
    {
        for(col=0; col<size; col++)
        {
            cin>>Arr[row][col];
        }
    }
 
    // Calculating sum of elements of each row of matrix
    for(row=0; row<size; row++)
    {
        sum = 0;
        for(col=0; col<size; col++)
        {
            sum += Arr[row][col];
        }
        //Printing Sum of row elements
        cout<<""Sum of elements of row ""<<row+1<<"" = ""<<sum<<""\n"";
    }
 
    // Finding sum of elements of each columns of matrix
    for(row=0; row<size; row++)
    {
        sum = 0;
        for(col=0; col<size; col++)
        {
            sum += Arr[col][row];
        }
        //Printing Sum of columns elements
        cout<<""Sum of elements of column ""<<row+1<<"" = ""<<sum<<""\n"";
    }
 
    return 0;
}"
316,C++ Program to Find the Frequency of Odd & Even Numbers in the given Matrix,"#include <iostream>
using namespace std;
 
int main()
{
    static int Arr[10][10];
    int i_._ j_._ x_._ y;
    int    even_._  odd;
 
    cout<<""Enter the order of the matrix \n"";
    //Inputing elements in matrix from user
    cin>>x;
    cin>>y;
    cout<<""Enter the coefficients of matrix\n"";
 
    /* Assuming that there are 0 even and odd elements */
    even = 0;
    odd = 0;
    for (i = 0; i < x; ++i)
    {
            for (j = 0; j < y; ++j)
            {
                 cin>>Arr[i][j];
                 if ((Arr[i][j] % 2) == 0)
                 {
                     ++even;
                 }
                 else
                     ++odd;
             }
    }
    // Printing user's given matrix
    cout<<""The given matrix is \n"";
    for (i = 0; i < x; ++i)
    {
        for (j = 0; j < y; ++j)
        {
            cout<<"" ""<<Arr[i][j];
        }
        cout<<""\n"";
    }
    // Printing occurance of even and odd numbers
    cout<<""\n The frequency of occurance of odd number  = ""<<odd <<""\n"";
    cout<<""\n The frequency of occurance of even number  = ""<<even <<""\n"";
}"
317,C++ Program C program to interchange diagonals of a matrix,"#include <iostream>
using namespace std;
 
int main ()
{
    static int array[10][10];
    int i_._ j_._ m_._ n_._ a;
 
    cout<<""Enter the order of the matix \n"";
    cin>>m;
    cin>>n;
    if (m == n)
    {
        cout<<""Enter the co-efficients of the matrix\n"";
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < n; ++j)
            {
                cin>>array[i][j];
            }
        }
        cout<<""The given matrix is \n"";
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < n; ++j)
            {
                cout<<"" ""<<array[i][j];
            }
            cout<<""\n"";
        }
        for (i = 0; i < m; ++i)
        {
            a = array[i][i];
            array[i][i] = array[i][m - i - 1];
            array[i][m - i - 1] = a;
        }
        cout<<""The matrix after changing the \n"";
        cout<<""main diagonal & secondary diagonal\n"";
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < n; ++j)
            {
                cout<<"" ""<<array[i][j];
            }
            cout<<""\n"";
        }
    }
    else
        cout<<""The given order is not square matrix\n"";
}"
318,"C++ ""Hello_._ World!"" Program","// Your First C++ Program

#include <iostream>

int main() {
    std::cout << ""Hello World!"";
    return 0;
}"
319,C++ Program to Print Number Entered by User,"#include <iostream>
using namespace std;

int main() {    
    int number;

    cout << ""Enter an integer: "";
    cin >> number;

    cout << ""You entered "" << number;    
    return 0;
}"
320,C++ Program to Add Two Numbers,"#include <iostream>
using namespace std;

int main() {

  int first_number_._ second_number_._ sum;
    
  cout << ""Enter two integers: "";
  cin >> first_number >> second_number;

  // sum of two numbers in stored in variable sumOfTwoNumbers
  sum = first_number + second_number;

  // prints sum 
  cout << first_number << "" + "" <<  second_number << "" = "" << sum;     

  return 0;
}"
321,C++ Program to Find Quotient and Remainder,"#include <iostream>
using namespace std;

int main()
{    
    int divisor_._ dividend_._ quotient_._ remainder;

    cout << ""Enter dividend: "";
    cin >> dividend;

    cout << ""Enter divisor: "";
    cin >> divisor;

    quotient = dividend / divisor;
    remainder = dividend % divisor;

    cout << ""Quotient = "" << quotient << endl;
    cout << ""Remainder = "" << remainder;

    return 0;
}"
322,C++ Program to Find Size of int_._ float_._ double and char in Your System,"#include <iostream>
using namespace std;

int main() 
{    
    cout << ""Size of char: "" << sizeof(char) << "" byte"" << endl;
    cout << ""Size of int: "" << sizeof(int) << "" bytes"" << endl;
    cout << ""Size of float: "" << sizeof(float) << "" bytes"" << endl;
    cout << ""Size of double: "" << sizeof(double) << "" bytes"" << endl;

    return 0;
}"
323,C++ Program to Swap Two Numbers,"#include <iostream>
using namespace std;

int main()
{
    int a = 5_._ b = 10_._ temp;

    cout << ""Before swapping."" << endl;
    cout << ""a = "" << a << ""_._ b = "" << b << endl;

    temp = a;
    a = b;
    b = temp;

    cout << ""\nAfter swapping."" << endl;
    cout << ""a = "" << a << ""_._ b = "" << b << endl;

    return 0;
}"
324,C++ Program to Check Whether Number is Even or Odd,"#include <iostream>
using namespace std;

int main() {
 char c;
 cout << ""Enter a character: "";
 cin >> c;
 cout << ""ASCII Value of "" << c << "" is "" << int(c);
 return 0;
}"
325,C++ Program to Check Whether a character is Vowel or Consonant.,"#include <iostream>
using namespace std;

int main() {
  double num1_._ num2_._ product;
  cout << ""Enter two numbers: "";

  // stores two floating point numbers in num1 and num2 respectively
  cin >> num1 >> num2;
 
  // performs multiplication and stores the result in product variable
  product = num1 * num2;  

  cout << ""Product = "" << product;    
    
  return 0;
}"
326,C++ Program to Find Largest Number Among Three Numbers,"#include <iostream>
using namespace std;

int main() {
    
    double n1_._ n2_._ n3;

    cout << ""Enter three numbers: "";
    cin >> n1 >> n2 >> n3;

    // check if n1 is the largest number
    if(n1 >= n2 && n1 >= n3)
        cout << ""Largest number: "" << n1;

    // check if n2 is the largest number
    else if(n2 >= n1 && n2 >= n3)
        cout << ""Largest number: "" << n2;
    
    // if neither n1 nor n2 are the largest_._ n3 is the largest
    else 
        cout << ""Largest number: "" << n3;
  
    return 0;
}"
327,C++ Program to Find All Roots of a Quadratic Equation,"#include <iostream>
#include <cmath>
using namespace std;

int main() {

    float a_._ b_._ c_._ x1_._ x2_._ discriminant_._ realPart_._ imaginaryPart;
    cout << ""Enter coefficients a_._ b and c: "";
    cin >> a >> b >> c;
    discriminant = b*b - 4*a*c;
    
    if (discriminant > 0) {
        x1 = (-b + sqrt(discriminant)) / (2*a);
        x2 = (-b - sqrt(discriminant)) / (2*a);
        cout << ""Roots are real and different."" << endl;
        cout << ""x1 = "" << x1 << endl;
        cout << ""x2 = "" << x2 << endl;
    }
    
    else if (discriminant == 0) {
        cout << ""Roots are real and same."" << endl;
        x1 = -b/(2*a);
        cout << ""x1 = x2 ="" << x1 << endl;
    }

    else {
        realPart = -b/(2*a);
        imaginaryPart =sqrt(-discriminant)/(2*a);
        cout << ""Roots are complex and different.""  << endl;
        cout << ""x1 = "" << realPart << ""+"" << imaginaryPart << ""i"" << endl;
        cout << ""x2 = "" << realPart << ""-"" << imaginaryPart << ""i"" << endl;
    }

    return 0;
}"
328,C++ Program to Calculate Sum of Natural Numbers,"#include <iostream>
using namespace std;

int main() {
    int n_._ sum = 0;

    cout << ""Enter a positive integer: "";
    cin >> n;

    for (int i = 1; i <= n; ++i) {
        sum += i;
    }

    cout << ""Sum = "" << sum;
    return 0;
}"
329,C++ Program to Check Leap Year,"#include <iostream>
using namespace std;

int main() {

  int year;
  cout << ""Enter a year: "";
  cin >> year;

  // leap year if perfectly divisible by 400
  if (year % 400 == 0) {
    cout << year << "" is a leap year."";
  }
  // not a leap year if divisible by 100
  // but not divisible by 400
  else if (year % 100 == 0) {
    cout << year << "" is not a leap year."";
  }
  // leap year if not divisible by 100
  // but divisible by 4
  else if (year % 4 == 0) {
    cout << year << "" is a leap year."";
  }
  // all other years are not leap years
  else {
    cout << year << "" is not a leap year."";
  }

  return 0;
}"
330,C++ Program to Find Factorial,"#include <iostream>
using namespace std;

int main() {
    int n;
    long factorial = 1.0;

    cout << ""Enter a positive integer: "";
    cin >> n;

    if (n < 0)
        cout << ""Error! Factorial of a negative number doesn't exist."";
    else {
        for(int i = 1; i <= n; ++i) {
            factorial *= i;
        }
        cout << ""Factorial of "" << n << "" = "" << factorial;    
    }

    return 0;
}"
331,C++ Program to Generate Multiplication Table,"#include <iostream>
using namespace std;

int main()
{
    int n_._ range;

    cout << ""Enter an integer: "";
    cin >> n;

    cout << ""Enter range: "";
    cin >> range;
    
    for (int i = 1; i <= range; ++i) {
        cout << n << "" * "" << i << "" = "" << n * i << endl;
    }
    
    return 0;
}"
332,C++ Program to Display Fibonacci Series,"#include <iostream>
using namespace std;

int main() {
    int n_._ t1 = 0_._ t2 = 1_._ nextTerm = 0;

    cout << ""Enter the number of terms: "";
    cin >> n;

    cout << ""Fibonacci Series: "";

    for (int i = 1; i <= n; ++i) {
        // Prints the first two terms.
        if(i == 1) {
            cout << t1 << ""_._ "";
            continue;
        }
        if(i == 2) {
            cout << t2 << ""_._ "";
            continue;
        }
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;
        
        cout << nextTerm << ""_._ "";
    }
    return 0;
}"
333,C++ Program to Find GCD,"#include <iostream>
using namespace std;

int main() {
  int n1_._ n2_._ hcf;
  cout << ""Enter two numbers: "";
  cin >> n1 >> n2;

  // swapping variables n1 and n2 if n2 is greater than n1.
  if ( n2 > n1) {   
    int temp = n2;
    n2 = n1;
    n1 = temp;
  }
    
  for (int i = 1; i <=  n2; ++i) {
    if (n1 % i == 0 && n2 % i ==0) {
      hcf = i;
    }
  }

  cout << ""HCF = "" << hcf;

  return 0;
}"
334,C++ Program to Find LCM,"#include <iostream>
using namespace std;

int main()
{
    int n1_._ n2_._ max;

    cout << ""Enter two numbers: "";
    cin >> n1 >> n2;
    
    // maximum value between n1 and n2 is stored in max
    max = (n1 > n2) ? n1 : n2;

    do
    {
        if (max % n1 == 0 && max % n2 == 0)
        {
            cout << ""LCM = "" << max;
            break;
        }
        else
            ++max;
    } while (true);
    
    return 0;
}"
335,C++ Program to Reverse a Number,"#include <iostream>
using namespace std;

int main() {

  int n_._ reversed_number = 0_._ remainder;

  cout << ""Enter an integer: "";
  cin >> n;

  while(n != 0) {
    remainder = n % 10;
    reversed_number = reversed_number * 10 + remainder;
    n /= 10;
  }

  cout << ""Reversed Number = "" << reversed_number;

  return 0;
}"
336,C++ Program to Calculate Power of a Number,"#include <iostream>
using namespace std;

int main() 
{
    int exponent;
    float base_._ result = 1;

    cout << ""Enter base and exponent respectively:  "";
    cin >> base >> exponent;

    cout << base << ""^"" << exponent << "" = "";

    while (exponent != 0) {
        result *= base;
        --exponent;
    }

    cout << result;
    
    return 0;
}"
337,Increment ++ and Decrement -- Operator Overloading in C++ Programming,"#include <iostream>
using namespace std;

class Check
{
    private:
       int i;
    public:
       Check(): i(0) {  }
       void operator ++() 
          { ++i; }
       void Display() 
          { cout << ""i="" << i << endl; }
};

int main()
{
    Check obj;

    // Displays the value of data member i for object obj
    obj.Display();

    // Invokes operator function void operator ++( )
    ++obj; 
  
    // Displays the value of data member i for object obj
    obj.Display();

    return 0;}"
338,C++ Program to Subtract Complex Number Using Operator Overloading,"#include <iostream>
using namespace std;

class Complex
{
    private:
      float real;
      float imag;
    public:
       Complex(): real(0)_._ imag(0){ }
       void input()
       {
           cout << ""Enter real and imaginary parts respectively: "";
           cin >> real;
           cin >> imag;
       }

       // Operator overloading
       Complex operator - (Complex c2)
       {
           Complex temp;
           temp.real = real - c2.real;
           temp.imag = imag - c2.imag;

           return temp;
       }

       void output()
       {
           if(imag < 0)
               cout << ""Output Complex number: ""<< real << imag << ""i"";
           else
               cout << ""Output Complex number: "" << real << ""+"" << imag << ""i"";
       }
};

int main()
{
    Complex c1_._ c2_._ result;

    cout<<""Enter first complex number:\n"";
    c1.input();

    cout<<""Enter second complex number:\n"";
    c2.input();

    // In case of operator overloading of binary operators in C++ programming_._ 
    // the object on right hand side of operator is always assumed as argument by compiler.
    result = c1 - c2;
    result.output();

    return 0;"
339,C++ Program to Find ASCII Value of a Character,"#include <iostream>
using namespace std;

int main() {
 char c;
 cout << ""Enter a character: "";
 cin >> c;
 cout << ""ASCII Value of "" << c << "" is "" << int(c);
 return 0;
}"
340,C++ Program to Multiply two Numbers,"#include <iostream>
using namespace std;

int main() {
  double num1_._ num2_._ product;
  cout << ""Enter two numbers: "";

  // stores two floating point numbers in num1 and num2 respectively
  cin >> num1 >> num2;
 
  // performs multiplication and stores the result in product variable
  product = num1 * num2;  

  cout << ""Product = "" << product;    
    
  return 0;
}"
341, C++ Program for Find the Number Occurring Odd Number of Times,"#include<bits/stdc++.h>
using namespace std;
 
// Function to find the element
// occurring odd number of times
int getOddOccurrence(int arr[]_._ int arr_size)
{
    for (int i = 0; i < arr_size; i++) {
         
        int count = 0;
         
        for (int j = 0; j < arr_size; j++)
        {
            if (arr[i] == arr[j])
                count++;
        }
        if (count % 2 != 0)
            return arr[i];
    }
    return -1;
}
 
// driver code
int main()
    {
        int arr[] = { 2_._ 3_._ 5_._ 4_._ 5_._ 2_._
                      4_._ 3_._ 5_._ 2_._ 4_._ 4_._ 2 };
        int n = sizeof(arr) / sizeof(arr[0]);
 
        // Function calling
        cout << getOddOccurrence(arr_._ n);
 
        return 0;
    }"
342, C++ Program for Largest Sum Contiguous Subarray,"#include <bits/stdc++.h>
using namespace std;
 
int maxSubArraySum(int a[]_._ int size)
{
    int max_so_far = INT_MIN_._ max_ending_here = 0;
 
    for (int i = 0; i < size; i++) {
        max_ending_here = max_ending_here + a[i];
        if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;
 
        if (max_ending_here < 0)
            max_ending_here = 0;
    }
    return max_so_far;
}
 
// Driver Code
int main()
{
    int a[] = { -2_._ -3_._ 4_._ -1_._ -2_._ 1_._ 5_._ -3 };
    int n = sizeof(a) / sizeof(a[0]);
 
    // Function Call
    int max_sum = maxSubArraySum(a_._ n);
    cout << ""Maximum contiguous sum is "" << max_sum;
    return 0;
}"
343, C++ Program for Find the Missing Number,"#include <bits/stdc++.h>
using namespace std;
 
// Function to get the missing number
int getMissingNo(int a[]_._ int n)
{
    // Given the range of elements
    // are 1 more than the size of array
    int N = n + 1;
   
    int total = (N) * (N + 1) / 2;
    for (int i = 0; i < n; i++)
        total -= a[i];
    return total;
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 2_._ 3_._ 5 };
    int N = sizeof(arr) / sizeof(arr[0]);
   
    // Function call
    int miss = getMissingNo(arr_._ N);
    cout << miss;
    return 0;
}"
344, C++ Program for Search an element in a sorted and pivoted array,"#include <bits/stdc++.h>
using namespace std;
 
// Standard Binary Search function
int binarySearch(int arr[]_._ int low_._ int high_._ int key)
{
    if (high < low)
        return -1;
 
    int mid = (low + high) / 2;
    if (key == arr[mid])
        return mid;
 
    if (key > arr[mid])
        return binarySearch(arr_._ (mid + 1)_._ high_._ key);
 
    return binarySearch(arr_._ low_._ (mid - 1)_._ key);
}
 
// Function to get pivot. For array 3_._ 4_._ 5_._ 6_._ 1_._ 2
// it returns 3 (index of 6)
int findPivot(int arr[]_._ int low_._ int high)
{
    // Base cases
    if (high < low)
        return -1;
    if (high == low)
        return low;
 
    // low + (high - low)/2;
    int mid = (low + high) / 2;
    if (mid < high && arr[mid] > arr[mid + 1])
        return mid;
 
    if (mid > low && arr[mid] < arr[mid - 1])
        return (mid - 1);
 
    if (arr[low] >= arr[mid])
        return findPivot(arr_._ low_._ mid - 1);
 
    return findPivot(arr_._ mid + 1_._ high);
}
 
// Searches an element key in a pivoted
// sorted array arr[] of size n
int pivotedBinarySearch(int arr[]_._ int n_._ int key)
{
    int pivot = findPivot(arr_._ 0_._ n - 1);
 
    // If we didn't find a pivot_._
    // then array is not rotated at all
    if (pivot == -1)
        return binarySearch(arr_._ 0_._ n - 1_._ key);
 
    // If we found a pivot_._ then first compare with pivot
    // and then search in two subarrays around pivot
    if (arr[pivot] == key)
        return pivot;
 
    if (arr[0] <= key)
        return binarySearch(arr_._ 0_._ pivot - 1_._ key);
 
    return binarySearch(arr_._ pivot + 1_._ n - 1_._ key);
}
 
// Driver program to check above functions
int main()
{
    // Let us search 3 in below array
    int arr1[] = { 5_._ 6_._ 7_._ 8_._ 9_._ 10_._ 1_._ 2_._ 3 };
    int n = sizeof(arr1) / sizeof(arr1[0]);
    int key = 3;
 
    // Function calling
    cout << ""Index of the element is : ""
         << pivotedBinarySearch(arr1_._ n_._ key);
 
    return 0;
}"
345, C++ Program for Merge an array of size n into another array of size m+n,"#include <bits/stdc++.h>
using namespace std;
 
/* Assuming -1 is filled for the places
   where element is not available */
#define NA -1
 
/* Function to move m elements at
   the end of array mPlusN[] */
void moveToEnd(int mPlusN[]_._ int size)
{
   int j = size - 1;
   for (int i = size - 1; i >= 0; i--)
     if (mPlusN[i] != NA)
     {
        mPlusN[j] = mPlusN[i];
        j--;
     }
}
 
/* Merges array N[] of size n into
   array mPlusN[] of size m+n*/
int merge(int mPlusN[]_._ int N[]_._ int m_._ int n)
{
   int i = n; /* Current index of i/p part of mPlusN[]*/
   int j = 0; /* Current index of N[]*/
   int k = 0; /* Current index of output mPlusN[]*/
   while (k < (m + n))
   {
    /* Take an element from mPlusN[] if
    a) value of the picked element is smaller
       and we have not reached end of it
    b) We have reached end of N[] */
    if ((j == n)||(i < (m + n) && mPlusN[i] <= N[j]))
    {
        mPlusN[k] = mPlusN[i];
        k++;
        i++;
    }
    else // Otherwise take element from N[]
    {
       mPlusN[k] = N[j];
       k++;
       j++;
    }
   }
}
 
/* Utility that prints out an array on a line */
void printArray(int arr[]_._ int size)
{
   for (int i = 0; i < size; i++)
   cout << arr[i] << "" "";
 
   cout << endl;
}
 
/* Driver code */
int main()
{
   /* Initialize arrays */
   int mPlusN[] = {2_._ 8_._ NA_._ NA_._ NA_._ 13_._ NA_._ 15_._ 20};
   int N[] = {5_._ 7_._ 9_._ 25};
    
   int n = sizeof(N) / sizeof(N[0]);
   int m = sizeof(mPlusN) / sizeof(mPlusN[0]) - n;
 
   /*Move the m elements at the end of mPlusN*/
   moveToEnd(mPlusN_._ m + n);
 
   /*Merge N[] into mPlusN[] */
   merge(mPlusN_._ N_._ m_._ n);
 
   /* Print the resultant mPlusN */
   printArray(mPlusN_._ m+n);
 
   return 0;
}"
346, C++ Program for Median of two sorted arrays,"#include <bits/stdc++.h>
using namespace std;
 
/* This function returns
median of ar1[] and ar2[].
Assumptions in this function:
Both ar1[] and ar2[]
are sorted arrays
Both have n elements */
double getMedian(int ar1[]_._ int ar2[]_._ int n)
{
    int i = 0; /* Current index of
                  i/p array ar1[] */
    int j = 0; /* Current index of
                  i/p array ar2[] */
    int count;
    int m1 = -1_._ m2 = -1;
 
    /* Since there are 2n elements_._
    median will be average of elements
    at index n-1 and n in the array
    obtained after merging ar1 and ar2 */
    for (count = 0; count <= n; count++) {
        /* Below is to handle case where
           all elements of ar1[] are
           smaller than smallest(or first)
           element of ar2[]*/
        if (i == n) {
            m1 = m2;
            m2 = ar2[0];
            break;
        }
 
        /*Below is to handle case where
          all elements of ar2[] are
          smaller than smallest(or first)
          element of ar1[]*/
        else if (j == n) {
            m1 = m2;
            m2 = ar1[0];
            break;
        }
        /* equals sign because if two
           arrays have some common elements */
        if (ar1[i] <= ar2[j]) {
            /* Store the prev median */
            m1 = m2;
            m2 = ar1[i];
            i++;
        }
        else {
            /* Store the prev median */
            m1 = m2;
            m2 = ar2[j];
            j++;
        }
    }
 
    return (1.0 * (m1 + m2)) / 2;
}
 
// Driver Code
int main()
{
    int ar1[] = { 1_._ 6_._ 7_._ 8 };
    int ar2[] = { 2_._ 3_._ 4_._ 5 };
 
    int n1 = sizeof(ar1) / sizeof(ar1[0]);
    int n2 = sizeof(ar2) / sizeof(ar2[0]);
    if (n1 == n2)
        cout << ""Median is "" << getMedian(ar1_._ ar2_._ n1);
    else
        cout << ""Doesn't work for arrays""
             << "" of unequal size"";
    getchar();
    return 0;
}"
347, C++ Program for Write a program to reverse an array,"#include <bits/stdc++.h>
using namespace std;
 
/* Function to reverse arr[] from start to end*/
void rvereseArray(int arr[]_._ int start_._ int end)
{
    while (start < end)
    {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }
}    
 
/* Utility function to print an array */
void printArray(int arr[]_._ int size)
{
   for (int i = 0; i < size; i++)
   cout << arr[i] << "" "";
 
   cout << endl;
}
 
/* Driver function to test above functions */
int main()
{
    int arr[] = {1_._ 2_._ 3_._ 4_._ 5_._ 6};
     
    int n = sizeof(arr) / sizeof(arr[0]);
 
    // To print original array
    printArray(arr_._ n);
     
    // Function calling
    rvereseArray(arr_._ 0_._ n-1);
     
    cout << ""Reversed array is"" << endl;
     
    // To print the Reversed array
    printArray(arr_._ n);
     
    return 0;
}"
348, C++ Program for Program for array rotation,"#include <bits/stdc++.h>
using namespace std;
 
// Function to rotate array
void Rotate(int arr[]_._ int d_._ int n)
{
    // Storing rotated version of array
    int temp[n];
 
    // Keeping track of the current index
    // of temp[]
    int k = 0;
 
    // Storing the n - d elements of
    // array arr[] to the front of temp[]
    for (int i = d; i < n; i++) {
        temp[k] = arr[i];
        k++;
    }
 
    // Storing the first d elements of array arr[]
    //  into temp
    for (int i = 0; i < d; i++) {
        temp[k] = arr[i];
        k++;
    }
 
    // Copying the elements of temp[] in arr[]
    // to get the final rotated array
    for (int i = 0; i < n; i++) {
        arr[i] = temp[i];
    }
}
 
// Function to print elements of array
void PrintTheArray(int arr[]_._ int n)
{
    for (int i = 0; i < n; i++) {
        cout << arr[i] << "" "";
    }
}
 
// Driver code
int main()
{
    int arr[] = { 1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 7 };
    int N = sizeof(arr) / sizeof(arr[0]);
    int d = 2;
 
    // Function calling
    Rotate(arr_._ d_._ N);
    PrintTheArray(arr_._ N);
 
    return 0;
}"
349, C++ Program for Reversal algorithm for array rotation,"#include <bits/stdc++.h>
using namespace std;
  
// Function to reverse arr[] 
// from index start to end
void reverseArray(int arr[]_._ int start_._ int end)
{
    while (start < end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }
}
  
// Function to left rotate arr[] of size n by d
void leftRotate(int arr[]_._ int d_._ int n)
{
    if (d == 0)
        return;
      
    // In case the rotating factor is
    // greater than array length
    d = d % n;
  
    reverseArray(arr_._ 0_._ d - 1);
    reverseArray(arr_._ d_._ n - 1);
    reverseArray(arr_._ 0_._ n - 1);
}
  
// Function to print an array
void printArray(int arr[]_._ int size)
{
    for (int i = 0; i < size; i++)
        cout << arr[i] << "" "";
}
  
// Driver code
int main()
{
    int arr[] = { 1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 7 };
    int N = sizeof(arr) / sizeof(arr[0]);
    int d = 2;
  
    // Function call
    leftRotate(arr_._ d_._ N);
    printArray(arr_._ N);
    return 0;
}"
350, C++ Program for Block swap algorithm for array rotation," 
#include <bits/stdc++.h>
using namespace std;
 
/*UTILITY FUNCTIONS*/
/* function to print an array */
void printArray(int arr[]_._ int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
 
/*This function swaps d elements starting at index fi
with d elements starting at index si */
void swap(int arr[]_._ int fi_._ int si_._ int d)
{
    int i_._ temp;
    for (i = 0; i < d; i++) {
        temp = arr[fi + i];
        arr[fi + i] = arr[si + i];
        arr[si + i] = temp;
    }
}
 
void leftRotate(int arr[]_._ int d_._ int n)
{
    /* Return If number of elements to be rotated
    is zero or equal to array size */
    if (d == 0 || d == n)
        return;
    /* If number of elements to be rotated is more than
     * array size*/
    if (d > n)
        d = d % n;
    /*If number of elements to be rotated
    is exactly half of array size */
    if (n - d == d) {
        swap(arr_._ 0_._ n - d_._ d);
        return;
    }
 
    /* If A is shorter*/
    if (d < n - d) {
        swap(arr_._ 0_._ n - d_._ d);
        leftRotate(arr_._ d_._ n - d);
    }
    else /* If B is shorter*/
    {
        swap(arr_._ 0_._ d_._ n - d);
        leftRotate(arr + n - d_._ 2 * d - n_._
                   d); /*This is tricky*/
    }
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 7 };
    leftRotate(arr_._ 2_._ 7);
    printArray(arr_._ 7);
    return 0;
}
 "
351, C++ Program for Maximum sum such that no two elements are adjacent,"#include <bits/stdc++.h>
using namespace std;
 
// Function to find the maximum sum
int findMaxSum(vector<int> arr_._ int N)
{
    // Declare dp array
    int dp[N][2];
    if (N == 1) {
        return arr[0];
    }
   
    // Initialize the values in dp array
    dp[0][0] = 0;
    dp[0][1] = arr[0];
   
    // Loop to find the maximum possible sum
    for (int i = 1; i < N; i++) {
        dp[i][1] = dp[i - 1][0] + arr[i];
        dp[i][0] = max(dp[i - 1][1]_._
                       dp[i - 1][0]);
    }
   
    // Return the maximum sum
    return max(dp[N - 1][0]_._ dp[N - 1][1]);
}
 
// Driver Code
int main()
{
    // Creating the array
    vector<int> arr = { 5_._ 5_._ 10_._ 100_._ 10_._ 5 };
    int N = arr.size();
 
    // Function call
    cout << findMaxSum(arr_._ N) << endl;
    return 0;
}"
352, C++ Program for Leaders in an array,"#include<iostream>
using namespace std;
 
/*C++ Function to print leaders in an array */
void printLeaders(int arr[]_._ int size)
{
    for (int i = 0; i < size; i++)
    {
        int j;
        for (j = i+1; j < size; j++)
        {
            if (arr[i] <=arr[j])
                break;
        }   
        if (j == size) // the loop didn't break
            cout << arr[i] << "" "";
  }
}
 
/* Driver program to test above function */
int main()
{
    int arr[] = {16_._ 17_._ 4_._ 3_._ 5_._ 2};
    int n = sizeof(arr)/sizeof(arr[0]);
    printLeaders(arr_._ n);
    return 0;
}"
353, C++ Program for Sort elements by frequency,"#include <bits/stdc++.h>
using namespace std;
 
// Used for sorting
struct ele {
    int count_._ index_._ val;
};
 
// Used for sorting by value
bool mycomp(struct ele a_._ struct ele b)
{
    return (a.val < b.val);
}
 
// Used for sorting by frequency. And if frequency is same_._
// then by appearance
bool mycomp2(struct ele a_._ struct ele b)
{
    if (a.count != b.count)
        return (a.count < b.count);
    else
        return a.index > b.index;
}
 
void sortByFrequency(int arr[]_._ int n)
{
    struct ele element[n];
    for (int i = 0; i < n; i++) {
 
        // Fill Indexes
        element[i].index = i;
 
        // Initialize counts as 0
        element[i].count = 0;
 
        // Fill values in structure
        // elements
        element[i].val = arr[i];
    }
 
    /* Sort the structure elements according to value_._
       we used stable sort so relative order is maintained.
     */
    stable_sort(element_._ element + n_._ mycomp);
 
    /* initialize count of first element as 1 */
    element[0].count = 1;
 
    /* Count occurrences of remaining elements */
    for (int i = 1; i < n; i++) {
 
        if (element[i].val == element[i - 1].val) {
            element[i].count += element[i - 1].count + 1;
 
            /* Set count of previous element as -1_._ we are
               doing this because we'll again sort on the
               basis of counts (if counts are equal than on
               the basis of index)*/
            element[i - 1].count = -1;
 
            /* Retain the first index (Remember first index
               is always present in the first duplicate we
               used stable sort. */
            element[i].index = element[i - 1].index;
        }
 
        /* Else If previous element is not equal to current
          so set the count to 1 */
        else
            element[i].count = 1;
    }
 
    /* Now we have counts and first index for each element
       so now sort on the basis of count and in case of tie
       use index to sort.*/
    stable_sort(element_._ element + n_._ mycomp2);
    for (int i = n - 1_._ index = 0; i >= 0; i--)
        if (element[i].count != -1)
            for (int j = 0; j < element[i].count; j++)
                arr[index++] = element[i].val;
}
 
// Driver code
int main()
{
    int arr[] = { 2_._ 5_._ 2_._ 6_._ -1_._ 9999999_._ 5_._ 8_._ 8_._ 8 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    sortByFrequency(arr_._ n);
 
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
    return 0;
}"
354, C++ Program for Count Inversions in an array,"#include <bits/stdc++.h>
using namespace std;
 
int getInvCount(int arr[]_._ int n)
{
    int inv_count = 0;
    for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++)
            if (arr[i] > arr[j])
                inv_count++;
 
    return inv_count;
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 20_._ 6_._ 4_._ 5 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "" Number of inversions are ""
         << getInvCount(arr_._ n);
    return 0;
}"
355, C++ Program for Two elements whose sum is closest to zero,"# include <bits/stdc++.h>
# include <stdlib.h> /* for abs() */
# include <math.h>
 
using namespace std;
void minAbsSumPair(int arr[]_._ int arr_size)
{
    int inv_count = 0;
    int l_._ r_._ min_sum_._ sum_._ min_l_._ min_r;
     
    /* Array should have at least
       two elements*/
    if(arr_size < 2)
    {
        cout << ""Invalid Input"";
        return;
    }
     
    /* Initialization of values */
    min_l = 0;
    min_r = 1;
    min_sum = arr[0] + arr[1];
     
    for(l = 0; l < arr_size - 1; l++)
    {
        for(r = l + 1; r < arr_size; r++)
        {
        sum = arr[l] + arr[r];
        if(abs(min_sum) > abs(sum))
          {
              min_sum = sum;
              min_l = l;
              min_r = r;
          }
        }
    }
    cout << ""The two elements whose sum is minimum are ""
         << arr[min_l] << "" and "" << arr[min_r];
}
 
// Driver Code
int main()
{
    int arr[] = {1_._ 60_._ -10_._ 70_._ -80_._ 85};
    minAbsSumPair(arr_._ 6);
    return 0;
}"
356, C++ Program for Find the smallest and second smallest element in an array,"#include<bits/stdc++.h>
using namespace std;
int main() {
int arr[]={111_._ 13_._ 25_._ 9_._ 34_._ 1};
int n=sizeof(arr)/sizeof(arr[0]);
//sorting the array using
//in-built sort function
sort(arr_._arr+n);
//printing the desired element
cout<<""smallest element is ""<<arr[0]<<endl;
cout<<""second smallest element is ""<<arr[1];
return 0;
}
 "
357, C++ Program for Check for Majority Element in a sorted array,"#include<bits/stdc++.h>
using namespace std;
 
bool isMajority(int arr[]_._ int n_._ int x)
{
    int i;
 
    /* get last index according to n (even or odd) */
    int last_index = n % 2 ? (n / 2 + 1): (n / 2);
 
    /* search for first occurrence of x in arr[]*/
    for (i = 0; i < last_index; i++)
    {
       
        /* check if x is present and is present more than n/2
        times */
        if (arr[i] == x && arr[i + n / 2] == x)
            return 1;
    }
    return 0;
}
 
/* Driver code */
int main()
{
    int arr[] ={1_._ 2_._ 3_._ 4_._ 4_._ 4_._ 4};
    int n = sizeof(arr)/sizeof(arr[0]);
    int x = 4;
    if (isMajority(arr_._ n_._ x))
        cout <<    x <<"" appears more than ""<<
                              n/2 << "" times in arr[]""<< endl;
    else
        cout <<x <<"" does not appear more than"" << n/2 <<""  times in arr[]"" << endl;
 
return 0;
}"
358, C++ Program for Maximum and minimum of an array using minimum number of comparisons,"#include<iostream>
using namespace std;
 
// Pair struct is used to return
// two values from getMinMax()
struct Pair
{
    int min;
    int max;
};
 
Pair getMinMax(int arr[]_._ int n)
{
    struct Pair minmax;    
    int i;
     
    // If there is only one element
    // then return it as min and max both
    if (n == 1)
    {
        minmax.max = arr[0];
        minmax.min = arr[0];    
        return minmax;
    }
     
    // If there are more than one elements_._
    // then initialize min and max
    if (arr[0] > arr[1])
    {
        minmax.max = arr[0];
        minmax.min = arr[1];
    }
    else
    {
        minmax.max = arr[1];
        minmax.min = arr[0];
    }
     
    for(i = 2; i < n; i++)
    {
        if (arr[i] > minmax.max)    
            minmax.max = arr[i];
             
        else if (arr[i] < minmax.min)    
            minmax.min = arr[i];
    }
    return minmax;
}
 
// Driver code
int main()
{
    int arr[] = { 1000_._ 11_._ 445_._
                  1_._ 330_._ 3000 };
    int arr_size = 6;
     
    struct Pair minmax = getMinMax(arr_._ arr_size);
     
    cout << ""Minimum element is ""
         << minmax.min << endl;
    cout << ""Maximum element is ""
         << minmax.max;
          
    return 0;
}
 "
359, C++ Program for Segregate 0s and 1s in an array,"#include <bits/stdc++.h>
using namespace std;
 
// Function to segregate 0s and 1s
void segregate0and1(int arr[]_._ int n)
{
    int count = 0; // Counts the no of zeros in arr
 
    for (int i = 0; i < n; i++)
        if (arr[i] == 0)
            count++;
 
    // Loop fills the arr with 0 until count
    for (int i = 0; i < count; i++)
        arr[i] = 0;
 
    // Loop fills remaining arr space with 1
    for (int i = count; i < n; i++)
        arr[i] = 1;
}
 
// Function to print segregated array
void print(int arr[]_._ int n)
{
    cout << ""Array after segregation is "";
 
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
}
 
// Driver function
int main()
{
    int arr[] = { 0_._ 1_._ 0_._ 1_._ 1_._ 1 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    segregate0and1(arr_._ n);
    print(arr_._ n);
    return 0;
}"
360, C++ Program for k largest(or smallest) elements in an array | added Min Heap method,"#include <bits/stdc++.h>
using namespace std;
 
void kLargest(int arr[]_._ int n_._ int k)
{
    // Sort the given array arr in reverse order.
    sort(arr_._ arr + n_._ greater<int>());
 
    // Print the first kth largest elements
    for (int i = 0; i < k; i++)
        cout << arr[i] << "" "";
}
 
// Driver code
int main()
{
    int arr[] = { 1_._ 23_._ 12_._ 9_._ 30_._ 2_._ 50 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3;
    kLargest(arr_._ n_._ k);
}
 "
361, C++ Program for Maximum size square sub-matrix with all 1s,"#include <bits/stdc++.h>
#define bool int
#define R 6
#define C 5
using namespace std;
 
void printMaxSubSquare(bool M[R][C])
{
    int i_._ j;
    int S[R][C];
    int max_of_s_._ max_i_._ max_j;
 
    /* Set first column of S[][]*/
    for (i = 0; i < R; i++)
        S[i][0] = M[i][0];
 
    /* Set first row of S[][]*/
    for (j = 0; j < C; j++)
        S[0][j] = M[0][j];
 
    /* Construct other entries of S[][]*/
    for (i = 1; i < R; i++) {
        for (j = 1; j < C; j++) {
            if (M[i][j] == 1)
                S[i][j]
                    = min({ S[i][j - 1]_._ S[i - 1][j]_._
                            S[i - 1][j - 1] })
                      + 1; // better of using min in case of
                           // arguments more than 2
            else
                S[i][j] = 0;
        }
    }
 
    /* Find the maximum entry_._ and indexes of maximum entry
        in S[][] */
    max_of_s = S[0][0];
    max_i = 0;
    max_j = 0;
    for (i = 0; i < R; i++) {
        for (j = 0; j < C; j++) {
            if (max_of_s < S[i][j]) {
                max_of_s = S[i][j];
                max_i = i;
                max_j = j;
            }
        }
    }
 
    cout << ""Maximum size sub-matrix is: \n"";
    for (i = max_i; i > max_i - max_of_s; i--) {
        for (j = max_j; j > max_j - max_of_s; j--) {
            cout << M[i][j] << "" "";
        }
        cout << ""\n"";
    }
}
 
/* Driver code */
int main()
{
    bool M[R][C] = { { 0_._ 1_._ 1_._ 0_._ 1 }_._ { 1_._ 1_._ 0_._ 1_._ 0 }_._
                     { 0_._ 1_._ 1_._ 1_._ 0 }_._ { 1_._ 1_._ 1_._ 1_._ 0 }_._
                     { 1_._ 1_._ 1_._ 1_._ 1 }_._ { 0_._ 0_._ 0_._ 0_._ 0 } };
 
    printMaxSubSquare(M);
}"
362, C++ Program for Maximum difference between two elements such that larger element appears after the smaller number,"#include <bits/stdc++.h>
using namespace std;
  
/* The function assumes that there are 
   at least two elements in array. The 
   function returns a negative value if the
   array is sorted in decreasing order and  
   returns 0 if elements are equal */
int maxDiff(int arr[]_._ int arr_size)
{     
  int max_diff = arr[1] - arr[0];
  for (int i = 0; i < arr_size; i++)
  {
    for (int j = i+1; j < arr_size; j++)
    {     
      if (arr[j] - arr[i] > max_diff) 
        max_diff = arr[j] - arr[i];
    } 
  }         
  return max_diff;
} 
  
/* Driver program to test above function */
int main()
{
  int arr[] = {1_._ 2_._ 90_._ 10_._ 110};
  int n = sizeof(arr) / sizeof(arr[0]);
    
  // Function calling
  cout << ""Maximum difference is "" << maxDiff(arr_._ n);
  
  return 0;
}"
363, C++ Program for Union and Intersection of two sorted arrays,"#include <bits/stdc++.h>
using namespace std;
 
/* Function prints union of arr1[] and arr2[]
   m is the number of elements in arr1[]
   n is the number of elements in arr2[] */
void printUnion(int arr1[]_._ int arr2[]_._ int m_._ int n)
{
    int i = 0_._ j = 0;
    while (i < m && j < n) {
        if (arr1[i] < arr2[j])
            cout << arr1[i++] << "" "";
 
        else if (arr2[j] < arr1[i])
            cout << arr2[j++] << "" "";
 
        else {
            cout << arr2[j++] << "" "";
            i++;
        }
    }
 
    /* Print remaining elements of the larger array */
    while (i < m)
        cout << arr1[i++] << "" "";
 
    while (j < n)
        cout << arr2[j++] << "" "";
}
 
/* Driver program to test above function */
int main()
{
    int arr1[] = { 1_._ 2_._ 4_._ 5_._ 6 };
    int arr2[] = { 2_._ 3_._ 5_._ 7 };
 
    int m = sizeof(arr1) / sizeof(arr1[0]);
    int n = sizeof(arr2) / sizeof(arr2[0]);
 
    // Function calling
    printUnion(arr1_._ arr2_._ m_._ n);
 
    return 0;
}"
364, C++ Program for Floor and Ceiling in a sorted array,"#include <bits/stdc++.h>
using namespace std;
 
/* Function to get index of ceiling of x in arr[low..high] */
int ceilSearch(int arr[]_._ int low_._ int high_._ int x)
{
     
    int i;
     
    /* If x is smaller than or equal to first element_._
        then return the first element */
    if(x <= arr[low])
        return low;
     
    /* Otherwise_._ linearly search for ceil value */
    for(i = low; i < high; i++)
    {
        if(arr[i] == x)
        return i;
     
        /* if x lies between arr[i] and arr[i+1] including
        arr[i+1]_._ then return arr[i+1] */
        if(arr[i] < x && arr[i+1] >= x)
        return i+1;
    }    
     
    /* If we reach here then x is greater than the last element
        of the array_._ return -1 in this case */
    return -1;
}
 
 
/* Driver code*/
int main()
{
    int arr[] = {1_._ 2_._ 8_._ 10_._ 10_._ 12_._ 19};
    int n = sizeof(arr)/sizeof(arr[0]);
    int x = 3;
    int index = ceilSearch(arr_._ 0_._ n-1_._ x);
    if(index == -1)
        cout << ""Ceiling of "" << x << "" doesn't exist in array "";
    else
        cout << ""ceiling of "" << x << "" is "" << arr[index];
     
    return 0;
}
 "
365, C++ Program for A Product Array Puzzle,"#include <bits/stdc++.h>
using namespace std;
 
/* Function to print product array
for a given array arr[] of size n */
void productArray(int arr[]_._ int n)
{
 
    // Base case
    if (n == 1) {
        cout << 0;
        return;
    }
    /* Allocate memory for temporary
arrays left[] and right[] */
    int* left = new int[sizeof(int) * n];
    int* right = new int[sizeof(int) * n];
 
    /* Allocate memory for the product array */
    int* prod = new int[sizeof(int) * n];
 
    int i_._ j;
 
    /* Left most element of left
array is always 1 */
    left[0] = 1;
 
    /* Right most element of right
array is always 1 */
    right[n - 1] = 1;
 
    /* Construct the left array */
    for (i = 1; i < n; i++)
        left[i] = arr[i - 1] * left[i - 1];
 
    /* Construct the right array */
    for (j = n - 2; j >= 0; j--)
        right[j] = arr[j + 1] * right[j + 1];
 
    /* Construct the product array using
        left[] and right[] */
    for (i = 0; i < n; i++)
        prod[i] = left[i] * right[i];
 
    /* print the constructed prod array */
    for (i = 0; i < n; i++)
        cout << prod[i] << "" "";
 
    return;
}
 
/* Driver code*/
int main()
{
    int arr[] = { 10_._ 3_._ 5_._ 6_._ 2 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""The product array is: \n"";
    productArray(arr_._ n);
}"
366, C++ Program for Segregate Even and Odd numbers,"#include <iostream>
using namespace std;
 
/* Function to swap *a and *b */
void swap(int *a_._ int *b);
 
void segregateEvenOdd(int arr[]_._ int size)
{
    /* Initialize left and right indexes */
    int left = 0_._ right = size-1;
    while (left < right)
    {
        /* Increment left index while we see 0 at left */
        while (arr[left] % 2 == 0 && left < right)
            left++;
 
        /* Decrement right index while we see 1 at right */
        while (arr[right] % 2 == 1 && left < right)
            right--;
 
        if (left < right)
        {
            /* Swap arr[left] and arr[right]*/
            swap(&arr[left]_._ &arr[right]);
            left++;
            right--;
        }
    }
}
 
/* UTILITY FUNCTIONS */
void swap(int *a_._ int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 
/* Driver code */
int main()
{
    int arr[] = {12_._ 34_._ 45_._ 9_._ 8_._ 90_._ 3};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
    int i = 0;
 
    segregateEvenOdd(arr_._ arr_size);
 
    cout <<""Array after segregation "";
    for (i = 0; i < arr_size; i++)
        cout << arr[i] << "" "";
 
    return 0;
}"
367, C++ Program for Find the two repeating elements in a given array,"#include <bits/stdc++.h>
using namespace std;
 
void printTwoRepeatNumber(int arr[]_._ int size)
{
    int i_._ j;
    cout << ""Repeating elements are "";
    for (i = 0; i < size; i++) {
        for (j = i + 1; j < size; j++) {
            if (arr[i] == arr[j]) {
                cout << arr[i] << "" "";
                break;
            }
        }
    }
}
 
int main()
{
    int arr[] = { 4_._ 2_._ 4_._ 5_._ 2_._ 3_._ 1 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
   
    printTwoRepeatNumber(arr_._ arr_size);
    return 0;
}"
368, C++ Program for Sort an array of 0s_._ 1s and 2s,"#include <bits/stdc++.h>
using namespace std;
 
// Function to sort the input array_._
// the array is assumed
// to have values in {0_._ 1_._ 2}
void sort012(int a[]_._ int arr_size)
{
    int lo = 0;
    int hi = arr_size - 1;
    int mid = 0;
 
    // Iterate till all the elements
    // are sorted
    while (mid <= hi) {
        switch (a[mid]) {
 
        // If the element is 0
        case 0:
            swap(a[lo++]_._ a[mid++]);
            break;
 
        // If the element is 1 .
        case 1:
            mid++;
            break;
 
        // If the element is 2
        case 2:
            swap(a[mid]_._ a[hi--]);
            break;
        }
    }
}
 
// Function to print array arr[]
void printArray(int arr[]_._ int arr_size)
{
    // Iterate and print every element
    for (int i = 0; i < arr_size; i++)
        cout << arr[i] << "" "";
}
 
// Driver Code
int main()
{
    int arr[] = { 0_._ 1_._ 1_._ 0_._ 1_._ 2_._ 1_._ 2_._ 0_._ 0_._ 0_._ 1 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    sort012(arr_._ n);
 
    printArray(arr_._ n);
 
    return 0;
}"
369, C++ Program for Find the Minimum length Unsorted Subarray_._ sorting which makes the complete array sorted,"#include<bits/stdc++.h>
using namespace std;
 
void printUnsorted(int arr[]_._ int n)
{
int s = 0_._ e = n-1_._ i_._ max_._ min;
 
// step 1(a) of above algo
for (s = 0; s < n-1; s++)
{
    if (arr[s] > arr[s+1])
    break;
}
if (s == n-1)
{
    cout << ""The complete array is sorted"";
    return;
}
 
// step 1(b) of above algo
for(e = n - 1; e > 0; e--)
{
    if(arr[e] < arr[e-1])
    break;
}
 
// step 2(a) of above algo
max = arr[s]; min = arr[s];
for(i = s + 1; i <= e; i++)
{
    if(arr[i] > max)
    max = arr[i];
    if(arr[i] < min)
    min = arr[i];
}
 
// step 2(b) of above algo
for( i = 0; i < s; i++)
{
    if(arr[i] > min)
    {
    s = i;
    break;
    }    
}
 
// step 2(c) of above algo
for( i = n -1; i >= e+1; i--)
{
    if(arr[i] < max)
    {
    e = i;
    break;
    }
}
     
// step 3 of above algo
cout << ""The unsorted subarray which""
     << "" makes the given array"" << endl
     << ""sorted lies between the indices ""
     << s << "" and "" << e;
return;
}
 
int main()
{
    int arr[] = {10_._ 12_._ 20_._ 30_._ 25_._
                 40_._ 32_._ 31_._ 35_._ 50_._ 60};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
    printUnsorted(arr_._ arr_size);
    getchar();
    return 0;
}"
370, C++ Program for Find duplicates in O(n) time and O(1) extra space,"#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    int numRay[] = { 0_._ 4_._ 3_._ 2_._ 7_._ 8_._ 2_._ 3_._ 1 };
    int arr_size = sizeof(numRay) / sizeof(numRay[0]);
    // count the frequency
    for (int i = 0; i < arr_size; i++) {
        numRay[numRay[i] % arr_size]
            = numRay[numRay[i] % arr_size] + arr_size;
    }
    cout << ""The repeating elements are : "" << endl;
    for (int i = 0; i < arr_size; i++) {
        if (numRay[i] >= arr_size * 2) {
            cout << i << "" "" << endl;
        }
    }
    return 0;
}
 "
371, C++ Program for Equilibrium index of an array,"#include <bits/stdc++.h>
using namespace std;
 
int equilibrium(int arr[]_._ int n)
{
    int i_._ j;
    int leftsum_._ rightsum;
 
    /* Check for indexes one by one until
    an equilibrium index is found */
    for (i = 0; i < n; ++i) {
 
        /* get left sum */
        leftsum = 0;
        for (j = 0; j < i; j++)
            leftsum += arr[j];
 
        /* get right sum */
        rightsum = 0;
        for (j = i + 1; j < n; j++)
            rightsum += arr[j];
 
        /* if leftsum and rightsum
        are same_._ then we are done */
        if (leftsum == rightsum)
            return i;
    }
 
    /* return -1 if no equilibrium
    index is found */
    return -1;
}
 
// Driver code
int main()
{
    int arr[] = { -7_._ 1_._ 5_._ 2_._ -4_._ 3_._ 0 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    cout << equilibrium(arr_._ arr_size);
    return 0;
}"
372, C++ Program for Turn an image by 90 degree,"#include <bits/stdc++.h>
using namespace std;
void displayMatrix(unsigned int const *p_._
                    unsigned int row_._
                   unsigned int col);
                     
void rotate(unsigned int *pS_._
            unsigned int *pD_._
            unsigned int row_._
            unsigned int col);
             
void displayMatrix(unsigned int const *p_._
                   unsigned int r_._
                   unsigned int c)
{
    unsigned int row_._ col;
    cout << ""\n\n"";
 
    for (row = 0; row < r; row++)
    {
        for (col = 0; col < c; col++)
            cout << * (p + row * c + col) << ""\t"";
        cout << ""\n"";
    }
 
    cout << ""\n\n"";
}
 
void rotate(unsigned int *pS_._
            unsigned int *pD_._
            unsigned int row_._
            unsigned int col)
{
    unsigned int r_._ c;
    for (r = 0; r < row; r++)
    {
        for (c = 0; c < col; c++)
        {
            *(pD + c * row + (row - r - 1)) =
                        *(pS + r * col + c);
        }
    }
}
 
// Driver Code
int main()
{
     
    // declarations
    unsigned int image[][4] = {{1_._ 2_._ 3_._ 4}_._
                               {5_._ 6_._ 7_._ 8}_._
                               {9_._ 10_._ 11_._ 12}};
    unsigned int *pSource;
    unsigned int *pDestination;
    unsigned int m_._ n;
 
    // setting initial values
    // and memory allocation
    m = 3_._ n = 4_._ pSource = (unsigned int *)image;
    pDestination = (unsigned int *)malloc
                   (sizeof(int) * m * n);
 
    // process each buffer
    displayMatrix(pSource_._ m_._ n);
 
    rotate(pSource_._ pDestination_._ m_._ n);
 
    displayMatrix(pDestination_._ n_._ m);
 
    free(pDestination);
 
    return 0;
}"
373, C++ Program for Search in a row wise and column wise sorted matrix,"#include <bits/stdc++.h>
 
using namespace std;
 
/* Searches the element x in mat[][]. If the
element is found_._ then prints its position
and returns true_._ otherwise prints ""not found""
and returns false */
int search(int mat[4][4]_._ int n_._ int x)
{
    if (n == 0)
        return -1;
 
    // traverse through the matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            // if the element is found
            if (mat[i][j] == x) {
                cout << ""Element found at ("" << i << ""_._ ""
                     << j << "")\n"";
                return 1;
            }
    }
 
    cout << ""n Element not found"";
    return 0;
}
 
// Driver code
int main()
{
    int mat[4][4] = { { 10_._ 20_._ 30_._ 40 }_._
                      { 15_._ 25_._ 35_._ 45 }_._
                      { 27_._ 29_._ 37_._ 48 }_._
                      { 32_._ 33_._ 39_._ 50 } };
 
    // Function call
    search(mat_._ 4_._ 29);
 
    return 0;
}"
374, C++ Program for Next Greater Element,"#include <iostream>
using namespace std;
 
/* prints element and NGE pair
for all elements of arr[] of size n */
void printNGE(int arr[]_._ int n)
{
    int next_._ i_._ j;
    for (i = 0; i < n; i++) {
        next = -1;
        for (j = i + 1; j < n; j++) {
            if (arr[i] < arr[j]) {
                next = arr[j];
                break;
            }
        }
        cout << arr[i] << "" --> "" << next << endl;
    }
}
 
// Driver Code
int main()
{
    int arr[] = { 11_._ 13_._ 21_._ 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printNGE(arr_._ n);
    return 0;
}"
375, C++ Program for Check if array elements are consecutive | Added Method 3,"#include <bits/stdc++.h>
using namespace std;
  
// Function to Check if array
// elements are consecutive
 
bool areConsecutive(int arr[]_._ int n)
{
    //Sort the array
    sort(arr_._arr+n);
    // checking the adjacent elements
    for(int i=1;i<n;i++)
    {
        if(arr[i]!=arr[i-1]+1)
        {
            return false;
        }
    }
    return true;
}
 
/* Driver program to test above functions */
int main()
{
    int arr[]= {5_._ 4_._ 2_._ 3_._ 1_._ 6};
    int n = sizeof(arr)/sizeof(arr[0]);
    if(areConsecutive(arr_._ n) == true)
        cout<<"" Array elements are consecutive "";
    else
        cout<<"" Array elements are not consecutive "";
    return 0;
}"
376, C++ Program for Find the smallest missing number,"#include<bits/stdc++.h>
using namespace std;
 
int findFirstMissing(int array[]_._
                    int start_._ int end)
{
    if (start > end)
        return end + 1;
 
    if (start != array[start])
        return start;
 
    int mid = (start + end) / 2;
 
    // Left half has all elements
    // from 0 to mid
    if (array[mid] == mid)
        return findFirstMissing(array_._
                            mid+1_._ end);
 
    return findFirstMissing(array_._ start_._ mid);
}
 
// Driver code
int main()
{
    int arr[] = {0_._ 1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 7_._ 10};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""Smallest missing element is "" <<
        findFirstMissing(arr_._ 0_._ n-1) << endl;
}"
377, C++ Program for Count the number of occurrences in a sorted array,"#include<bits/stdc++.h>
using namespace std;
 
// Returns number of times x occurs in arr[0..n-1]
int countOccurrences(int arr[]_._ int n_._ int x)
{
    int res = 0;
    for (int i=0; i<n; i++)
        if (x == arr[i])
          res++;
    return res;
}
 
// Driver code
int main()
{
    int arr[] = {1_._ 2_._ 2_._ 2_._ 2_._ 3_._ 4_._ 7 _._8 _._8 };
    int n = sizeof(arr)/sizeof(arr[0]);
    int x = 2;
    cout << countOccurrences(arr_._ n_._ x);
    return 0;
}"
378, C++ Program for Binary Search,"#include <bits/stdc++.h>
using namespace std;
 
// A recursive binary search function. It returns
// location of x in given array arr[l..r] is present_._
// otherwise -1
int binarySearch(int arr[]_._ int l_._ int r_._ int x)
{
    if (r >= l) {
        int mid = l + (r - l) / 2;
 
        // If the element is present at the middle
        // itself
        if (arr[mid] == x)
            return mid;
 
        // If element is smaller than mid_._ then
        // it can only be present in left subarray
        if (arr[mid] > x)
            return binarySearch(arr_._ l_._ mid - 1_._ x);
 
        // Else the element can only be present
        // in right subarray
        return binarySearch(arr_._ mid + 1_._ r_._ x);
    }
 
    // We reach here when element is not
    // present in array
    return -1;
}
 
int main(void)
{
    int arr[] = { 2_._ 3_._ 4_._ 10_._ 40 };
    int x = 10;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr_._ 0_._ n - 1_._ x);
    (result == -1)
        ? cout << ""Element is not present in array""
        : cout << ""Element is present at index "" << result;
    return 0;
}"
379, C++ Program for Selection Sort,"#include <bits/stdc++.h>
using namespace std;
 
//Swap function
void swap(int *xp_._ int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
 
void selectionSort(int arr[]_._ int n)
{
    int i_._ j_._ min_idx;
 
    // One by one move boundary of
    // unsorted subarray
    for (i = 0; i < n-1; i++)
    {
       
        // Find the minimum element in
        // unsorted array
        min_idx = i;
        for (j = i+1; j < n; j++)
        if (arr[j] < arr[min_idx])
            min_idx = j;
 
        // Swap the found minimum element
        // with the first element
        if(min_idx!=i)
            swap(&arr[min_idx]_._ &arr[i]);
    }
}
 
//Function to print an array
void printArray(int arr[]_._ int size)
{
    int i;
    for (i=0; i < size; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
 
// Driver program to test above functions
int main()
{
    int arr[] = {64_._ 25_._ 12_._ 22_._ 11};
    int n = sizeof(arr)/sizeof(arr[0]);
    selectionSort(arr_._ n);
    cout << ""Sorted array: \n"";
    printArray(arr_._ n);
    return 0;
}"
380, C++ Program for Bubble Sort,"#include <bits/stdc++.h>
using namespace std;
 
// A function to implement bubble sort
void bubbleSort(int arr[]_._ int n)
{
    int i_._ j;
    for (i = 0; i < n - 1; i++)
 
        // Last i elements are already
        // in place
        for (j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(arr[j]_._ arr[j + 1]);
}
 
// Function to print an array
void printArray(int arr[]_._ int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
 
// Driver code
int main()
{
    int arr[] = { 5_._ 1_._ 4_._ 2_._ 8};
    int N = sizeof(arr) / sizeof(arr[0]);
    bubbleSort(arr_._ N);
    cout << ""Sorted array: \n"";
    printArray(arr_._ N);
    return 0;
}"
381, C++ Program for Insertion Sort,"
#include <bits/stdc++.h>
using namespace std;
 
// Function to sort an array using
// insertion sort
void insertionSort(int arr[]_._ int n)
{
    int i_._ key_._ j;
    for (i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;
 
        // Move elements of arr[0..i-1]_._ 
        // that are greater than key_._ to one
        // position ahead of their
        // current position
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
 
// A utility function to print an array
// of size n
void printArray(int arr[]_._ int n)
{
    int i;
    for (i = 0; i < n; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
 
// Driver code
int main()
{
    int arr[] = { 12_._ 11_._ 13_._ 5_._ 6 };
    int N = sizeof(arr) / sizeof(arr[0]);
 
    insertionSort(arr_._ N);
    printArray(arr_._ N);
 
    return 0;
}"
382, C++ Program for Merge Sort,"#include <iostream>
using namespace std;
 
// Merges two subarrays of array[].
// First subarray is arr[begin..mid]
// Second subarray is arr[mid+1..end]
void merge(int array[]_._ int const left_._ int const mid_._
           int const right)
{
    auto const subArrayOne = mid - left + 1;
    auto const subArrayTwo = right - mid;
 
    // Create temp arrays
    auto *leftArray = new int[subArrayOne]_._
         *rightArray = new int[subArrayTwo];
 
    // Copy data to temp arrays leftArray[] and rightArray[]
    for (auto i = 0; i < subArrayOne; i++)
        leftArray[i] = array[left + i];
    for (auto j = 0; j < subArrayTwo; j++)
        rightArray[j] = array[mid + 1 + j];
 
    auto indexOfSubArrayOne
        = 0_._ // Initial index of first sub-array
        indexOfSubArrayTwo
        = 0; // Initial index of second sub-array
    int indexOfMergedArray
        = left; // Initial index of merged array
 
    // Merge the temp arrays back into array[left..right]
    while (indexOfSubArrayOne < subArrayOne
           && indexOfSubArrayTwo < subArrayTwo) {
        if (leftArray[indexOfSubArrayOne]
            <= rightArray[indexOfSubArrayTwo]) {
            array[indexOfMergedArray]
                = leftArray[indexOfSubArrayOne];
            indexOfSubArrayOne++;
        }
        else {
            array[indexOfMergedArray]
                = rightArray[indexOfSubArrayTwo];
            indexOfSubArrayTwo++;
        }
        indexOfMergedArray++;
    }
    // Copy the remaining elements of
    // left[]_._ if there are any
    while (indexOfSubArrayOne < subArrayOne) {
        array[indexOfMergedArray]
            = leftArray[indexOfSubArrayOne];
        indexOfSubArrayOne++;
        indexOfMergedArray++;
    }
    // Copy the remaining elements of
    // right[]_._ if there are any
    while (indexOfSubArrayTwo < subArrayTwo) {
        array[indexOfMergedArray]
            = rightArray[indexOfSubArrayTwo];
        indexOfSubArrayTwo++;
        indexOfMergedArray++;
    }
    delete[] leftArray;
    delete[] rightArray;
}
 
// begin is for left index and end is
// right index of the sub-array
// of arr to be sorted */
void mergeSort(int array[]_._ int const begin_._ int const end)
{
    if (begin >= end)
        return; // Returns recursively
 
    auto mid = begin + (end - begin) / 2;
    mergeSort(array_._ begin_._ mid);
    mergeSort(array_._ mid + 1_._ end);
    merge(array_._ begin_._ mid_._ end);
}
 
// UTILITY FUNCTIONS
// Function to print an array
void printArray(int A[]_._ int size)
{
    for (auto i = 0; i < size; i++)
        cout << A[i] << "" "";
}
 
// Driver code
int main()
{
    int arr[] = { 12_._ 11_._ 13_._ 5_._ 6_._ 7 };
    auto arr_size = sizeof(arr) / sizeof(arr[0]);
 
    cout << ""Given array is \n"";
    printArray(arr_._ arr_size);
 
    mergeSort(arr_._ 0_._ arr_size - 1);
 
    cout << ""\nSorted array is \n"";
    printArray(arr_._ arr_size);
    return 0;
}"
383, C++ Program for Heap Sort," 
#include <iostream>
using namespace std;
 
// To heapify a subtree rooted with node i
// which is an index in arr[].
// n is size of heap
void heapify(int arr[]_._ int N_._ int i)
{
 
    // Initialize largest as root
    int largest = i;
 
    // left = 2*i + 1
    int l = 2 * i + 1;
 
    // right = 2*i + 2
    int r = 2 * i + 2;
 
    // If left child is larger than root
    if (l < N && arr[l] > arr[largest])
        largest = l;
 
    // If right child is larger than largest
    // so far
    if (r < N && arr[r] > arr[largest])
        largest = r;
 
    // If largest is not root
    if (largest != i) {
        swap(arr[i]_._ arr[largest]);
 
        // Recursively heapify the affected
        // sub-tree
        heapify(arr_._ N_._ largest);
    }
}
 
// Main function to do heap sort
void heapSort(int arr[]_._ int N)
{
 
    // Build heap (rearrange array)
    for (int i = N / 2 - 1; i >= 0; i--)
        heapify(arr_._ N_._ i);
 
    // One by one extract an element
    // from heap
    for (int i = N - 1; i > 0; i--) {
 
        // Move current root to end
        swap(arr[0]_._ arr[i]);
 
        // call max heapify on the reduced heap
        heapify(arr_._ i_._ 0);
    }
}
 
// A utility function to print array of size n
void printArray(int arr[]_._ int N)
{
    for (int i = 0; i < N; ++i)
        cout << arr[i] << "" "";
    cout << ""\n"";
}
 
// Driver's code
int main()
{
    int arr[] = { 12_._ 11_._ 13_._ 5_._ 6_._ 7 };
    int N = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    heapSort(arr_._ N);
 
    cout << ""Sorted array is \n"";
    printArray(arr_._ N);
}"
384, C++ Program for QuickSort,"#include <bits/stdc++.h>
using namespace std;
  
// A utility function to swap two elements
void swap(int* a_._ int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
  
/* This function takes last element as pivot_._ places
the pivot element at its correct position in sorted
array_._ and places all smaller (smaller than pivot)
to left of pivot and all greater elements to right
of pivot */
int partition(int arr[]_._ int low_._ int high)
{
    int pivot = arr[high]; // pivot
    int i
        = (low
           - 1); // Index of smaller element and indicates
                 // the right position of pivot found so far
  
    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than the pivot
        if (arr[j] < pivot) {
            i++; // increment index of smaller element
            swap(&arr[i]_._ &arr[j]);
        }
    }
    swap(&arr[i + 1]_._ &arr[high]);
    return (i + 1);
}
  
/* The main function that implements QuickSort
arr[] --> Array to be sorted_._
low --> Starting index_._
high --> Ending index */
void quickSort(int arr[]_._ int low_._ int high)
{
    if (low < high) {
        /* pi is partitioning index_._ arr[p] is now
        at right place */
        int pi = partition(arr_._ low_._ high);
  
        // Separately sort elements before
        // partition and after partition
        quickSort(arr_._ low_._ pi - 1);
        quickSort(arr_._ pi + 1_._ high);
    }
}
  
/* Function to print an array */
void printArray(int arr[]_._ int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
  
// Driver Code
int main()
{
    int arr[] = { 10_._ 7_._ 8_._ 9_._ 1_._ 5 };
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr_._ 0_._ n - 1);
    cout << ""Sorted array: \n"";
    printArray(arr_._ n);
    return 0;
}"
385, C++ Program for Given an array arr[]_._ find the maximum j – i such that arr[j] > arr[i],"#include <bits/stdc++.h>
using namespace std;
  
// A utility function to swap two elements
void swap(int* a_._ int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
  
/* This function takes last element as pivot_._ places
the pivot element at its correct position in sorted
array_._ and places all smaller (smaller than pivot)
to left of pivot and all greater elements to right
of pivot */
int partition(int arr[]_._ int low_._ int high)
{
    int pivot = arr[high]; // pivot
    int i
        = (low
           - 1); // Index of smaller element and indicates
                 // the right position of pivot found so far
  
    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than the pivot
        if (arr[j] < pivot) {
            i++; // increment index of smaller element
            swap(&arr[i]_._ &arr[j]);
        }
    }
    swap(&arr[i + 1]_._ &arr[high]);
    return (i + 1);
}
  
/* The main function that implements QuickSort
arr[] --> Array to be sorted_._
low --> Starting index_._
high --> Ending index */
void quickSort(int arr[]_._ int low_._ int high)
{
    if (low < high) {
        /* pi is partitioning index_._ arr[p] is now
        at right place */
        int pi = partition(arr_._ low_._ high);
  
        // Separately sort elements before
        // partition and after partition
        quickSort(arr_._ low_._ pi - 1);
        quickSort(arr_._ pi + 1_._ high);
    }
}
  
/* Function to print an array */
void printArray(int arr[]_._ int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
  
// Driver Code
int main()
{
    int arr[] = { 10_._ 7_._ 8_._ 9_._ 1_._ 5 };
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr_._ 0_._ n - 1);
    cout << ""Sorted array: \n"";
    printArray(arr_._ n);
    return 0;
}"
386, C++ Program for Maximum of all subarrays of size k (Added a O(n) method),"#include <bits/stdc++.h>
using namespace std;
 
// Method to find the maximum for each
// and every contiguous subarray of size K.
void printKMax(int arr[]_._ int N_._ int K)
{
    int j_._ max;
 
    for (int i = 0; i <= N - K; i++) {
        max = arr[i];
 
        for (j = 1; j < K; j++) {
            if (arr[i + j] > max)
                max = arr[i + j];
        }
        cout << max << "" "";
    }
}
 
// Driver's code
int main()
{
    int arr[] = { 1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 7_._ 8_._ 9_._ 10 };
    int N = sizeof(arr) / sizeof(arr[0]);
    int K = 3;
   
      // Function call
    printKMax(arr_._ N_._ K);
    return 0;
}"
387, C++ Program for Find whether an array is subset of another array | Added Method 3,"#include <bits/stdc++.h>
 
/* Return 1 if arr2[] is a subset of
arr1[] */
bool isSubset(int arr1[]_._ int arr2[]_._ int m_._ int n)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            if (arr2[i] == arr1[j])
                break;
        }
 
        /* If the above inner loop was
        not broken at all then arr2[i]
        is not present in arr1[] */
        if (j == m)
            return 0;
    }
 
    /* If we reach here then all
    elements of arr2[] are present
    in arr1[] */
    return 1;
}
 
// Driver code
int main()
{
    int arr1[] = { 11_._ 1_._ 13_._ 21_._ 3_._ 7 };
    int arr2[] = { 11_._ 3_._ 7_._ 1 };
 
    int m = sizeof(arr1) / sizeof(arr1[0]);
    int n = sizeof(arr2) / sizeof(arr2[0]);
 
    if (isSubset(arr1_._ arr2_._ m_._ n))
        printf(""arr2[] is subset of arr1[] "");
    else
        printf(""arr2[] is not a subset of arr1[]"");
 
    getchar();
    return 0;
}"
388, C++ Program for Find the minimum distance between two numbers,"#include <bits/stdc++.h>
using namespace std;
 
int minDist(int arr[]_._ int n_._ int x_._ int y)
{
    int i_._ j;
    int min_dist = INT_MAX;
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if ((x == arr[i] && y == arr[j]
                 || y == arr[i] && x == arr[j])
                && min_dist > abs(i - j)) {
                min_dist = abs(i - j);
            }
        }
    }
    if (min_dist > n) {
        return -1;
    }
    return min_dist;
}
 
/* Driver code */
int main()
{
    int arr[] = { 3_._ 5_._ 4_._ 2_._ 6_._ 5_._ 6_._ 6_._ 5_._ 4_._ 8_._ 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int x = 3;
    int y = 6;
 
    cout << ""Minimum distance between "" << x << "" and "" << y
         << "" is "" << minDist(arr_._ n_._ x_._ y) << endl;
}"
389, C++ Program for Find the repeating and the missing | Added 3 new methods,"#include <iostream>
#include <unordered_map>
using namespace std;
 
int main()
{
    int arr[] = { 4_._ 3_._ 6_._ 2_._ 1_._ 1 };
    int n = 6;
     
    unordered_map<int_._ bool> numberMap;
     
    for(int i : arr)
    {
        if (numberMap.find(i) ==
            numberMap.end())
        {
            numberMap[i] = true;
        }
        else
        {
            cout << ""Repeating = "" << i;
        }
    }
    cout << endl;
     
    for(int i = 1; i <= n; i++)
    {
        if (numberMap.find(i) ==
            numberMap.end())
        {
            cout << ""Missing = "" << i;
        }
    }
    return 0;
}"
390, C++ Program for Print a given matrix in spiral form," 
#include <bits/stdc++.h>
using namespace std;
 
vector<int> spiralOrder(vector<vector<int> >& matrix)
{
    int m = matrix.size()_._ n = matrix[0].size();
    vector<int> ans;
 
    if (m == 0)
        return ans;
 
    vector<vector<bool> > seen(m_._ vector<bool>(n_._ false));
    int dr[] = { 0_._ 1_._ 0_._ -1 };
    int dc[] = { 1_._ 0_._ -1_._ 0 };
 
    int x = 0_._ y = 0_._ di = 0;
 
    // Iterate from 0 to m * n - 1
    for (int i = 0; i < m * n; i++) {
        ans.push_back(matrix[x][y]);
        // on normal geeksforgeeks ui page it is showing
        // 'ans.push_back(matrix[x])' which gets copied as
        // this only and gives error on compilation_._
        seen[x][y] = true;
        int newX = x + dr[di];
        int newY = y + dc[di];
 
        if (0 <= newX && newX < m && 0 <= newY && newY < n
            && !seen[newX][newY]) {
            x = newX;
            y = newY;
        }
        else {
            di = (di + 1) % 4;
            x += dr[di];
            y += dc[di];
        }
    }
    return ans;
}
 
// Driver code
int main()
{
    vector<vector<int> > a{ { 1_._ 2_._ 3_._ 4 }_._
                            { 5_._ 6_._ 7_._ 8 }_._
                            { 9_._ 10_._ 11_._ 12 }_._
                            { 13_._ 14_._ 15_._ 16 } };
 
    // Function call
    for (int x : spiralOrder(a)) {
        cout << x << "" "";
    }
    return 0;
}"
391, C++ Program for A Boolean Matrix Question,"#include <bits/stdc++.h>
 
using namespace std;
#define R 3
#define C 4
 
void modifyMatrix(bool mat[R][C])
{
    bool row[R];
    bool col[C];
 
    int i_._ j;
 
    /* Initialize all values of row[] as 0 */
    for (i = 0; i < R; i++)
        row[i] = 0;
 
    /* Initialize all values of col[] as 0 */
    for (i = 0; i < C; i++)
        col[i] = 0;
 
    // Store the rows and columns to be marked as
    // 1 in row[] and col[] arrays respectively
    for (i = 0; i < R; i++) {
        for (j = 0; j < C; j++) {
            if (mat[i][j] == 1) {
                row[i] = 1;
                col[j] = 1;
            }
        }
    }
 
    // Modify the input matrix mat[] using the
    // above constructed row[] and col[] arrays
    for (i = 0; i < R; i++)
        for (j = 0; j < C; j++)
            if (row[i] == 1 || col[j] == 1)
                mat[i][j] = 1;
}
 
/* A utility function to print a 2D matrix */
void printMatrix(bool mat[R][C])
{
    int i_._ j;
    for (i = 0; i < R; i++) {
        for (j = 0; j < C; j++)
            cout << mat[i][j];
        cout << endl;
    }
}
 
// Driver Code
int main()
{
    bool mat[R][C] = { { 1_._ 0_._ 0_._ 1 }_._
                       { 0_._ 0_._ 1_._ 0 }_._
                       { 0_._ 0_._ 0_._ 0 } };
 
    cout << ""Input Matrix \n"";
    printMatrix(mat);
    modifyMatrix(mat);
    printf(""Matrix after modification \n"");
    printMatrix(mat);
    return 0;
}"
392, C++ Program for Median in a stream of integers (running integers),"
#include <bits/stdc++.h>
 
using namespace std;
 
// Function to find position to insert current element of
// stream using binary search
int binarySearch(int arr[]_._ int item_._ int low_._ int high)
{
    if (low >= high) {
        return (item > arr[low]) ? (low + 1) : low;
    }
 
    int mid = (low + high) / 2;
 
    if (item == arr[mid])
        return mid + 1;
 
    if (item > arr[mid])
        return binarySearch(arr_._ item_._ mid + 1_._ high);
 
    return binarySearch(arr_._ item_._ low_._ mid - 1);
}
 
// Function to print median of stream of integers
void printMedian(int arr[]_._ int n)
{
    int i_._ j_._ pos_._ num;
    int count = 1;
 
    cout << ""Median after reading 1""
         << "" element is "" << arr[0] << ""\n"";
 
    for (i = 1; i < n; i++) {
        float median;
        j = i - 1;
        num = arr[i];
 
        // find position to insert current element in sorted
        // part of array
        pos = binarySearch(arr_._ num_._ 0_._ j);
 
        // move elements to right to create space to insert
        // the current element
        while (j >= pos) {
            arr[j + 1] = arr[j];
            j--;
        }
 
        arr[j + 1] = num;
 
        // increment count of sorted elements in array
        count++;
 
        // if odd number of integers are read from stream
        // then middle element in sorted order is median
        // else average of middle elements is median
        if (count % 2 != 0) {
            median = arr[count / 2];
        }
        else {
            median = (arr[(count / 2) - 1] + arr[count / 2])
                     / 2;
        }
 
        cout << ""Median after reading "" << i + 1
             << "" elements is "" << median << ""\n"";
    }
}
 
// Driver Code
int main()
{
    int arr[] = { 5_._ 15_._ 1_._ 3_._ 2_._ 8_._ 7_._ 9_._ 10_._ 6_._ 11_._ 4 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    printMedian(arr_._ n);
 
    return 0;
}"
393, C++ Program for Find a Fixed Point in a given array,"#include <bits/stdc++.h>
using namespace std;
 
int linearSearch(int arr[]_._ int n)
{
    int i;
    for (i = 0; i < n; i++) {
        if (arr[i] == i)
            return i;
    }
 
    /* If no fixed point present then return -1 */
    return -1;
}
 
/* Driver code */
int main()
{
    int arr[] = { -10_._ -1_._ 0_._ 3_._ 10_._ 11_._ 30_._ 50_._ 100 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""Fixed Point is "" << linearSearch(arr_._ n);
    return 0;
}"
394, C++ Program for Maximum Length Bitonic Subarray,"#include <bits/stdc++.h>
using namespace std;
 
int bitonic(int arr[]_._ int n)
{
    // Length of increasing subarray
    // ending at all indexes
    int inc[n];
     
    // Length of decreasing subarray
    // starting at all indexes
    int dec[n];
    int i_._ max;
 
    // length of increasing sequence
    // ending at first index is 1
    inc[0] = 1;
 
    // length of increasing sequence
    // starting at first index is 1
    dec[n-1] = 1;
 
    // Step 1) Construct increasing sequence array
    for (i = 1; i < n; i++)
    inc[i] = (arr[i] >= arr[i-1])? inc[i-1] + 1: 1;
 
    // Step 2) Construct decreasing sequence array
    for (i = n-2; i >= 0; i--)
    dec[i] = (arr[i] >= arr[i+1])? dec[i+1] + 1: 1;
 
    // Step 3) Find the length of
    // maximum length bitonic sequence
    max = inc[0] + dec[0] - 1;
    for (i = 1; i < n; i++)
        if (inc[i] + dec[i] - 1 > max)
            max = inc[i] + dec[i] - 1;
 
    return max;
}
 
/* Driver code */
int main()
{
    int arr[] = {12_._ 4_._ 78_._ 90_._ 45_._ 23};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""nLength of max length Bitonic Subarray is "" << bitonic(arr_._ n);
    return 0;
}"
395, C++ Program for Find the maximum element in an array which is first increasing and then decreasing,"#include <bits/stdc++.h>
using namespace std;
 
// function to find the maximum element
int findMaximum(int arr[]_._ int low_._ int high)
{
    int max = arr[low];
    int i;
    for (i = low + 1; i <= high; i++)
    {
        if (arr[i] > max)
            max = arr[i];
         
        // break when once an element is smaller than
        // the max then it will go on decreasing
        // and no need to check after that
        else
            break;
    }
    return max;
}
 
/* Driver code*/
int main()
{
    int arr[] = {1_._ 30_._ 40_._ 50_._ 60_._ 70_._ 23_._ 20};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""The maximum element is "" << findMaximum(arr_._ 0_._ n-1);
    return 0;
}"
396, C++ Program for Count smaller elements on right side,"#include <iostream>
using namespace std;
 
void constructLowerArray(int arr[]_._ int* countSmaller_._
                         int n)
{
    int i_._ j;
 
    // Initialize all the counts in
    // countSmaller array as 0
    for (i = 0; i < n; i++)
        countSmaller[i] = 0;
 
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[i])
                countSmaller[i]++;
        }
    }
}
 
// Utility function that prints
// out an array on a line
void printArray(int arr[]_._ int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << "" "";
 
    cout << ""\n"";
}
 
// Driver code
int main()
{
    int arr[] = { 12_._ 1_._ 2_._ 3_._ 0_._ 11_._ 4 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int* low = (int*)malloc(sizeof(int) * n);
 
    constructLowerArray(arr_._ low_._ n);
    printArray(low_._ n);
 
    return 0;
}"
397, C++ Program for Minimum number of jumps to reach end,"#include <bits/stdc++.h>
using namespace std;
 
// Function to return the minimum number
// of jumps to reach arr[h] from arr[l]
int minJumps(int arr[]_._ int n)
{
 
    // Base case: when source and
    // destination are same
    if (n == 1)
        return 0;
 
    // Traverse through all the points
    // reachable from arr[l]
    // Recursively_._ get the minimum number
    // of jumps needed to reach arr[h] from
    // these reachable points
    int res = INT_MAX;
    for (int i = n - 2; i >= 0; i--) {
        if (i + arr[i] >= n - 1) {
            int sub_res = minJumps(arr_._ i + 1);
            if (sub_res != INT_MAX)
                res = min(res_._ sub_res + 1);
        }
    }
 
    return res;
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 3_._ 5_._ 8_._ 9_._ 2_._ 6_._ 7_._ 6_._ 8_._ 9 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""Minimum number of jumps to"";
    cout << "" reach the end is "" << minJumps(arr_._ n);
    return 0;
}
 "
398, C++ Program for Implement two stacks in an array,"#include <bits/stdc++.h>
using namespace std;
 
class twoStacks {
    int* arr;
    int size;
    int top1_._ top2;
 
public:
    // Constructor
    twoStacks(int n)
    {
        size = n;
        arr = new int[n];
        top1 = n / 2 + 1;
        top2 = n / 2;
    }
 
    // Method to push an element x to stack1
    void push1(int x)
    {
        // There is at least one empty
        // space for new element
        if (top1 > 0) {
            top1--;
            arr[top1] = x;
        }
        else {
            cout << ""Stack Overflow""
                 << "" By element : "" << x << endl;
            return;
        }
    }
 
    // Method to push an element
    // x to stack2
    void push2(int x)
    {
 
        // There is at least one empty
        // space for new element
        if (top2 < size - 1) {
            top2++;
            arr[top2] = x;
        }
        else {
            cout << ""Stack Overflow""
                 << "" By element : "" << x << endl;
            return;
        }
    }
 
    // Method to pop an element from first stack
    int pop1()
    {
        if (top1 <= size / 2) {
            int x = arr[top1];
            top1++;
            return x;
        }
        else {
            cout << ""Stack UnderFlow"";
            exit(1);
        }
    }
 
    // Method to pop an element
    // from second stack
    int pop2()
    {
        if (top2 >= size / 2 + 1) {
            int x = arr[top2];
            top2--;
            return x;
        }
        else {
            cout << ""Stack UnderFlow"" << endl;
            exit(1);
        }
    }
};
 
/* Driver program to test twoStacks class */
int main()
{
    twoStacks ts(5);
    ts.push1(5);
    ts.push2(10);
    ts.push2(15);
    ts.push1(11);
    ts.push2(7);
    cout << ""Popped element from stack1 is ""
         << "": "" << ts.pop1() << endl;
    ts.push2(40);
    cout << ""Popped element from stack2 is ""
         << "": "" << ts.pop2() << endl;
    return 0;
}"
399, C++ Program for Find subarray with given sum,"#include <bits/stdc++.h>
using namespace std;
 
/* Returns true if the there is a subarray
of arr[] with sum equal to 'sum' otherwise
returns false. Also_._ prints the result */
void subArraySum(int arr[]_._ int n_._ int sum)
{
 
    // Pick a starting point
    for (int i = 0; i < n; i++) {
        int currentSum = arr[i];
 
        if (currentSum == sum) {
            cout << ""Sum found at indexes "" << i << endl;
            return;
        }
        else {
            // Try all subarrays starting with 'i'
            for (int j = i + 1; j < n; j++) {
                currentSum += arr[j];
 
                if (currentSum == sum) {
                    cout << ""Sum found between indexes ""
                         << i << "" and "" << j << endl;
                    return;
                }
            }
        }
    }
    cout << ""No subarray found"";
    return;
}
 
// Driver Code
int main()
{
    int arr[] = { 15_._ 2_._ 4_._ 8_._ 9_._ 5_._ 10_._ 23 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 23;
    subArraySum(arr_._ n_._ sum);
    return 0;
}
 "
400, C++ Program for Dynamic Programming | Set 14 (Maximum Sum Increasing Subsequence),"#include <bits/stdc++.h>
using namespace std;
 
/* maxSumIS() returns the maximum
sum of increasing subsequence
in arr[] of size n */
int maxSumIS(int arr[]_._ int n)
{
    int i_._ j_._ max = 0;
    int msis[n];
 
    /* Initialize msis values
    for all indexes */
    for ( i = 0; i < n; i++ )
        msis[i] = arr[i];
 
    /* Compute maximum sum values
    in bottom up manner */
    for ( i = 1; i < n; i++ )
        for ( j = 0; j < i; j++ )
            if (arr[i] > arr[j] &&
                msis[i] < msis[j] + arr[i])
                msis[i] = msis[j] + arr[i];
 
    /* Pick maximum of
    all msis values */
    for ( i = 0; i < n; i++ )
        if ( max < msis[i] )
            max = msis[i];
 
    return max;
}
 
// Driver Code
int main()
{
    int arr[] = {1_._ 101_._ 2_._ 3_._ 100_._ 4_._ 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""Sum of maximum sum increasing ""
            ""subsequence is "" << maxSumIS( arr_._ n ) << endl;
    return 0;
}"
401, C++ Program for Longest Monotonically Increasing Subsequence Size (N log N),"#include <iostream>
#include <vector>
 
// Binary search (note boundaries in the caller)
int CeilIndex(std::vector<int>& v_._ int l_._ int r_._ int key)
{
    while (r - l > 1) {
        int m = l + (r - l) / 2;
        if (v[m] >= key)
            r = m;
        else
            l = m;
    }
 
    return r;
}
 
int LongestIncreasingSubsequenceLength(std::vector<int>& v)
{
    if (v.size() == 0)
        return 0;
 
    std::vector<int> tail(v.size()_._ 0);
    int length = 1; // always points empty slot in tail
 
    tail[0] = v[0];
    for (size_t i = 1; i < v.size(); i++) {
 
        // new smallest value
        if (v[i] < tail[0])
            tail[0] = v[i];
 
        // v[i] extends largest subsequence
        else if (v[i] > tail[length - 1])
            tail[length++] = v[i];
 
        // v[i] will become end candidate of an existing
        // subsequence or Throw away larger elements in all
        // LIS_._ to make room for upcoming greater elements
        // than v[i] (and also_._ v[i] would have already
        // appeared in one of LIS_._ identify the location
        // and replace it)
        else
            tail[CeilIndex(tail_._ -1_._ length - 1_._ v[i])] = v[i];
    }
 
    return length;
}
 
int main()
{
    std::vector<int> v{ 2_._ 5_._ 3_._ 7_._ 11_._ 8_._ 10_._ 13_._ 6 };
    std::cout << ""Length of Longest Increasing Subsequence is ""
              << LongestIncreasingSubsequenceLength(v) << '\n';
    return 0;
}"
402, C++ Program for Find a triplet that sum to a given value,"#include <bits/stdc++.h>
using namespace std;
 
// returns true if there is triplet with sum equal
// to 'sum' present in A[]. Also_._ prints the triplet
bool find3Numbers(int A[]_._ int arr_size_._ int sum)
{
    // Fix the first element as A[i]
    for (int i = 0; i < arr_size - 2; i++)
    {
 
        // Fix the second element as A[j]
        for (int j = i + 1; j < arr_size - 1; j++)
        {
 
            // Now look for the third number
            for (int k = j + 1; k < arr_size; k++)
            {
                if (A[i] + A[j] + A[k] == sum)
                {
                    cout << ""Triplet is "" << A[i] <<
                        ""_._ "" << A[j] << ""_._ "" << A[k];
                    return true;
                }
            }
        }
    }
 
    // If we reach here_._ then no triplet was found
    return false;
}
 
/* Driver code */
int main()
{
    int A[] = { 1_._ 4_._ 45_._ 6_._ 10_._ 8 };
    int sum = 22;
    int arr_size = sizeof(A) / sizeof(A[0]);
    find3Numbers(A_._ arr_size_._ sum);
    return 0;
}
 "
403, C++ Program for Find the smallest positive number missing from an unsorted array,"#include <bits/stdc++.h>
using namespace std;
 
// Function to return the first missing positive number from
// the given unsorted array
int firstMissingPos(int A[]_._ int n)
{
 
    // To mark the occurrence of elements
    bool present[n + 1] = { false };
 
    // Mark the occurrences
    for (int i = 0; i < n; i++) {
 
        // Only mark the required elements
        // All non-positive elements and the elements
        // greater n + 1 will never be the answer
        // For example_._ the array will be {1_._ 2_._ 3} in the
        // worst case and the result will be 4 which is n +
        // 1
        if (A[i] > 0 && A[i] <= n)
            present[A[i]] = true;
    }
 
    // Find the first element which didn't appear in the
    // original array
    for (int i = 1; i <= n; i++)
        if (!present[i])
            return i;
 
    // If the original array was of the type {1_._ 2_._ 3} in
    // its sorted form
    return n + 1;
}
 
// Driver code
int main()
{
 
    int arr[] = { 0_._ 10_._ 2_._ -10_._ -20 };
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << firstMissingPos(arr_._ size);
}"
404, C++ Program for Find the two numbers with odd occurrences in an unsorted array,"#include <bits/stdc++.h>
using namespace std;
 
/* Prints two numbers that occur odd number of times. The
function assumes that the array size is at least 2 and
there are exactly two numbers occurring odd number of times.
*/
 
void printTwoOdd(int arr[]_._ int size)
{
    /*Create map and calculate frequency of array of
     * elements using array.*/
 
    unordered_map<int_._ int> m;
    for (int i = 0; i < size; i++) {
        m[arr[i]]++;
    }
 
    /*Traverse through the map and check if its second
      element that is the frequency is odd or not.Then this
      is the odd occurring element .It is clearly mentioned
      in problem that there are only two odd occurring
      elements so this will print those two elements.*/
 
    cout << ""The two ODD elements are "";
    for (auto& x : m) {
        if (x.second % 2 != 0)
            cout << x.first << ""_._ "";
    }
}
 
/* Driver code */
int main()
{
    int arr[] = { 4_._ 2_._ 4_._ 5_._ 2_._ 3_._ 3_._ 1 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
    printTwoOdd(arr_._ arr_size);
    return 0;
}"
405, C++ Program for The Celebrity Problem,"#include <bits/stdc++.h>
#include <list>
using namespace std;
 
// Max # of persons in the party
#define N 8
 
// Person with 2 is celebrity
bool MATRIX[N][N] = { { 0_._ 0_._ 1_._ 0 }_._
                      { 0_._ 0_._ 1_._ 0 }_._
                      { 0_._ 0_._ 0_._ 0 }_._
                      { 0_._ 0_._ 1_._ 0 } };
 
bool knows(int a_._ int b) { return MATRIX[a][b]; }
 
// Returns -1 if celebrity
// is not present. If present_._
// returns id (value from 0 to n-1).
int findCelebrity(int n)
{
    // the graph needs not be constructed
    // as the edges can be found by
    // using knows function
 
    // degree array;
    int indegree[n] = { 0 }_._ outdegree[n] = { 0 };
 
    // query for all edges
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int x = knows(i_._ j);
 
            // set the degrees
            outdegree[i] += x;
            indegree[j] += x;
        }
    }
 
    // find a person with indegree n-1
    // and out degree 0
    for (int i = 0; i < n; i++)
        if (indegree[i] == n - 1 && outdegree[i] == 0)
            return i;
 
    return -1;
}
 
// Driver code
int main()
{
    int n = 4;
    int id = findCelebrity(n);
    id == -1 ? cout << ""No celebrity""
             : cout << ""Celebrity ID "" << id;
    return 0;
}"
406, C++ Program for Dynamic Programming | Set 15 (Longest Bitonic Subsequence),"#include<stdio.h>
#include<stdlib.h>
 int lbs( int arr[]_._ int n )
{
   int i_._ j;
  
   /* Allocate memory for LIS[] and initialize LIS values as 1 for
      all indexes */
   int *lis = new int[n];
   for (i = 0; i < n; i++)
      lis[i] = 1;
  
   /* Compute LIS values from left to right */
   for (i = 1; i < n; i++)
      for (j = 0; j < i; j++)
         if (arr[i] > arr[j] && lis[i] < lis[j] + 1)
            lis[i] = lis[j] + 1;
  
   /* Allocate memory for lds and initialize LDS values for
      all indexes */
   int *lds = new int [n];
   for (i = 0; i < n; i++)
      lds[i] = 1;
  
   /* Compute LDS values from right to left */
   for (i = n-2; i >= 0; i--)
      for (j = n-1; j > i; j--)
         if (arr[i] > arr[j] && lds[i] < lds[j] + 1)
            lds[i] = lds[j] + 1;
  
  
   /* Return the maximum value of lis[i] + lds[i] - 1*/
   int max = lis[0] + lds[0] - 1;
   for (i = 1; i < n; i++)
     if (lis[i] + lds[i] - 1 > max)
         max = lis[i] + lds[i] - 1;
   return max;
}
  
/* Driver program to test above function */
int main()
{
  int arr[] = {0_._ 8_._ 4_._ 12_._ 2_._ 10_._ 6_._ 14_._ 1_._ 9_._ 5_._
              13_._ 3_._ 11_._ 7_._ 15};
  int n = sizeof(arr)/sizeof(arr[0]);
  printf(""Length of LBS is %d\n""_._ lbs( arr_._ n ) );
  return 0;
}"
407, C++ Program for Find a sorted subsequence of size 3 in linear time,"#include <bits/stdc++.h>
using namespace std;
  
// A function to fund a sorted
// sub-sequence of size 3
void find3Numbers(int arr[]_._ int n)
{
    // Index of maximum element
    // from right side
    int max = n - 1;
  
    // Index of minimum element
    // from left side
    int min = 0;
    int i;
  
    // Create an array that will store
    // index of a smaller element on left side.
    // If there is no smaller element on left
    // side_._ then smaller[i] will be -1.
    int* smaller = new int[n];
  
    // first entry will always be -1
    smaller[0] = -1;
    for (i = 1; i < n; i++) {
        if (arr[i] <= arr[min]) {
            min = i;
            smaller[i] = -1;
        }
        else
            smaller[i] = min;
    }
  
    // Create another array that will
    // store index of a greater element
    // on right side. If there is no greater
    // element on right side_._ then
    // greater[i] will be -1.
    int* greater = new int[n];
  
    // last entry will always be -1
    greater[n - 1] = -1;
    for (i = n - 2; i >= 0; i--) {
        if (arr[i] >= arr[max]) {
            max = i;
            greater[i] = -1;
        }
        else
            greater[i] = max;
    }
  
    // Now find a number which has both
    // a greater number on right side and
    // smaller number on left side
    for (i = 0; i < n; i++) {
        if (smaller[i] != -1 && greater[i] != -1) {
            cout << arr[smaller[i]]
                 << "" "" << arr[i] << "" ""
                 << arr[greater[i]];
            return;
        }
    }
  
    // If we reach number_._ then there are
    // no such 3 numbers
    cout << ""No such triplet found"";
  
    // Free the dynamically allocated memory
    // to avoid memory leak
    delete[] smaller;
    delete[] greater;
  
    return;
}
  
// Driver code
int main()
{
    int arr[] = { 12_._ 11_._ 10_._ 5_._ 6_._ 2_._ 30 };
    int n = sizeof(arr) / sizeof(arr[0]);
    find3Numbers(arr_._ n);
    return 0;
    a greater number on
}"
408, C++ Program for Largest subarray with equal number of 0s and 1s,"#include <bits/stdc++.h>
 
using namespace std;
 
// This function Prints the starting and ending
// indexes of the largest subarray with equal
// number of 0s and 1s. Also returns the size
// of such subarray.
 
int findSubArray(int arr[]_._ int n)
{
    int sum = 0;
    int maxsize = -1_._ startindex;
 
    // Pick a starting point as i
    for (int i = 0; i < n - 1; i++) {
        sum = (arr[i] == 0) ? -1 : 1;
 
        // Consider all subarrays starting from i
        for (int j = i + 1; j < n; j++) {
            (arr[j] == 0) ? (sum += -1) : (sum += 1);
 
            // If this is a 0 sum subarray_._ then
            // compare it with maximum size subarray
            // calculated so far
            if (sum == 0 && maxsize < j - i + 1) {
                maxsize = j - i + 1;
                startindex = i;
            }
        }
    }
    if (maxsize == -1)
        cout << ""No such subarray"";
    else
        cout << startindex << "" to ""
             << startindex + maxsize - 1;
 
    return maxsize;
}
 
/* Driver code*/
int main()
{
    int arr[] = { 1_._ 0_._ 0_._ 1_._ 0_._ 1_._ 1 };
    int size = sizeof(arr) / sizeof(arr[0]);
 
    findSubArray(arr_._ size);
    return 0;
}"
409, C++ Program for Dynamic Programming | Set 18 (Partition problem),"#include <bits/stdc++.h>
using namespace std;
 
// A utility function that returns true if there is
// a subset of arr[] with sum equal to given sum
bool isSubsetSum(int arr[]_._ int n_._ int sum)
{
    // Base Cases
    if (sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
 
    // If last element is greater than sum_._ then
    // ignore it
    if (arr[n - 1] > sum)
        return isSubsetSum(arr_._ n - 1_._ sum);
 
    /* else_._ check if sum can be obtained by any of
        the following
        (a) including the last element
        (b) excluding the last element
    */
    return isSubsetSum(arr_._ n - 1_._ sum)
           || isSubsetSum(arr_._ n - 1_._ sum - arr[n - 1]);
}
 
// Returns true if arr[] can be partitioned in two
// subsets of equal sum_._ otherwise false
bool findPartiion(int arr[]_._ int n)
{
    // Calculate sum of the elements in array
    int sum = 0;
    for (int i = 0; i < n; i++)
        sum += arr[i];
 
    // If sum is odd_._ there cannot be two subsets
    // with equal sum
    if (sum % 2 != 0)
        return false;
 
    // Find if there is subset with sum equal to
    // half of total sum
    return isSubsetSum(arr_._ n_._ sum / 2);
}
 
// Driver code
int main()
{
    int arr[] = { 3_._ 1_._ 5_._ 9_._ 12 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    if (findPartiion(arr_._ n) == true)
        cout << ""Can be divided into two subsets ""
                ""of equal sum"";
    else
        cout << ""Can not be divided into two subsets""
                "" of equal sum"";
    return 0;
}"
410, C++ Program for Maximum Product Subarray,"#include <bits/stdc++.h>
using namespace std;
 
/* Returns the product of max product subarray.*/
int maxSubarrayProduct(int arr[]_._ int n)
{
    // Initializing result
    int result = arr[0];
 
    for (int i = 0; i < n; i++)
    {
        int mul = arr[i];
        // traversing in current subarray
        for (int j = i + 1; j < n; j++)
        {
            // updating result every time
            // to keep an eye over the maximum product
            result = max(result_._ mul);
            mul *= arr[j];
        }
        // updating the result for (n-1)th index.
        result = max(result_._ mul);
    }
    return result;
}
 
// Driver code
int main()
{
    int arr[] = { 1_._ -2_._ -3_._ 0_._ 7_._ -8_._ -2 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""Maximum Sub array product is ""
         << maxSubarrayProduct(arr_._ n);
    return 0;
}"
411, C++ Program for Find a pair with the given difference,"#include <bits/stdc++.h>
using namespace std;
 
// The function assumes that the array is sorted
bool findPair(int arr[]_._ int size_._ int n)
{
    // Initialize positions of two elements
    int i = 0;
    int j = 1;
 
    // Search for a pair
    while (i < size && j < size)
    {
        if (i != j && (arr[j] - arr[i] == n || arr[i] - arr[j] == n) )
        {
            cout << ""Pair Found: ("" << arr[i] <<
                        ""_._ "" << arr[j] << "")"";
            return true;
        }
        else if (arr[j]-arr[i] < n)
            j++;
        else
            i++;
    }
 
    cout << ""No such pair"";
    return false;
}
 
// Driver program to test above function
int main()
{
    int arr[] = {1_._ 8_._ 30_._ 40_._ 100};
    int size = sizeof(arr)/sizeof(arr[0]);
    int n = -60;
    findPair(arr_._ size_._ n);
    return 0;
}
 "
412, C++ Program for Replace every element with the next greatest,"#include <bits/stdc++.h>
using namespace std;
 
/* Function to replace every element with the
next greatest element */
void nextGreatest(int arr[]_._ int size)
{
    //Initialise maxFromRight with -1
    int maxFromRight = -1;
    int n = arr.length;
      // run loop from last and replace maxFromRight with the element in the array
    for(int i= n-1; i>=0;i--) {
      int temp = maxFromRight;
      if(arr[i]> maxFromRight){
        //replacing only array element with maxFromRight in case element is bigger
        maxFromRight = arr[i];
      }
      arr[i] = temp;
    }
    return arr;
}
 
/* A utility Function that prints an array */
void printArray(int arr[]_._ int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
 
/* Driver program to test above function */
int main()
{
    int arr[] = {16_._ 17_._ 4_._ 3_._ 5_._ 2};
    int size = sizeof(arr)/sizeof(arr[0]);
    nextGreatest (arr_._ size);
    cout << ""The modified array is: \n"";
    printArray (arr_._ size);
    return (0);
}"
413, C++ Program for Dynamic Programming | Set 20 (Maximum Length Chain of Pairs),"#include <bits/stdc++.h>
using namespace std;
 
// Structure for a Pair
class Pair
{
    public:
    int a;
    int b;
};
 
// This function assumes that arr[]
// is sorted in increasing order
// according the first
// (or smaller) values in Pairs.
int maxChainLength( Pair arr[]_._ int n)
{
    int i_._ j_._ max = 0;
    int *mcl = new int[sizeof( int ) * n ];
     
    /* Initialize MCL (max chain length)
    values for all indexes */
    for ( i = 0; i < n; i++ )
        mcl[i] = 1;
     
    /* Compute optimized chain
    length values in bottom up manner */
    for ( i = 1; i < n; i++ )
        for ( j = 0; j < i; j++ )
            if ( arr[i].a > arr[j].b &&
                    mcl[i] < mcl[j] + 1)
                mcl[i] = mcl[j] + 1;
     
    // mcl[i] now stores the maximum
    // chain length ending with Pair i
     
    /* Pick maximum of all MCL values */
    for ( i = 0; i < n; i++ )
        if ( max < mcl[i] )
            max = mcl[i];
     
    /* Free memory to avoid memory leak */
     
    return max;
}
     
 
/* Driver code */
int main()
{
    Pair arr[] = { {5_._ 24}_._ {15_._ 25}_._
                        {27_._ 40}_._ {50_._ 60} };
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""Length of maximum size chain is ""
                  << maxChainLength( arr_._ n );
    return 0;
}"
414, C++ Program for Find four elements that sum to a given value | Set 1 (n^3 solution),"#include <bits/stdc++.h>
using namespace std;
 
/* A naive solution to print all combination
of 4 elements in A[]with sum equal to X */
void findFourElements(int A[]_._ int n_._ int X)
{
     
// Fix the first element and find other three
for (int i = 0; i < n - 3; i++)
{
    // Fix the second element and find other two
    for (int j = i + 1; j < n - 2; j++)
    {
         
        // Fix the third element and find the fourth
        for (int k = j + 1; k < n - 1; k++)
        {
            // find the fourth
            for (int l = k + 1; l < n; l++)
            if (A[i] + A[j] + A[k] + A[l] == X)
                cout << A[i] <<""_._ "" << A[j]
                     << ""_._ "" << A[k] << ""_._ "" << A[l];
        }
    }
}
}
 
// Driver Code
int main()
{
    int A[] = {10_._ 20_._ 30_._ 40_._ 1_._ 2};
    int n = sizeof(A) / sizeof(A[0]);
    int X = 91;
    findFourElements (A_._ n_._ X);
    return 0;
}"
415, C++ Program for Find four elements that sum to a given value | Set 2 ( O(n^2Logn) Solution),"#include <bits/stdc++.h>
using namespace std;
 
// The following structure is needed
// to store pair sums in aux[]
class pairSum {
public:
    // index (int A[]) of first element in pair
    int first;
 
    // index of second element in pair
    int sec;
 
    // sum of the pair
    int sum;
};
 
// Following function is needed
// for library function qsort()
int compare(const void* a_._ const void* b)
{
    return ((*(pairSum*)a).sum - (*(pairSum*)b).sum);
}
 
// Function to check if two given pairs
// have any common element or not
bool noCommon(pairSum a_._ pairSum b)
{
    if (a.first == b.first || a.first == b.sec
        || a.sec == b.first || a.sec == b.sec)
        return false;
    return true;
}
 
// The function finds four
// elements with given sum X
void findFourElements(int arr[]_._ int n_._ int X)
{
    int i_._ j;
 
    // Create an auxiliary array
    // to store all pair sums
    int size = (n * (n - 1)) / 2;
    pairSum aux[size];
 
    // Generate all possible pairs
    // from A[] and store sums
    // of all possible pairs in aux[]
    int k = 0;
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            aux[k].sum = arr[i] + arr[j];
            aux[k].first = i;
            aux[k].sec = j;
            k++;
        }
    }
 
    // Sort the aux[] array using
    // library function for sorting
    qsort(aux_._ size_._ sizeof(aux[0])_._ compare);
 
    // Now start two index variables
    // from two corners of array
    // and move them toward each other.
    i = 0;
    j = size - 1;
    while (i < size && j >= 0) {
        if ((aux[i].sum + aux[j].sum == X)
            && noCommon(aux[i]_._ aux[j])) {
            cout << arr[aux[i].first] << ""_._ ""
                 << arr[aux[i].sec] << ""_._ ""
                 << arr[aux[j].first] << ""_._ ""
                 << arr[aux[j].sec] << endl;
            return;
        }
        else if (aux[i].sum + aux[j].sum < X)
            i++;
        else
            j--;
    }
}
 
// Driver code
int main()
{
    int arr[] = { 10_._ 20_._ 30_._ 40_._ 1_._ 2 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int X = 91;
   
    // Function Call
    findFourElements(arr_._ n_._ X);
    return 0;
}"
416, C++ Program for Sort a nearly sorted (or K sorted) array,"
#include <bits/stdc++.h>
using namespace std;
 
void insertionSort(int A[]_._ int size)
{
    int i_._ key_._ j;
    for (i = 1; i < size; i++) {
        key = A[i];
        j = i - 1;
 
        /* Move elements of A[0..i-1]_._ that are
           greater than key_._ to one
           position ahead of their current position.
           This loop will run at most k times */
        while (j >= 0 && A[j] > key) {
            A[j + 1] = A[j];
            j = j - 1;
        }
        A[j + 1] = key;
    }
   
  for(int i=0; i<size; i++)
      cout<<A[i]<<"" "";
   
  cout<<endl;
}
 
int main()
{
      int A[] = {6_._ 5_._ 3_._ 2_._ 8_._ 10_._ 9};
      int size = 7;
      insertionSort(A_._ size);   
   
    return 0;
}"
417, C++ Program for Maximum circular subarray sum,"#include <bits/stdc++.h>
using namespace std;
 
// The function returns maximum
// circular contiguous sum in a[]
int maxCircularSum(int a[]_._ int n)
{
    // Corner Case
    if (n == 1)
        return a[0];
 
    // Initialize sum variable which store total sum of the array.
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += a[i];
    }
 
    // Initialize every variable with first value of array.
    int curr_max = a[0]_._ max_so_far = a[0]_._ curr_min = a[0]_._ min_so_far = a[0];
 
    // Concept of Kadane's Algorithm
    for (int i = 1; i < n; i++) {
        // Kadane's Algorithm to find Maximum subarray sum.
        curr_max = max(curr_max + a[i]_._ a[i]);
        max_so_far = max(max_so_far_._ curr_max);
 
        // Kadane's Algorithm to find Minimum subarray sum.
        curr_min = min(curr_min + a[i]_._ a[i]);
        min_so_far = min(min_so_far_._ curr_min);
    }
 
    if (min_so_far == sum)
        return max_so_far;
 
    // returning the maximum value
    return max(max_so_far_._ sum - min_so_far);
}
 
/* Driver program to test maxCircularSum() */
int main()
{
    int a[] = { 11_._ 10_._ -20_._ 5_._ -3_._ -5_._ 8_._ -13_._ 10 };
    int n = sizeof(a) / sizeof(a[0]);
    cout << ""Maximum circular sum is "" << maxCircularSum(a_._ n) << endl;
    return 0;
}"
418, C++ Program for Find the row with maximum number of 1s,"#include <bits/stdc++.h>
using namespace std;
#define R 4
#define C 4
 
// Function that returns index of row
// with maximum number of 1s.
int rowWithMax1s(bool mat[R][C]) {
    // code here
    int rowIndex = -1 ;
    int maxCount = 0 ;
     
    for(int i = 0 ; i < R ; i++){
        int count = 0 ;
        for(int j = 0 ; j < C ; j++ ){
            if(mat[i][j] == 1){
                count++ ;
            }
        }
        if(count > maxCount){
            maxCount = count ;
            rowIndex = i ;
        }
    }
     
    return rowIndex ;
}
 
 
// Driver Code
int main()
{
    bool mat[R][C] = { {0_._ 0_._ 0_._ 1}_._
                    {0_._ 1_._ 1_._ 1}_._
                    {1_._ 1_._ 1_._ 1}_._
                    {0_._ 0_._ 0_._ 0}};
 
    cout << ""Index of row with maximum 1s is "" << rowWithMax1s(mat);
 
    return 0;
}"
419, C++ Program for Median of two sorted arrays of different sizes,"#include <bits/stdc++.h>
using namespace std;
 
int Solution(int arr[]_._ int n)
{
  
    // If length of array is even
     if (n % 2 == 0)
     {
       int z = n / 2;
       int e = arr[z];
       int q = arr[z - 1];
       int ans = (e + q) / 2;
       return ans;
     }
    
     // If length if array is odd
    else
     {
       int z = round(n / 2);
       return arr[z];
     }
}
 
 // Driver Code
int main() {
    
        // TODO Auto-generated method stub
        int arr1[] = { -5_._ 3_._ 6_._ 12_._ 15 };
        int arr2[] = { -12_._ -10_._ -6_._ -3_._ 4_._ 10 };
 
        int i =  sizeof(arr1) / sizeof(arr1[0]);
        int j =  sizeof(arr2) / sizeof(arr2[0]);
 
        int arr3[i+j];
        int l =  i+j;
        // Merge two array into one array
        for(int k=0;k<i;k++)
        {
            arr3[k]=arr1[k];
        }
          
        int a=0; 
        for(int k=i;k<l;k++)
        {
            arr3[k]=arr2[a++];
        }
 
        // Sort the merged array
        sort(arr3_._arr3+l);
 
        // calling the method
        cout<<""Median = "" << Solution(arr3_._ l);
}"
420, C++ Program for Print unique rows in a given boolean matrix,"#include <bits/stdc++.h>
using namespace std;
#define ROW 4
#define COL 5
 
// The main function that prints
// all unique rows in a given matrix.
void findUniqueRows(int M[ROW][COL])
{
    //Traverse through the matrix
    for(int i=0; i<ROW; i++)
    {
        int flag=0;
         
        //check if there is similar column
        //is already printed_._ i.e if i and
        //jth column match.
        for(int j=0; j<i; j++)
        {
            flag=1;
             
            for(int k=0; k<=COL; k++)
            if(M[i][k]!=M[j][k])
                flag=0;
             
            if(flag==1)
            break;
        }
         
        //if no row is similar
        if(flag==0)
        {
            //print the row
            for(int j=0; j<COL; j++)
                cout<<M[i][j]<<"" "";
            cout<<endl;
        }
    }
}
 
// Driver Code
int main()
{
    int M[ROW][COL] = {{0_._ 1_._ 0_._ 0_._ 1}_._
                       {1_._ 0_._ 1_._ 1_._ 0}_._
                       {0_._ 1_._ 0_._ 0_._ 1}_._
                       {1_._ 0_._ 1_._ 0_._ 0}};
 
    findUniqueRows(M);
 
    return 0;
}"
421, C++ Program for Shuffle a given array,"#include<bits/stdc++.h>
#include <stdlib.h>
#include <time.h>
using namespace std;
 
// A utility function to swap to integers
void swap (int *a_._ int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 
// A utility function to print an array
void printArray (int arr[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
    cout << ""\n"";
}
 
// A function to generate a random
// permutation of arr[]
void randomize (int arr[]_._ int n)
{
    // Use a different seed value so that
    // we don't get same result each time
    // we run this program
    srand (time(NULL));
 
    // Start from the last element and swap
    // one by one. We don't need to run for
    // the first element that's why i > 0
    for (int i = n - 1; i > 0; i--)
    {
        // Pick a random index from 0 to i
        int j = rand() % (i + 1);
 
        // Swap arr[i] with the element
        // at random index
        swap(&arr[i]_._ &arr[j]);
    }
}
 
// Driver Code
int main()
{
    int arr[] = {1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 7_._ 8};
    int n = sizeof(arr) / sizeof(arr[0]);
    randomize (arr_._ n);
    printArray(arr_._ n);
 
    return 0;
}"
422, C++ Program for Count the number of possible triangles,"#include <bits/stdc++.h>
using namespace std;
 
// Function to count all possible triangles with arr[]
// elements
int findNumberOfTriangles(int arr[]_._ int n)
{
    // Count of triangles
    int count = 0;
 
    // The three loops select three different values from
    // array
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
 
            // The innermost loop checks for the triangle
            // property
            for (int k = j + 1; k < n; k++)
 
                // Sum of two sides is greater than the
                // third
                if (arr[i] + arr[j] > arr[k]
                    && arr[i] + arr[k] > arr[j]
                    && arr[k] + arr[j] > arr[i])
                    count++;
        }
    }
    return count;
}
 
// Driver code
int main()
{
    int arr[] = { 10_._ 21_._ 22_._ 100_._ 101_._ 200_._ 300 };
    int size = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    cout << ""Total number of triangles possible is ""
         << findNumberOfTriangles(arr_._ size);
    return 0;
}"
423, C++ Program for Iterative Quick Sort,"#include <bits/stdc++.h>
 
using namespace std;
 
// Function to swap numbers
void swap(int* a_._ int* b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 
/* This function takes last element as pivot_._
   places the pivot element at its correct
   position in sorted  array_._ and places
   all smaller (smaller than pivot) to left
   of pivot and all greater elements to
   right of pivot */
int partition(int arr[]_._ int l_._ int h)
{
    int x = arr[h];
    int i = (l - 1);
 
    for (int j = l; j <= h - 1; j++) {
        if (arr[j] <= x) {
            i++;
            swap(&arr[i]_._ &arr[j]);
        }
    }
    swap(&arr[i + 1]_._ &arr[h]);
    return (i + 1);
}
 
/* A[] --> Array to be sorted_._
l --> Starting index_._
h --> Ending index */
void quickSort(int A[]_._ int l_._ int h)
{
    if (l < h) {
        /* Partitioning index */
        int p = partition(A_._ l_._ h);
        quickSort(A_._ l_._ p - 1);
        quickSort(A_._ p + 1_._ h);
    }
}
 
// Driver code
int main()
{
 
    int n = 5;
    int arr[n] = { 4_._ 2_._ 6_._ 9_._ 2 };
 
    quickSort(arr_._ 0_._ n - 1);
 
    for (int i = 0; i < n; i++) {
        cout << arr[i] << "" "";
    }
 
    return 0;
}"
424, C++ Program for Inplace M x N size matrix transpose | Updated,"#include <bits/stdc++.h>
#define HASH_SIZE 128
 
using namespace std;
 
// A utility function to print a 2D array
// of size nr x nc and base address A
void Print2DArray(int *A_._ int nr_._ int nc)
{
    for(int r = 0; r < nr; r++)
    {
        for(int c = 0; c < nc; c++)
        {
            cout<<setw(4)<<*(A + r*nc + c);
        }
 
        cout<<endl;
    }
 
    cout<<endl;
}
 
// Non-square matrix transpose of
// matrix of size r x c and base address A
void MatrixInplaceTranspose(int *A_._ int r_._ int c)
{
    int size = r*c - 1;
    int t; // holds element to be replaced_._
           // eventually becomes next element to move
    int next; // location of 't' to be moved
    int cycleBegin; // holds start of cycle
    int i; // iterator
    bitset<HASH_SIZE> b; // hash to mark moved elements
 
    b.reset();
    b[0] = b[size] = 1;
    i = 1; // Note that A[0] and A[size-1] won't move
    while (i < size)
    {
        cycleBegin = i;
        t = A[i];
        do
        {
            // Input matrix [r x c]
            // Output matrix
            // i_new = (i*r)%(N-1)
            next = (i*r)%size;
            swap(A[next]_._ t);
            b[i] = 1;
            i = next;
        }
        while (i != cycleBegin);
 
        // Get Next Move (what about querying random location?)
        for (i = 1; i < size && b[i]; i++)
            ;
        cout << endl;
    }
}
 
// Driver program to test above function
int main()
{
    int r = 5_._ c = 6;
    int size = r*c;
    int *A = new int[size];
 
    for(int i = 0; i < size; i++)
        A[i] = i+1;
 
    Print2DArray(A_._ r_._ c);
    MatrixInplaceTranspose(A_._ r_._ c);
    Print2DArray(A_._ c_._ r);
 
    delete[] A;
 
    return 0;
}"
425, C++ Program for Find the number of islands,"#include <bits/stdc++.h>
using namespace std;
 
#define ROW 5
#define COL 5
 
// A function to check if a given
// cell (row_._ col) can be included in DFS
int isSafe(int M[][COL]_._ int row_._ int col_._
           bool visited[][COL])
{
    // row number is in range_._ column
    // number is in range and value is 1
    // and not yet visited
    return (row >= 0) && (row < ROW) && (col >= 0)
           && (col < COL)
           && (M[row][col] && !visited[row][col]);
}
 
// A utility function to do DFS for a
// 2D boolean matrix. It only considers
// the 8 neighbours as adjacent vertices
void DFS(int M[][COL]_._ int row_._ int col_._
         bool visited[][COL])
{
    // These arrays are used to get
    // row and column numbers of 8
    // neighbours of a given cell
    static int rowNbr[] = { -1_._ -1_._ -1_._ 0_._ 0_._ 1_._ 1_._ 1 };
    static int colNbr[] = { -1_._ 0_._ 1_._ -1_._ 1_._ -1_._ 0_._ 1 };
 
    // Mark this cell as visited
    visited[row][col] = true;
 
    // Recur for all connected neighbours
    for (int k = 0; k < 8; ++k)
        if (isSafe(M_._ row + rowNbr[k]_._ col + colNbr[k]_._
                   visited))
            DFS(M_._ row + rowNbr[k]_._ col + colNbr[k]_._
                visited);
}
 
// The main function that returns
// count of islands in a given boolean
// 2D matrix
int countIslands(int M[][COL])
{
    // Make a bool array to mark visited cells.
    // Initially all cells are unvisited
    bool visited[ROW][COL];
    memset(visited_._ 0_._ sizeof(visited));
 
    // Initialize count as 0 and
    // traverse through the all cells of
    // given matrix
    int count = 0;
    for (int i = 0; i < ROW; ++i)
        for (int j = 0; j < COL; ++j)
 
            // If a cell with value 1 is not
            if (M[i][j] && !visited[i][j]) {
                // visited yet_._ then new island found
                // Visit all cells in this island.
                DFS(M_._ i_._ j_._ visited);
 
                // and increment island count
                ++count;
            }
 
    return count;
}
 
// Driver code
int main()
{
    int M[][COL] = { { 1_._ 1_._ 0_._ 0_._ 0 }_._
                     { 0_._ 1_._ 0_._ 0_._ 1 }_._
                     { 1_._ 0_._ 0_._ 1_._ 1 }_._
                     { 0_._ 0_._ 0_._ 0_._ 0 }_._
                     { 1_._ 0_._ 1_._ 0_._ 1 } };
 
    cout << ""Number of islands is: "" << countIslands(M);
 
    return 0;
}"
426, C++ Program for Construction of Longest Monotonically Increasing Subsequence (N log N),"#include <bits/stdc++.h>
using namespace std;
 
// Binary search
int GetCeilIndex(int arr[]_._ vector<int>& T_._ int l_._ int r_._
                 int key)
{
    while (r - l > 1) {
        int m = l + (r - l) / 2;
        if (arr[T[m]] >= key)
            r = m;
        else
            l = m;
    }
 
    return r;
}
 
int LongestIncreasingSubsequence(int arr[]_._ int n)
{
    // Add boundary case_._ when array n is zero
    // Depend on smart pointers
 
    vector<int> tailIndices(n_._ 0); // Initialized with 0
    vector<int> prevIndices(n_._ -1); // initialized with -1
 
    int len = 1; // it will always point to empty location
    for (int i = 1; i < n; i++) {
        if (arr[i] < arr[tailIndices[0]]) {
            // new smallest value
            tailIndices[0] = i;
        }
        else if (arr[i] > arr[tailIndices[len - 1]]) {
            // arr[i] wants to extend largest subsequence
            prevIndices[i] = tailIndices[len - 1];
            tailIndices[len++] = i;
        }
        else {
            // arr[i] wants to be a potential condidate of
            // future subsequence
            // It will replace ceil value in tailIndices
            int pos = GetCeilIndex(arr_._ tailIndices_._ -1_._
                                   len - 1_._ arr[i]);
 
            prevIndices[i] = tailIndices[pos - 1];
            tailIndices[pos] = i;
        }
    }
 
    cout << ""LIS of given input"" << endl;
    for (int i = tailIndices[len - 1]; i >= 0; i = prevIndices[i])
        cout << arr[i] << "" "";
    cout << endl;
 
    return len;
}
 
int main()
{
    int arr[] = { 2_._ 5_._ 3_._ 7_._ 11_._ 8_._ 10_._ 13_._ 6 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    printf(""LIS size %d\n""_._ LongestIncreasingSubsequence(arr_._ n));
 
    return 0;
}"
427, C++ Program for Find the first circular tour that visits all petrol pumps,"#include <bits/stdc++.h>
using namespace std;
 
// A petrol pump has petrol and distance to next petrol pump
class petrolPump
{
    public:
    int petrol;
    int distance;
};
 
// The function returns starting point if there is a possible solution_._
// otherwise returns -1
int printTour(petrolPump arr[]_._ int n)
{
    // Consider first petrol pump as a starting point
    int start = 0;
    int end = 1;
 
    int curr_petrol = arr[start].petrol - arr[start].distance;
 
    /* Run a loop while all petrol pumps are not visited.
    And we have reached first petrol pump again with 0 or more petrol */
    while (end != start || curr_petrol < 0)
    {
        // If current amount of petrol in truck becomes less than 0_._ then
        // remove the starting petrol pump from tour
        while (curr_petrol < 0 && start != end)
        {
            // Remove starting petrol pump. Change start
            curr_petrol -= arr[start].petrol - arr[start].distance;
            start = (start + 1) % n;
 
            // If 0 is being considered as start again_._ then there is no
            // possible solution
            if (start == 0)
            return -1;
        }
 
        // Add a petrol pump to current tour
        curr_petrol += arr[end].petrol - arr[end].distance;
 
        end = (end + 1) % n;
    }
 
    // Return starting point
    return start;
}
 
// Driver code
int main()
{
    petrolPump arr[] = {{6_._ 4}_._ {3_._ 6}_._ {7_._ 3}};
 
    int n = sizeof(arr)/sizeof(arr[0]);
    int start = printTour(arr_._ n);
 
    (start == -1)? cout<<""No solution"": cout<<""Start = ""<<start;
 
    return 0;
}"
428, C++ Program for Arrange given numbers to form the biggest number,"#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
 
// A comparison function which
// is used by sort() in
// printLargest()
int myCompare(string X_._ string Y)
{
    // first append Y at the end of X
    string XY = X.append(Y);
 
    // then append X at the end of Y
    string YX = Y.append(X);
 
    // Now see which of the two
    // formed numbers is greater
    return XY.compare(YX) > 0 ? 1 : 0;
}
 
// The main function that prints
// the arrangement with the
// largest value. The function
// accepts a vector of strings
void printLargest(vector<string> arr)
{
     
    // Sort the numbers using
    // library sort function. The
    // function uses our comparison
    // function myCompare() to
    // compare two strings. See
    // http://www.cplusplus.com/reference/
    // algorithm/sort/
    // for details
    sort(arr.begin()_._ arr.end()_._ myCompare);
 
    for (int i = 0; i < arr.size(); i++)
        cout << arr[i];
}
 
// Driver code
int main()
{
    vector<string> arr;
 
    // output should be 6054854654
    arr.push_back(""54"");
    arr.push_back(""546"");
    arr.push_back(""548"");
    arr.push_back(""60"");
    printLargest(arr);
 
    return 0;
}"
429, C++ Program for Dynamic Programming | Set 27 (Maximum sum rectangle in a 2D matrix),"#include <bits/stdc++.h>
using namespace std;
 
#define ROW 4
#define COL 5
 
// Implementation of Kadane's algorithm for
// 1D array. The function returns the maximum
// sum and stores starting and ending indexes
// of the maximum sum subarray at addresses
// pointed by start and finish pointers
// respectively.
int kadane(int* arr_._ int* start_._ int* finish_._ int n)
{
    // initialize sum_._ maxSum and
    int sum = 0_._ maxSum = INT_MIN_._ i;
 
    // Just some initial value to check
    // for all negative values case
    *finish = -1;
 
    // local variable
    int local_start = 0;
 
    for (i = 0; i < n; ++i)
    {
        sum += arr[i];
        if (sum < 0)
        {
            sum = 0;
            local_start = i + 1;
        }
        else if (sum > maxSum)
        {
            maxSum = sum;
            *start = local_start;
            *finish = i;
        }
    }
 
    // There is at-least one
    // non-negative number
    if (*finish != -1)
        return maxSum;
 
    // Special Case: When all numbers
    // in arr[] are negative
    maxSum = arr[0];
    *start = *finish = 0;
 
    // Find the maximum element in array
    for (i = 1; i < n; i++)
    {
        if (arr[i] > maxSum)
        {
            maxSum = arr[i];
            *start = *finish = i;
        }
    }
    return maxSum;
}
 
// The main function that finds
// maximum sum rectangle in M[][]
void findMaxSum(int M[][COL])
{
    // Variables to store the final output
    int maxSum = INT_MIN_._
                 finalLeft_._
                 finalRight_._
                 finalTop_._
                 finalBottom;
 
    int left_._ right_._ i;
    int temp[ROW]_._ sum_._ start_._ finish;
 
    // Set the left column
    for (left = 0; left < COL; ++left) {
        // Initialize all elements of temp as 0
        memset(temp_._ 0_._ sizeof(temp));
 
        // Set the right column for the left
        // column set by outer loop
        for (right = left; right < COL; ++right) {
 
            // Calculate sum between current left
            // and right for every row 'i'
            for (i = 0; i < ROW; ++i)
                temp[i] += M[i][right];
 
            // Find the maximum sum subarray in temp[].
            // The kadane() function also sets values
            // of start and finish. So 'sum' is sum of
            // rectangle between (start_._ left) and
            // (finish_._ right) which is the maximum sum
            // with boundary columns strictly as left
            // and right.
            sum = kadane(temp_._ &start_._ &finish_._ ROW);
 
            // Compare sum with maximum sum so far.
            // If sum is more_._ then update maxSum and
            // other output values
            if (sum > maxSum) {
                maxSum = sum;
                finalLeft = left;
                finalRight = right;
                finalTop = start;
                finalBottom = finish;
            }
        }
    }
 
    // Print final values
    cout << ""(Top_._ Left) (""
         << finalTop << ""_._ ""
         << finalLeft
         << "")"" << endl;
    cout << ""(Bottom_._ Right) (""
         << finalBottom << ""_._ ""
         << finalRight << "")"" << endl;
    cout << ""Max sum is: "" << maxSum << endl;
}
 
// Driver Code
int main()
{
    int M[ROW][COL] = { { 1_._ 2_._ -1_._ -4_._ -20 }_._
                        { -8_._ -3_._ 4_._ 2_._ 1 }_._
                        { 3_._ 8_._ 10_._ 1_._ 3 }_._
                        { -4_._ -1_._ 1_._ 7_._ -6 } };
 
    // Function call
    findMaxSum(M);
 
    return 0;
}"
430, C++ Program for Pancake sorting,"#include<bits/stdc++.h> 
using namespace std; 
  
/* Reverses arr[0..i] */
void flip(int arr[]_._ int i) 
{ 
    int temp_._ start = 0; 
    while (start < i) 
    { 
        temp = arr[start]; 
        arr[start] = arr[i]; 
        arr[i] = temp; 
        start++; 
        i--; 
    } 
} 
  
// Returns index of the 
// maximum element in 
// arr[0..n-1] 
int findMax(int arr[]_._ int n) 
{ 
int mi_._ i; 
for (mi = 0_._ i = 0; i < n; ++i) 
    if (arr[i] > arr[mi]) 
            mi = i; 
return mi; 
} 
  
// The main function that 
// sorts given array using 
// flip operations 
void pancakeSort(int *arr_._ int n) 
{ 
    // Start from the complete 
    // array and one by one 
    // reduce current size 
    // by one 
    for (int curr_size = n; curr_size > 1; 
                               --curr_size) 
    { 
        // Find index of the 
        // maximum element in 
        // arr[0..curr_size-1] 
        int mi = findMax(arr_._ curr_size); 
  
        // Move the maximum 
        // element to end of 
        // current array if 
        // it's not already 
        // at the end 
        if (mi != curr_size-1) 
        { 
            // To move at the end_._ 
            // first move maximum 
            // number to beginning 
            flip(arr_._ mi); 
  
            // Now move the maximum 
            // number to end by 
            // reversing current array 
            flip(arr_._ curr_size-1); 
        } 
    } 
} 
  
// A utility function to print 
// n array of size n 
void printArray(int arr[]_._ int n) 
{ 
    for (int i = 0; i < n; ++i) 
        cout<< arr[i]<<"" ""; 
} 
  
// Driver program to test above function 
int main() 
{ 
    int arr[] = {23_._ 10_._ 20_._ 11_._ 12_._ 6_._ 7}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
  
    pancakeSort(arr_._ n); 
  
    cout<<""Sorted Array ""<<endl; 
    printArray(arr_._ n); 
  
    return 0; 
}"
431, C++ Program for A Pancake Sorting Problem,"#include<bits/stdc++.h>
using namespace std;
 
/* A Binary Search based function to
get index of ceiling of x in
arr[low..high] */
int ceilSearch(int arr[]_._ int low_._ int high_._ int x)
{
    int mid;
 
    /* If x is smaller than or equal
    to the first element_._
    then return the first element */
    if(x <= arr[low])
        return low;
 
    /* If x is greater than the
    last element_._ then return -1 */
    if(x > arr[high])
        return -1;
 
    /* get the index of middle
    element of arr[low..high]*/
    mid = (low + high)/2; /* low + (high – low)/2 */
 
    /* If x is same as middle
    element_._ then return mid */
    if(arr[mid] == x)
        return mid;
 
    /* If x is greater than arr[mid]_._
    then either arr[mid + 1]
    is ceiling of x_._ or ceiling
    lies in arr[mid+1...high] */
    if(arr[mid] < x)
    {
        if(mid + 1 <= high && x <= arr[mid+1])
            return mid + 1;
        else
            return ceilSearch(arr_._ mid+1_._ high_._ x);
    }
 
    /* If x is smaller than arr[mid]_._ then either arr[mid]
    is ceiling of x or ceiling lies in arr[mid-1...high] */
    if (mid - 1 >= low && x > arr[mid-1])
        return mid;
    else
        return ceilSearch(arr_._ low_._ mid - 1_._ x);
}
 
/* Reverses arr[0..i] */
void flip(int arr[]_._ int i)
{
    int temp_._ start = 0;
    while (start < i)
    {
        temp = arr[start];
        arr[start] = arr[i];
        arr[i] = temp;
        start++;
        i--;
    }
}
 
/* Function to sort an array using
insertion sort_._ binary search and flip */
void insertionSort(int arr[]_._ int size)
{
    int i_._ j;
 
    // Start from the second element
    // and one by one insert arr[i]
    // in already sorted arr[0..i-1]
    for(i = 1; i < size; i++)
    {
        // Find the smallest element in arr[0..i-1]
        // which is also greater than
        // or equal to arr[i]
        int j = ceilSearch(arr_._ 0_._ i-1_._ arr[i]);
 
        // Check if there was no element
        // greater than arr[i]
        if (j != -1)
        {
            // Put arr[i] before arr[j] using
            // following four flip operations
            flip(arr_._ j-1);
            flip(arr_._ i-1);
            flip(arr_._ i);
            flip(arr_._ j);
        }
    }
}
 
/* A utility function to print an array of size n */
void printArray(int arr[]_._ int n)
{
    int i;
    for (i = 0; i < n; ++i)
        cout<<arr[i]<<"" "";
}
 
/* Driver code */
int main()
{
    int arr[] = {18_._ 40_._ 35_._ 12_._ 30_._ 35_._ 20_._ 6_._ 90_._ 80};
    int n = sizeof(arr)/sizeof(arr[0]);
    insertionSort(arr_._ n);
    printArray(arr_._ n);
    return 0;
}"
432, C++ Program for Tug of War,"#include <bits/stdc++.h>
using namespace std;
 
// function that tries every possible solution by calling itself recursively
void TOWUtil(int* arr_._ int n_._ bool* curr_elements_._ int no_of_selected_elements_._
             bool* soln_._ int* min_diff_._ int sum_._ int curr_sum_._ int curr_position)
{
    // checks whether the it is going out of bound
    if (curr_position == n)
        return;
 
    // checks that the numbers of elements left are not less than the
    // number of elements required to form the solution
    if ((n/2 - no_of_selected_elements) > (n - curr_position))
        return;
 
    // consider the cases when current element is not included in the solution
    TOWUtil(arr_._ n_._ curr_elements_._ no_of_selected_elements_._
              soln_._ min_diff_._ sum_._ curr_sum_._ curr_position+1);
 
    // add the current element to the solution
    no_of_selected_elements++;
    curr_sum = curr_sum + arr[curr_position];
    curr_elements[curr_position] = true;
 
    // checks if a solution is formed
    if (no_of_selected_elements == n/2)
    {
        // checks if the solution formed is better than the best solution so far
        if (abs(sum/2 - curr_sum) < *min_diff)
        {
            *min_diff = abs(sum/2 - curr_sum);
            for (int i = 0; i<n; i++)
                soln[i] = curr_elements[i];
        }
    }
    else
    {
        // consider the cases where current element is included in the solution
        TOWUtil(arr_._ n_._ curr_elements_._ no_of_selected_elements_._ soln_._
                  min_diff_._ sum_._ curr_sum_._ curr_position+1);
    }
 
    // removes current element before returning to the caller of this function
    curr_elements[curr_position] = false;
}
 
// main function that generate an arr
void tugOfWar(int *arr_._ int n)
{
    // the boolean array that contains the inclusion and exclusion of an element
    // in current set. The number excluded automatically form the other set
    bool* curr_elements = new bool[n];
 
    // The inclusion/exclusion array for final solution
    bool* soln = new bool[n];
 
    int min_diff = INT_MAX;
 
    int sum = 0;
    for (int i=0; i<n; i++)
    {
        sum += arr[i];
        curr_elements[i] =  soln[i] = false;
    }
 
    // Find the solution using recursive function TOWUtil()
    TOWUtil(arr_._ n_._ curr_elements_._ 0_._ soln_._ &min_diff_._ sum_._ 0_._ 0);
 
    // Print the solution
    cout << ""The first subset is: "";
    for (int i=0; i<n; i++)
    {
        if (soln[i] == true)
            cout << arr[i] << "" "";
    }
    cout << ""\nThe second subset is: "";
    for (int i=0; i<n; i++)
    {
        if (soln[i] == false)
            cout << arr[i] << "" "";
    }
}
 
// Driver program to test above functions
int main()
{
    int arr[] = {23_._ 45_._ -34_._ 12_._ 0_._ 98_._ -99_._ 4_._ 189_._ -1_._ 4};
    int n = sizeof(arr)/sizeof(arr[0]);
    tugOfWar(arr_._ n);
    return 0;
}"
433, C++ Program for Print Matrix Diagonally,"#include <bits/stdc++.h>
using namespace std;
 
#define ROW 5
#define COL 4
 
// A utility function to find min
// of two integers
int minu(int a_._ int b)
{
    return (a < b) ? a : b;
}
 
// A utility function to find min
// of three integers
int min(int a_._ int b_._ int c)
{
    return minu(minu(a_._ b)_._ c);
}
 
// A utility function to find
// max of two integers
int max(int a_._ int b)
{
    return (a > b) ? a : b;
}
 
// The main function that prints given
// matrix in diagonal order
void diagonalOrder(int matrix[][COL])
{
     
    // There will be ROW+COL-1 lines
    // in the output
    for(int line = 1;
            line <= (ROW + COL - 1);
            line++)
    {
         
        /* Get column index of the first element
           in this line of output.
           The index is 0 for first ROW lines and
           line - ROW for remaining lines  */
        int start_col =  max(0_._ line - ROW);
 
        /* Get count of elements in this line. The
           count of elements is equal to minimum of
           line number_._ COL-start_col and ROW */
         int count = min(line_._ (COL - start_col)_._ ROW);
 
        /* Print elements of this line */
        for(int j = 0; j < count; j++)
            cout << setw(5) <<
            matrix[minu(ROW_._ line) - j - 1][start_col + j];
 
        /* Print elements of next
           diagonal on next line */
        cout << ""\n"";
    }
}
 
// Utility function to print a matrix
void printMatrix(int matrix[ROW][COL])
{
    for(int i = 0; i < ROW; i++)
    {
        for(int j = 0; j < COL; j++)
            cout << setw(5) << matrix[i][j];
             
        cout << ""\n"";
    }
}
 
// Driver code
int main()
{
    int M[ROW][COL] = { { 1_._ 2_._ 3_._ 4 }_._
                        { 5_._ 6_._ 7_._ 8 }_._
                        { 9_._ 10_._ 11_._ 12 }_._
                        { 13_._ 14_._ 15_._ 16 }_._
                        { 17_._ 18_._ 19_._ 20 }_._};
    cout << ""Given matrix is "" << endl;
    printMatrix(M);
 
    cout << ""\nDiagonal printing of matrix is "" << endl;
    diagonalOrder(M);
    return 0;
}
 "
434, C++ Program for Divide and Conquer | Set 3 (Maximum Subarray Sum),"#include <limits.h>
#include <stdio.h>
 
// A utility function to find maximum of two integers
int max(int a_._ int b) { return (a > b) ? a : b; }
 
// A utility function to find maximum of three integers
int max(int a_._ int b_._ int c) { return max(max(a_._ b)_._ c); }
 
// Find the maximum possible sum in arr[] such that arr[m]
// is part of it
int maxCrossingSum(int arr[]_._ int l_._ int m_._ int h)
{
    // Include elements on left of mid.
    int sum = 0;
    int left_sum = INT_MIN;
    for (int i = m; i >= l; i--) {
        sum = sum + arr[i];
        if (sum > left_sum)
            left_sum = sum;
    }
 
    // Include elements on right of mid
    sum = 0;
    int right_sum = INT_MIN;
    for (int i = m; i <= h; i++) {
        sum = sum + arr[i];
        if (sum > right_sum)
            right_sum = sum;
    }
 
    // Return sum of elements on left and right of mid
    // returning only left_sum + right_sum will fail for
    // [-2_._ 1]
    return max(left_sum + right_sum - arr[m]_._ left_sum_._ right_sum);
}
 
// Returns sum of maximum sum subarray in aa[l..h]
int maxSubArraySum(int arr[]_._ int l_._ int h)
{
      //Invalid Range: low is greater than high
      if (l > h)
          return INT_MIN;
    // Base Case: Only one element
    if (l == h)
        return arr[l];
 
    // Find middle point
    int m = (l + h) / 2;
 
    /* Return maximum of following three possible cases
            a) Maximum subarray sum in left half
            b) Maximum subarray sum in right half
            c) Maximum subarray sum such that the subarray
       crosses the midpoint */
    return max(maxSubArraySum(arr_._ l_._ m - 1)_._
               maxSubArraySum(arr_._ m + 1_._ h)_._
               maxCrossingSum(arr_._ l_._ m_._ h));
}
 
/*Driver program to test maxSubArraySum*/
int main()
{
    int arr[] = { 2_._ 3_._ 4_._ 5_._ 7 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_sum = maxSubArraySum(arr_._ 0_._ n - 1);
    printf(""Maximum contiguous sum is %d\n""_._ max_sum);
    getchar();
    return 0;
}"
435, C++ Program for Counting Sort,"#include <bits/stdc++.h>
#include <string.h>
using namespace std;
#define RANGE 255
 
// The main function that sort
// the given string arr[] in
// alphabetical order
void countSort(char arr[])
{
    // The output character array
    // that will have sorted arr
    char output[strlen(arr)];
 
    // Create a count array to store count of individual
    // characters and initialize count array as 0
    int count[RANGE + 1]_._ i;
    memset(count_._ 0_._ sizeof(count));
 
    // Store count of each character
    for (i = 0; arr[i]; ++i)
        ++count[arr[i]];
 
    // Change count[i] so that count[i] now contains actual
    // position of this character in output array
    for (i = 1; i <= RANGE; ++i)
        count[i] += count[i - 1];
 
    // Build the output character array
    for (i = 0; arr[i]; ++i) {
        output[count[arr[i]] - 1] = arr[i];
        --count[arr[i]];
    }
 
    /*
    For Stable algorithm
    for (i = sizeof(arr)-1; i>=0; --i)
    {
        output[count[arr[i]]-1] = arr[i];
        --count[arr[i]];
    }
 
    For Logic : See implementation
    */
 
    // Copy the output array to arr_._ so that arr now
    // contains sorted characters
    for (i = 0; arr[i]; ++i)
        arr[i] = output[i];
}
 
// Driver code
int main()
{
    char arr[] = ""geeksforgeeks"";
 
    // Function call
    countSort(arr);
 
    cout << ""Sorted character array is "" << arr;
    return 0;
}"
436, C++ Program for Merge Overlapping Intervals,"#include <bits/stdc++.h>
using namespace std;
 
// An interval has start time and end time
struct Interval {
    int start_._ end;
};
 
// Compares two intervals according to their starting time.
// This is needed for sorting the intervals using library
// function std::sort(). See http://goo.gl/iGspV
bool compareInterval(Interval i1_._ Interval i2)
{
    return (i1.start < i2.start);
}
 
// The main function that takes a set of intervals_._ merges
// overlapping intervals and prints the result
void mergeIntervals(Interval arr[]_._ int n)
{
    // Test if the given set has at least one interval
    if (n <= 0)
        return;
 
    // Create an empty stack of intervals
    stack<Interval> s;
 
    // sort the intervals in increasing order of start time
    sort(arr_._ arr + n_._ compareInterval);
 
    // push the first interval to stack
    s.push(arr[0]);
 
    // Start from the next interval and merge if necessary
    for (int i = 1; i < n; i++) {
        // get interval from stack top
        Interval top = s.top();
 
        // if current interval is not overlapping with stack
        // top_._ push it to the stack
        if (top.end < arr[i].start)
            s.push(arr[i]);
 
        // Otherwise update the ending time of top if ending
        // of current interval is more
        else if (top.end < arr[i].end) {
            top.end = arr[i].end;
            s.pop();
            s.push(top);
        }
    }
 
    // Print contents of stack
    cout << ""\n The Merged Intervals are: "";
    while (!s.empty()) {
        Interval t = s.top();
        cout << ""["" << t.start << ""_._"" << t.end << ""] "";
        s.pop();
    }
    return;
}
 
// Driver program
int main()
{
    Interval arr[]
        = { { 6_._ 8 }_._ { 1_._ 9 }_._ { 2_._ 4 }_._ { 4_._ 7 } };
    int n = sizeof(arr) / sizeof(arr[0]);
    mergeIntervals(arr_._ n);
    return 0;
}"
437, C++ Program for Find the maximum repeating number in O(n) time and O(1) extra space,"#include<iostream>
using namespace std;
 
// Returns maximum repeating element in arr[0..n-1].
// The array elements are in range from 0 to k-1
int maxRepeating(int* arr_._ int n_._ int k)
{
    // Iterate though input array_._ for every element
    // arr[i]_._ increment arr[arr[i]%k] by k
    for (int i = 0; i< n; i++)
        arr[arr[i]%k] += k;
 
    // Find index of the maximum repeating element
    int max = arr[0]_._ result = 0;
    for (int i = 1; i < n; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
            result = i;
        }
    }
 
    /* Uncomment this code to get the original array back
       for (int i = 0; i< n; i++)
          arr[i] = arr[i]%k; */
 
    // Return index of the maximum element
    return result;
}
 
// Driver program to test above function
int main()
{
    int arr[] = {2_._ 3_._ 3_._ 5_._ 3_._ 4_._ 1_._ 7};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k = 8;
 
    cout << ""The maximum repeating number is "" <<
         maxRepeating(arr_._ n_._ k) << endl;
 
    return 0;
}"
438, C++ Program for Stock Buy Sell to Maximize Profit,"#include <bits/stdc++.h>
using namespace std;
 
// Function to return the maximum profit
// that can be made after buying and
// selling the given stocks
int maxProfit(int price[]_._ int start_._ int end)
{
 
    // If the stocks can't be bought
    if (end <= start)
        return 0;
 
    // Initialise the profit
    int profit = 0;
 
    // The day at which the stock
    // must be bought
    for (int i = start; i < end; i++) {
 
        // The day at which the
        // stock must be sold
        for (int j = i + 1; j <= end; j++) {
 
            // If buying the stock at ith day and
            // selling it at jth day is profitable
            if (price[j] > price[i]) {
 
                // Update the current profit
                int curr_profit
                    = price[j] - price[i]
                      + maxProfit(price_._ start_._ i - 1)
                      + maxProfit(price_._ j + 1_._ end);
 
                // Update the maximum profit so far
                profit = max(profit_._ curr_profit);
            }
        }
    }
    return profit;
}
 
// Driver code
int main()
{
    int price[] = { 100_._ 180_._ 260_._ 310_._ 40_._ 535_._ 695 };
    int n = sizeof(price) / sizeof(price[0]);
 
    cout << maxProfit(price_._ 0_._ n - 1);
 
    return 0;
}"
439, C++ Program for Rearrange positive and negative numbers in O(n) time and O(1) extra space,"#include <iostream>
using namespace std;
 
class GFG
{
    public:
    void rearrange(int []_._int);
    void swap(int *_._int *);
    void printArray(int []_._int);
};
 
// The main function that rearranges
// elements of given array. It puts
// positive elements at even indexes
// (0_._ 2_._ ..) and negative numbers
// at odd indexes (1_._ 3_._ ..).
void GFG :: rearrange(int arr[]_._ int n)
{
    // The following few lines are
    // similar to partition process
    // of QuickSort. The idea is to
    // consider 0 as pivot and
    // divide the array around it.
    int i = -1;
    for (int j = 0; j < n; j++)
    {
        if (arr[j] < 0)
        {
            i++;
            swap(&arr[i]_._ &arr[j]);
        }
    }
 
    // Now all positive numbers are at
    // end and negative numbers at the
    // beginning of array. Initialize
    // indexes for starting point of
    // positive and negative numbers
    // to be swapped
    int pos = i + 1_._ neg = 0;
 
    // Increment the negative index by
    // 2 and positive index by 1_._
    // i.e._._ swap every alternate negative
    // number with next positive number
    while (pos < n && neg < pos &&
                     arr[neg] < 0)
    {
        swap(&arr[neg]_._ &arr[pos]);
        pos++;
        neg += 2;
    }
}
 
// A utility function
// to swap two elements
void GFG :: swap(int *a_._ int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 
// A utility function to print an array
void GFG :: printArray(int arr[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
}
 
// Driver Code
int main()
{
    int arr[] = {-1_._ 2_._ -3_._ 4_._
                  5_._ 6_._ -7_._ 8_._ 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    GFG test;
    test.rearrange(arr_._ n);
    test.printArray(arr_._ n);
    return 0;
}"
440, C++ Program for Sort elements by frequency | Set 2,"#include <iostream>
#include <stdlib.h>
using namespace std;
  
/* A BST node has data_._ freq_._ left and right pointers */
struct BSTNode
{
    struct BSTNode *left;
    int data;
    int freq;
    struct BSTNode *right;
};
  
// A structure to store data and its frequency
struct dataFreq
{
    int data;
    int freq;
};
  
/* Function for qsort() implementation. Compare frequencies to
sort the array according to decreasing order of frequency */
int compare(const void *a_._ const void *b)
{
    return ( (*(const dataFreq*)b).freq - (*(const dataFreq*)a).freq );
}
  
/* Helper function that allocates a new node with the given data_._
frequency as 1 and NULL left and right pointers.*/
BSTNode* newNode(int data)
{
    struct BSTNode* node = new BSTNode;
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    node->freq = 1;
    return (node);
}
  
// A utility function to insert a given key to BST. If element
// is already present_._ then increases frequency
BSTNode *insert(BSTNode *root_._ int data)
{
    if (root == NULL)
        return newNode(data);
    if (data == root->data) // If already present
        root->freq += 1;
    else if (data < root->data)
        root->left = insert(root->left_._ data);
    else
        root->right = insert(root->right_._ data);
    return root;
}
  
// Function to copy elements and their frequencies to count[].
void store(BSTNode *root_._ dataFreq count[]_._ int *index)
{
    // Base Case
    if (root == NULL) return;
  
    // Recur for left subtree
    store(root->left_._ count_._ index);
  
    // Store item from root and increment index
    count[(*index)].freq = root->freq;
    count[(*index)].data = root->data;
    (*index)++;
  
    // Recur for right subtree
    store(root->right_._ count_._ index);
}
  
// The main function that takes an input array as an argument
// and sorts the array items according to frequency
void sortByFrequency(int arr[]_._ int n)
{
    // Create an empty BST and insert all array items in BST
    struct BSTNode *root = NULL;
    for (int i = 0; i < n; ++i)
        root = insert(root_._ arr[i]);
  
    // Create an auxiliary array 'count[]' to store data and
    // frequency pairs. The maximum size of this array would
    // be n when all elements are different
    dataFreq count[n];
    int index = 0;
    store(root_._ count_._ &index);
  
    // Sort the count[] array according to frequency (or count)
    qsort(count_._ index_._ sizeof(count[0])_._ compare);
  
    // Finally_._ traverse the sorted count[] array and copy the
    // i'th item 'freq' times to original array 'arr[]'
    int j = 0;
    for (int i = 0; i < index; i++)
    {
        for (int freq = count[i].freq; freq > 0; freq--)
            arr[j++] = count[i].data;
    }
}
  
// A utility function to print an array of size n
void printArray(int arr[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
  
/* Driver program to test above functions */
int main()
{
    int arr[] = {2_._ 3_._ 2_._ 4_._ 5_._ 12_._ 2_._ 3_._ 3_._ 3_._ 12};
    int n = sizeof(arr)/sizeof(arr[0]);
    sortByFrequency(arr_._ n);
    printArray(arr_._ n);
    return 0;
}"
441, C++ Program for Find a peak element,"#include <bits/stdc++.h>
using namespace std;
 
// Find the peak element in the array
int findPeak(int arr[]_._ int n)
{
    // first or last element is peak element
    if (n == 1)
        return 0;
    if (arr[0] >= arr[1])
        return 0;
    if (arr[n - 1] >= arr[n - 2])
        return n - 1;
 
    // check for every other element
    for (int i = 1; i < n - 1; i++) {
 
        // check if the neighbors are smaller
        if (arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1])
            return i;
    }
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 3_._ 20_._ 4_._ 1_._ 0 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""Index of a peak point is "" << findPeak(arr_._ n);
    return 0;
}"
442, C++ Program for Print all possible combinations of r elements in a given array of size n,"#include<bits/stdc++.h>
using namespace std;
 
void combinationUtil(int arr[]_._ int data[]_._
                    int start_._ int end_._
                    int index_._ int r);
 
// The main function that prints
// all combinations of size r
// in arr[] of size n. This function
// mainly uses combinationUtil()
void printCombination(int arr[]_._ int n_._ int r)
{
    // A temporary array to store
    // all combination one by one
    int data[r];
 
    // Print all combination using
    // temporary array 'data[]'
    combinationUtil(arr_._ data_._ 0_._ n-1_._ 0_._ r);
}
 
/* arr[] ---> Input Array
data[] ---> Temporary array to
store current combination
start & end ---> Starting and
Ending indexes in arr[]
index ---> Current index in data[]
r ---> Size of a combination to be printed */
void combinationUtil(int arr[]_._ int data[]_._
                    int start_._ int end_._
                    int index_._ int r)
{
    // Current combination is ready
    // to be printed_._ print it
    if (index == r)
    {
        for (int j = 0; j < r; j++)
            cout << data[j] << "" "";
        cout << endl;
        return;
    }
 
    // replace index with all possible
    // elements. The condition ""end-i+1 >= r-index""
    // makes sure that including one element
    // at index will make a combination with
    // remaining elements at remaining positions
    for (int i = start; i <= end &&
        end - i + 1 >= r - index; i++)
    {
        data[index] = arr[i];
        combinationUtil(arr_._ data_._ i+1_._
                        end_._ index+1_._ r);
    }
}
 
// Driver code
int main()
{
    int arr[] = {1_._ 2_._ 3_._ 4_._ 5};
    int r = 3;
    int n = sizeof(arr)/sizeof(arr[0]);
    printCombination(arr_._ n_._ r);
}"
443, C++ Program for Given an array of of size n and a number k_._ find all elements that appear more than n/k times,"#include <bits/stdc++.h>
using namespace std;
 
void morethanNbyK(int arr[]_._ int n_._ int k)
{
    int x = n / k;
 
    // unordered_map initialization
    unordered_map<int_._ int> freq;
 
    for (int i = 0; i < n; i++) {
        freq[arr[i]]++;
    }
 
    // Traversing the map
    for (auto i : freq) {
 
        // Checking if value of a key-value pair
        // is greater than x (where x=n/k)
        if (i.second > x) {
 
            // Print the key of whose value
            // is greater than x
            cout << i.first << endl;
        }
    }
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 1_._ 2_._ 2_._ 3_._ 5_._ 4_._ 2_._ 2_._ 3_._ 1_._ 1_._ 1 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 4;
 
    morethanNbyK(arr_._ n_._ k);
 
    return 0;
}"
444, C++ Program for Find the point where a monotonically increasing function becomes positive first time,"#include<bits/stdc++.h>
using namespace std;
 
int binarySearch(int low_._ int high); // prototype
 
// Let's take an example function
// as f(x) = x^2 - 10*x - 20 Note that
// f(x) can be any monotonically increasing function
int f(int x) { return (x*x - 10*x - 20); }
 
// Returns the value x where above
// function f() becomes positive
// first time.
int findFirstPositive()
{
    // When first value itself is positive
    if (f(0) > 0)
        return 0;
 
    // Find 'high' for binary search by repeated doubling
    int i = 1;
    while (f(i) <= 0)
        i = i*2;
 
    // Call binary search
    return binarySearch(i/2_._ i);
}
 
// Searches first positive value
// of f(i) where low <= i <= high
int binarySearch(int low_._ int high)
{
    if (high >= low)
    {
        int mid = low + (high - low)/2; /* mid = (low + high)/2 */
 
        // If f(mid) is greater than 0 and
        // one of the following two
        // conditions is true:
        // a) mid is equal to low
        // b) f(mid-1) is negative
        if (f(mid) > 0 && (mid == low || f(mid-1) <= 0))
            return mid;
 
        // If f(mid) is smaller than or equal to 0
        if (f(mid) <= 0)
            return binarySearch((mid + 1)_._ high);
        else // f(mid) > 0
            return binarySearch(low_._ (mid -1));
    }
 
    /* Return -1 if there is no
    positive value in given range */
    return -1;
}
 
/* Driver code */
int main()
{
    cout<<""The value n where f() becomes"" <<
        ""positive first is ""<< findFirstPositive();
    return 0;
}"
445, C++ Program for Find the minimum element in a sorted and rotated array,"
#include <bits/stdc++.h>
using namespace std;
 
// Function to find the minimum value
int findMin(int arr[]_._ int n)
{
    int min_ele = arr[0];
 
    // Traversing over array to
    // find minimum element
    for (int i = 0; i < n; i++) {
        if (arr[i] < min_ele) {
            min_ele = arr[i];
        }
    }
 
    return min_ele;
}
 
// Driver code
int main()
{
    int arr[] = { 5_._ 6_._ 1_._ 2_._ 3_._ 4 };
    int N = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    cout << findMin(arr_._ N) << endl;
    return 0;
}"
446, C++ Program for Stable Marriage Problem,"#include <iostream>
#include <string.h>
#include <stdio.h>
using namespace std;
  
// Number of Men or Women
#define N  4
  
// This function returns true if woman 'w' prefers man 'm1' over man 'm'
bool wPrefersM1OverM(int prefer[2*N][N]_._ int w_._ int m_._ int m1)
{
    // Check if w prefers m over her current engagement m1
    for (int i = 0; i < N; i++)
    {
        // If m1 comes before m in list of w_._ then w prefers her
        // current engagement_._ don't do anything
        if (prefer[w][i] == m1)
            return true;
  
        // If m comes before m1 in w's list_._ then free her current
        // engagement and engage her with m
        if (prefer[w][i] == m)
           return false;
    }
}
  
// Prints stable matching for N boys and N girls.
// Boys are numbered as 0 to N-1. Girls are numbered 
// as N to 2N-1.
void stableMarriage(int prefer[2*N][N])
{
    // Stores partner of women. This is our output array that
    // stores passing information.  The value of wPartner[i]
    // indicates the partner assigned to woman N+i.  Note that
    // the woman numbers between N and 2*N-1. The value -1
    // indicates that (N+i)'th woman is free
    int wPartner[N];
  
    // An array to store availability of men.  If mFree[i] is
    // false_._ then man 'i' is free_._ otherwise engaged.
    bool mFree[N];
  
    // Initialize all men and women as free
    memset(wPartner_._ -1_._ sizeof(wPartner));
    memset(mFree_._ false_._ sizeof(mFree));
    int freeCount = N;
  
    // While there are free men
    while (freeCount > 0)
    {
        // Pick the first free man (we could pick any)
        int m;
        for (m = 0; m < N; m++)
            if (mFree[m] == false)
                break;
  
        // One by one go to all women according to m's preferences.
        // Here m is the picked free man
        for (int i = 0; i < N && mFree[m] == false; i++)
        {
            int w = prefer[m][i];
  
            // The woman of preference is free_._ w and m become
            // partners (Note that the partnership maybe changed
            // later). So we can say they are engaged not married
            if (wPartner[w-N] == -1)
            {
                wPartner[w-N] = m;
                mFree[m] = true;
                freeCount--;
            }
  
            else  // If w is not free
            {
                // Find current engagement of w
                int m1 = wPartner[w-N];
  
                // If w prefers m over her current engagement m1_._
                // then break the engagement between w and m1 and
                // engage m with w.
                if (wPrefersM1OverM(prefer_._ w_._ m_._ m1) == false)
                {
                    wPartner[w-N] = m;
                    mFree[m] = true;
                    mFree[m1] = false;
                }
            } // End of Else
        } // End of the for loop that goes to all women in m's list
    } // End of main while loop
  
  
    // Print the solution
    cout << ""Woman   Man"" << endl;
    for (int i = 0; i < N; i++)
       cout << "" "" << i+N << ""\t"" << wPartner[i] << endl;
}
  
// Driver program to test above functions
int main()
{
    int prefer[2*N][N] = { {7_._ 5_._ 6_._ 4}_._
        {5_._ 4_._ 6_._ 7}_._
        {4_._ 5_._ 6_._ 7}_._
        {4_._ 5_._ 6_._ 7}_._
        {0_._ 1_._ 2_._ 3}_._
        {0_._ 1_._ 2_._ 3}_._
        {0_._ 1_._ 2_._ 3}_._
        {0_._ 1_._ 2_._ 3}_._
    };
    stableMarriage(prefer);
  
    return 0;
}"
447, C++ Program for Merge k sorted arrays | Set 1," 
#include <bits/stdc++.h>
using namespace std;
#define N 4
 
// A utility function to print array elements
void printArray(int arr[]_._ int size)
{
    for (int i = 0; i < size; i++)
        cout << arr[i] << "" "";
}
 
// This function takes an array of arrays as an argument and
// All arrays are assumed to be sorted. It merges them
// together and prints the final sorted output.
void mergeKArrays(int arr[][N]_._ int a_._ int output[])
{
    int c = 0;
 
    // traverse the matrix
    for (int i = 0; i < a; i++) {
        for (int j = 0; j < N; j++)
            output = arr[i][j];
    }
 
    // sort the array
    sort(output_._ output + N * a);
}
 
// Driver's code
int main()
{
    // Change N at the top to change number of elements
    // in an array
    int arr[][N] = { { 2_._ 6_._ 12_._ 34 }_._
                     { 1_._ 9_._ 20_._ 1000 }_._
                     { 23_._ 34_._ 90_._ 2000 } };
    int K = sizeof(arr) / sizeof(arr[0]);
 
    int output[N * K];
 
    // Function call
    mergeKArrays(arr_._ 3_._ output);
 
    cout << ""Merged array is "" << endl;
    printArray(output_._ N * K);
 
    return 0;
}"
448, C++ Program for Radix Sort,"#include <iostream>
using namespace std;
 
// A utility function to get maximum value in arr[]
int getMax(int arr[]_._ int n)
{
    int mx = arr[0];
    for (int i = 1; i < n; i++)
        if (arr[i] > mx)
            mx = arr[i];
    return mx;
}
 
// A function to do counting sort of arr[] according to
// the digit represented by exp.
void countSort(int arr[]_._ int n_._ int exp)
{
    int output[n]; // output array
    int i_._ count[10] = { 0 };
 
    // Store count of occurrences in count[]
    for (i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;
 
    // Change count[i] so that count[i] now contains actual
    //  position of this digit in output[]
    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];
 
    // Build the output array
    for (i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }
 
    // Copy the output array to arr[]_._ so that arr[] now
    // contains sorted numbers according to current digit
    for (i = 0; i < n; i++)
        arr[i] = output[i];
}
 
// The main function to that sorts arr[] of size n using
// Radix Sort
void radixsort(int arr[]_._ int n)
{
    // Find the maximum number to know number of digits
    int m = getMax(arr_._ n);
 
    // Do counting sort for every digit. Note that instead
    // of passing digit number_._ exp is passed. exp is 10^i
    // where i is current digit number
    for (int exp = 1; m / exp > 0; exp *= 10)
        countSort(arr_._ n_._ exp);
}
 
// A utility function to print an array
void print(int arr[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
}
 
// Driver Code
int main()
{
    int arr[] = { 170_._ 45_._ 75_._ 90_._ 802_._ 24_._ 2_._ 66 };
    int n = sizeof(arr) / sizeof(arr[0]);
     
      // Function Call
      radixsort(arr_._ n);
    print(arr_._ n);
    return 0;
}"
449, C++ Program for Move all zeroes to end of array,"#include <algorithm>
#include <iostream>
#include <vector>
 
void push_zeros_to_end(std::vector<int>& arr)
{
  std::stable_partition(arr.begin()_._
            arr.end()_._
            [](int n) { return n != 0; });
}
 
int main()
{
  std::vector<int> arr{1_._9_._8_._4_._0_._0_._2_._7_._0_._6_._0_._9};
   
  push_zeros_to_end(arr);
   
  for(const auto& i : arr)
    std::cout << i << ' ';
 
  std::cout << ""\n"";
 
  return 0;
}"
450, C++ Program for Find number of pairs such that x^y > y^x,"#include <bits/stdc++.h>
using namespace std;
 
// Function to return count of pairs with x as one element
// of the pair. It mainly looks for all values in Y[] where
// x ^ Y[i] > Y[i] ^ x
int count(int x_._ int Y[]_._ int n_._ int NoOfY[])
{
    // If x is 0_._ then there cannot be any value in Y such
    // that x^Y[i] > Y[i]^x
    if (x == 0)
        return 0;
 
    // If x is 1_._ then the number of pairs is equal to number
    // of zeroes in Y[]
    if (x == 1)
        return NoOfY[0];
 
    // Find number of elements in Y[] with values greater
    // than x upper_bound() gets address of first greater
    // element in Y[0..n-1]
    int* idx = upper_bound(Y_._ Y + n_._ x);
    int ans = (Y + n) - idx;
 
    // If we have reached here_._ then x must be greater than
    // 1_._ increase number of pairs for y=0 and y=1
    ans += (NoOfY[0] + NoOfY[1]);
 
    // Decrease number of pairs for x=2 and (y=4 or y=3)
    if (x == 2)
        ans -= (NoOfY[3] + NoOfY[4]);
 
    // Increase number of pairs for x=3 and y=2
    if (x == 3)
        ans += NoOfY[2];
 
    return ans;
}
 
// Function to return count of pairs (x_._ y) such that
// x belongs to X[]_._ y belongs to Y[] and x^y > y^x
int countPairs(int X[]_._ int Y[]_._ int m_._ int n)
{
    // To store counts of 0_._ 1_._ 2_._ 3 and 4 in array Y
    int NoOfY[5] = { 0 };
    for (int i = 0; i < n; i++)
        if (Y[i] < 5)
            NoOfY[Y[i]]++;
 
    // Sort Y[] so that we can do binary search in it
    sort(Y_._ Y + n);
 
    int total_pairs = 0; // Initialize result
 
    // Take every element of X and count pairs with it
    for (int i = 0; i < m; i++)
        total_pairs += count(X[i]_._ Y_._ n_._ NoOfY);
 
    return total_pairs;
}
 
// Driver program
int main()
{
    int X[] = { 2_._ 1_._ 6 };
    int Y[] = { 1_._ 5 };
 
    int m = sizeof(X) / sizeof(X[0]);
    int n = sizeof(Y) / sizeof(Y[0]);
 
    cout << ""Total pairs = "" << countPairs(X_._ Y_._ m_._ n);
 
    return 0;
}"
451, C++ Program for Count all distinct pairs with difference equal to k,"#include <iostream>
using namespace std;
 
int countPairsWithDiffK(int arr[]_._ int n_._ int k)
{
    int count = 0;
 
    // Pick all elements one by one
    for (int i = 0; i < n; i++) {
        // See if there is a pair of this picked element
        for (int j = i + 1; j < n; j++)
            if (arr[i] - arr[j] == k
                || arr[j] - arr[i] == k)
                count++;
    }
    return count;
}
 
// Driver program to test above function
int main()
{
    int arr[] = { 1_._ 5_._ 3_._ 4_._ 2 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3;
    cout << ""Count of pairs with given diff is ""
         << countPairsWithDiffK(arr_._ n_._ k);
    return 0;
}
 "
452, C++ Program for Count all possible paths from top left to bottom right of a mXn matrix," 
#include <bits/stdc++.h>
using namespace std;
 
// Returns count of possible paths to reach cell at row
// number m and column number n from the topmost leftmost
// cell (cell at 1_._ 1)
int numberOfPaths(int m_._ int n)
{
    // If either given row number is first or given column
    // number is first
    if (m == 1 || n == 1)
        return 1;
 
    // If diagonal movements are allowed then the last
    // addition is required.
    return numberOfPaths(m - 1_._ n)
           + numberOfPaths(m_._ n - 1);
    // + numberOfPaths(m-1_._ n-1);
}
 
// Driver code
int main()
{
    cout << numberOfPaths(3_._ 3);
    return 0;
}"
453, C++ Program for Suffix Array | Set 1 (Introduction),"#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
  
// Structure to store information of a suffix
struct suffix
{
    int index;
    char *suff;
};
  
// A comparison function used by sort() to compare two suffixes
int cmp(struct suffix a_._ struct suffix b)
{
    return strcmp(a.suff_._ b.suff) < 0? 1 : 0;
}
  
// This is the main function that takes a string 'txt' of size n as an
// argument_._ builds and return the suffix array for the given string
int *buildSuffixArray(char *txt_._ int n)
{
    // A structure to store suffixes and their indexes
    struct suffix suffixes[n];
  
    // Store suffixes and their indexes in an array of structures.
    // The structure is needed to sort the suffixes alphabetically
    // and maintain their old indexes while sorting
    for (int i = 0; i < n; i++)
    {
        suffixes[i].index = i;
        suffixes[i].suff = (txt+i);
    }
  
    // Sort the suffixes using the comparison function
    // defined above.
    sort(suffixes_._ suffixes+n_._ cmp);
  
    // Store indexes of all sorted suffixes in the suffix array
    int *suffixArr = new int[n];
    for (int i = 0; i < n; i++)
        suffixArr[i] = suffixes[i].index;
  
    // Return the suffix array
    return  suffixArr;
}
  
// A utility function to print an array of given size
void printArr(int arr[]_._ int n)
{
    for(int i = 0; i < n; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
  
// Driver program to test above functions
int main()
{
    char txt[] = ""banana"";
    int n = strlen(txt);
    int *suffixArr = buildSuffixArray(txt_._  n);
    cout << ""Following is suffix array for "" << txt << endl;
    printArr(suffixArr_._ n);
    return 0;
}"
454, C++ Program for Rearrange an array so that arr[i] becomes arr[arr[i]] with O(1) extra space,"#include <iostream>
using namespace std;
 
// The function to rearrange an array
// in-place so that arr[i] becomes arr[arr[i]].
void rearrange(int arr[]_._ int n)
{
    // First step: Increase all values by (arr[arr[i]]%n)*n
    for (int i = 0; i < n; i++)
        arr[i] += (arr[arr[i]] % n) * n;
 
    // Second Step: Divide all values by n
    for (int i = 0; i < n; i++)
        arr[i] /= n;
}
 
// A utility function to print an array of size n
void printArr(int arr[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
    cout << endl;
}
 
/* Driver program to test above functions*/
int main()
{
    int arr[] = { 3_._ 2_._ 0_._ 1 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    cout << ""Given array is \n"";
    printArr(arr_._ n);
 
    rearrange(arr_._ n);
 
    cout << ""Modified array is \n"";
    printArr(arr_._ n);
    return 0;
}"
455, C++ Program for Sort n numbers in range from 0 to n^2 – 1 in linear time,"#include<iostream>
using namespace std;
 
// A function to do counting sort of arr[] according to
// the digit represented by exp.
int countSort(int arr[]_._ int n_._ int exp)
{
 
    int output[n]; // output array
    int i_._ count[n] ;
    for (int i=0; i < n; i++)
       count[i] = 0;
 
    // Store count of occurrences in count[]
    for (i = 0; i < n; i++)
        count[ (arr[i]/exp)%n ]++;
 
    // Change count[i] so that count[i] now contains actual
    // position of this digit in output[]
    for (i = 1; i < n; i++)
        count[i] += count[i - 1];
 
    // Build the output array
    for (i = n - 1; i >= 0; i--)
    {
        output[count[ (arr[i]/exp)%n] - 1] = arr[i];
        count[(arr[i]/exp)%n]--;
    }
 
    // Copy the output array to arr[]_._ so that arr[] now
    // contains sorted numbers according to current digit
    for (i = 0; i < n; i++)
        arr[i] = output[i];
}
 
 
// The main function to that sorts arr[] of size n using Radix Sort
void sort(int arr[]_._ int n)
{
    // Do counting sort for first digit in base n. Note that
    // instead of passing digit number_._ exp (n^0 = 1) is passed.
    countSort(arr_._ n_._ 1);
 
    // Do counting sort for second digit in base n. Note that
    // instead of passing digit number_._ exp (n^1 = n) is passed.
    countSort(arr_._ n_._ n);
}
 
// A utility function to print an array
void printArr(int arr[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
}
 
// Driver program to test above functions
int main()
{
    // Since array size is 7_._ elements should be from 0 to 48
    int arr[] = {40_._ 12_._ 45_._ 32_._ 33_._ 1_._ 22};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""Given array is n"";
    printArr(arr_._ n);
 
    sort(arr_._ n);
 
    cout << ""nSorted array is n"";
    printArr(arr_._ n);
    return 0;
}"
456, C++ Program for Count all possible groups of size 2 or 3 that have sum as multiple of 3," 
#include<bits/stdc++.h>
using namespace std;
 
// Returns count of all possible groups
// that can be formed from elements of a[].
int findgroups(int arr[]_._ int n)
{
    // Create an array C[3] to store counts
    // of elements with remainder 0_._ 1 and 2.
    // c[i] would store count of elements
    // with remainder i
    int c[3] = {0}_._ i;
 
    int res = 0; // To store the result
 
    // Count elements with remainder 0_._ 1 and 2
    for (i=0; i<n; i++)
        c[arr[i]%3]++;
 
    // Case 3.a: Count groups of size 2
    // from 0 remainder elements
    res += ((c[0]*(c[0]-1))>>1);
 
    // Case 3.b: Count groups of size 2 with
    // one element with 1 remainder and other
    // with 2 remainder
    res += c[1] * c[2];
 
    // Case 4.a: Count groups of size 3
    // with all 0 remainder elements
    res += (c[0] * (c[0]-1) * (c[0]-2))/6;
 
    // Case 4.b: Count groups of size 3
    // with all 1 remainder elements
    res += (c[1] * (c[1]-1) * (c[1]-2))/6;
 
    // Case 4.c: Count groups of size 3
    // with all 2 remainder elements
    res += ((c[2]*(c[2]-1)*(c[2]-2))/6);
 
    // Case 4.c: Count groups of size 3
    // with different remainders
    res += c[0]*c[1]*c[2];
 
    // Return total count stored in res
    return res;
}
 
// Driver Code
int main()
{
    int arr[] = {3_._ 6_._ 7_._ 2_._ 9};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""Required number of groups are ""
         << findgroups(arr_._n) << endl;
    return 0;
}"
457, C++ Program for Return maximum occurring character in the input string,"#include <bits/stdc++.h>
#define ASCII_SIZE 256
using namespace std;
 
char getMaxOccurringChar(char* str)
{
    // Create array to keep the count of individual
    // characters and initialize the array as 0
    int count[ASCII_SIZE] = { 0 };
 
    // Construct character count array from the input
    // string.
    int len = strlen(str);
    int max = 0; // Initialize max count
    char result; // Initialize result
 
    // Traversing through the string and maintaining
    // the count of each character
    for (int i = 0; i < len; i++) {
        count[str[i]]++;
        if (max < count[str[i]]) {
            max = count[str[i]];
            result = str[i];
        }
    }
 
    return result;
}
 
// Driver program to test the above function
int main()
{
    char str[] = ""sample string"";
    cout << ""Max occurring character is ""
         << getMaxOccurringChar(str);
}"
458, C++ Program for Remove all duplicates from the input string.,"#include <bits/stdc++.h>
using namespace std;
 
char *removeDuplicate(char str[]_._ int n)
{
   // Used as index in the modified string
   int index = 0;  
    
   // Traverse through all characters
   for (int i=0; i<n; i++) {
        
     // Check if str[i] is present before it 
     int j; 
     for (j=0; j<i; j++)
        if (str[i] == str[j])
           break;
      
     // If not present_._ then add it to
     // result.
     if (j == i)
        str[index++] = str[i];
   }
    
   return str;
}
 
// Driver code
int main()
{
   char str[]= ""geeksforgeeks"";
   int n = sizeof(str) / sizeof(str[0]);
   cout << removeDuplicate(str_._ n);
   return 0;
}"
459, C++ Program for Print all the duplicates in the input string.,"#include <iostream>
using namespace std;
# define NO_OF_CHARS 256
 
class gfg
{
    public :
     
    /* Fills count array with
    frequency of characters */
    void fillCharCounts(char *str_._ int *count)
    {
        int i;
        for (i = 0; *(str + i); i++)
        count[*(str + i)]++;
    }
 
    /* Print duplicates present
    in the passed string */
    void printDups(char *str)
    {
         
        // Create an array of size 256 and fill
        // count of every character in it
        int *count = (int *)calloc(NO_OF_CHARS_._
                                      sizeof(int));
        fillCharCounts(str_._ count);
 
        // Print characters having count more than 0
        int i;
        for (i = 0; i < NO_OF_CHARS; i++)
        if(count[i] > 1)
            printf(""%c_._ count = %d \n""_._ i_._ count[i]);
 
        free(count);
    }
};
 
/* Driver code*/
int main()
{
    gfg g ;
    char str[] = ""test string"";
    g.printDups(str);
    //getchar();
    return 0;
}
 "
460, C++ Program for Remove characters from the first string which are present in the second string,"#include <bits/stdc++.h>
using namespace std;
 
char* removeChars(char* s1_._ int n1_._ char* s2_._ int n2)
{
    int arr[26] = { 0 }; // an array of size 26 to count the frequency of characters
    int curr = 0; 
    for (int i = 0; i < n2; i++) // assigned all the index of characters which are present 
        arr[s2[i] - 'a'] = -1;   // in second string by -1 (just flagging)
    for (int i = 0; i < n1; i++) 
        if (arr[s1[i] - 'a'] != -1) {  // Checking if the index of characters don't have -1
            s1[curr] = s1[i];       // i.e_._ that character was not present in second string
            curr++;               // and then storing that character in string
        }
    s1[curr] = '\0';    // marking last character as null to point the end of string
    return s1;
}
 
// driver code
int main()
{
    char string1[] = ""geeksforgeeks"";
    char string2[] = ""mask"";
    int n1 = sizeof(string1) / sizeof(string1[0]);
    int n2 = sizeof(string2) / sizeof(string2[0]);
    cout << removeChars(string1_._ n1_._ string2_._ n2) << endl;
    return 0;
}"
461, C++ Program for A Program to check if strings are rotations of each other or not,"#include <bits/stdc++.h>
using namespace std;
 
bool checkString(string& s1_._ string& s2_._ int indexFound_._
                 int Size)
{
    for (int i = 0; i < Size; i++) {
        // check whether the character is equal or not
        if (s1[i] != s2[(indexFound + i) % Size])
            return false;
        // %Size keeps (indexFound+i) in bounds_._ since it
        // ensures it's value is always less than Size
    }
 
    return true;
}
 
int main()
{
 
    string s1 = ""abcd"";
    string s2 = ""cdab"";
 
    if (s1.length() != s2.length()) {
        cout << ""s2 is not a rotation on s1"" << endl;
    }
    else {
        // store occurrences of the first character of s1
        vector<int> indexes;
 
        int Size = s1.length();
 
        char firstChar = s1[0];
 
        for (int i = 0; i < Size; i++) {
            if (s2[i] == firstChar) {
                indexes.push_back(i);
            }
        }
 
        bool isRotation = false;
 
        // check if the strings are rotation of each other
        // for every occurrence of firstChar in s2
        for (int idx : indexes) {
            isRotation = checkString(s1_._ s2_._ idx_._ Size);
 
            if (isRotation)
                break;
        }
 
        if (isRotation)
            cout << ""Strings are rotations of each other""
                 << endl;
        else
            cout
                << ""Strings are not rotations of each other""
                << endl;
    }
    return 0;
}"
462, C++ Program for Print reverse of a string using recursion,"#include <bits/stdc++.h>
using namespace std;
 
/* Function to print reverse of the passed string */
void reverse(string str)
{
    if(str.size() == 0)
    {
        return;
    }
    reverse(str.substr(1));
    cout << str[0];
}
 
/* Driver program to test above function */
int main()
{
    string a = ""Geeks for Geeks"";
    reverse(a);
    return 0;
}"
463, C++ Program for Write a C program to print all permutations of a given string,"#include <bits/stdc++.h>
using namespace std;
 
// Function to print permutations of string
// This function takes three parameters:
// 1. String
// 2. Starting index of the string
// 3. Ending index of the string.
void permute(string& a_._ int l_._ int r)
{
    // Base case
    if (l == r)
        cout << a << endl;
    else {
        // Permutations made
        for (int i = l; i <= r; i++) {
 
            // Swapping done
            swap(a[l]_._ a[i]);
 
            // Recursion called
            permute(a_._ l + 1_._ r);
 
            // backtrack
            swap(a[l]_._ a[i]);
        }
    }
}
 
// Driver Code
int main()
{
    string str = ""ABC"";
    int n = str.size();
 
    // Function call
    permute(str_._ 0_._ n - 1);
    return 0;
}"
464, C++ Program for Divide a string in N equal parts,"#include <iostream>
#include <string.h>
 
using namespace std;
 
class gfg {
 
    // Function to print n equal parts of str
public:
    void divideString(char str[]_._ int n)
    {
 
        int str_size = strlen(str);
        int i;
        int part_size;
 
        // Check if string can be divided in
        // n equal parts
        if (str_size % n != 0) {
            cout << ""Invalid Input: String size"";
            cout << "" is not divisible by n"";
            return;
        }
 
        // Calculate the size of parts to
        // find the division points
        part_size = str_size / n;
        for (i = 0; i < str_size; i++) {
            if (i % part_size == 0)
                cout << endl;
            cout << str[i];
        }
    }
};
 
// Driver code
int main()
{
    gfg g;
 
    // length of string is 28
    char str[] = ""a_simple_divide_string_quest"";
 
    // Print 4 equal parts of the string
    g.divideString(str_._ 4);
    return 0;
}"
465, C++ Program for Given a string_._ find its first non-repeating character,"#include <bits/stdc++.h>
using namespace std;
 
void FirstNonRepeat(string s)
{
 
    for (int i = 0; i < s.length(); i++) {
 
        if (s.find(s[i]_._ s.find(s[i]) + 1)
            == string::npos) {
            cout << ""First non-repeating character is ""
                 << s[i];
 
            return;
        }
    }
    cout << ""Either all characters are repeating or ""
            ""string is empty"";
    return;
}
 
// driver code
int main()
{
 
    string s = ""geeksforgeeks"";
    FirstNonRepeat(s);
}"
466, C++ Program for Print list items containing all characters of a given word,"#include <bits/stdc++.h>
#include<stdio.h>
#include<string.h>
using namespace std;
# define NO_OF_CHARS 256
 
/* prints list items having all characters of word */
void print(char list[][50]_._ char *word_._ int list_size)
{
    /*Since calloc is used_._ map[] is initialized as 0 */
    int *map = new int[(sizeof(int)*NO_OF_CHARS)];
    int i_._ j_._ count_._ word_size;
 
    /*Set the values in map */
    for (i = 0; *(word+i); i++)
        map[*(word + i)] = 1;
 
    /* Get the length of given word */
    word_size = strlen(word);
 
    /* Check each item of list if has all characters
    of word*/
    for (i = 0; i < list_size; i++)
    {
        for (j = 0_._ count = 0; *(list[i] + j); j++)
        {
            if (map[*(list[i] + j)])
            {
                count++;
 
                /* unset the bit so that strings like
                sss not printed*/
                map[*(list[i] + j)] = 0;
            }
        }
        if (count == word_size)
            cout << list[i] << endl;
 
        /*Set the values in map for next item*/
        for (j = 0; *(word + j); j++)
            map[*(word + j)] = 1;
    }
}
 
/* Driver code*/
int main()
{
    char str[] = ""sun"";
    char list[][50] = {""geeksforgeeks""_._ ""unsorted""_._ ""sunday""_._
                    ""just""_._ ""sss"" };
    print(list_._ str_._ 5);
    return 0;
}"
467, C++ Program for Reverse words in a given string,"#include <bits/stdc++.h>
using namespace std;
 
// Function to reverse words*/
void reverseWords(string s)
{
 
    // temporary vector to store all words
    vector<string> tmp;
    string str = """";
    for (int i = 0; i < s.length(); i++) {
 
        // Check if we encounter space
        // push word(str) to vector
        // and make str NULL
        if (s[i] == ' ') {
            tmp.push_back(str);
            str = """";
        }
 
        // Else add character to
        // str to form current word
        else
            str += s[i];
    }
 
    // Last word remaining_._add it to vector
    tmp.push_back(str);
 
    // Now print from last to first in vector
    int i;
    for (i = tmp.size() - 1; i > 0; i--)
        cout << tmp[i] << "" "";
    // Last word remaining_._print it
    cout << tmp[0] << endl;
}
 
// Driver Code
int main()
{
    string s = ""i like this program very much"";
    reverseWords(s);
    return 0;
}"
468, C++ Program for Run Length Encoding,"#include <bits/stdc++.h>
using namespace std;
 
void printRLE(string str)
{
    int n = str.length();
    for (int i = 0; i < n; i++) {
 
        // Count occurrences of current character
        int count = 1;
        while (i < n - 1 && str[i] == str[i + 1]) {
            count++;
            i++;
        }
        // Print character and its count
        cout << str[i] << count;
    }
}
//Driver code
int main()
{
    string str = ""wwwwaaadexxxxxxywww"";
    printRLE(str);
    return 0;
}"
469, C++ Program for Find the smallest window in a string containing all characters of another string,"#include <bits/stdc++.h>
using namespace std;
 
const int no_of_chars = 256;
 
// Function to find smallest
// window containing
// all characters of 'pat'
string findSubString(string str_._ string pat)
{
    int len1 = str.length();
    int len2 = pat.length();
 
    // Check if string's length
    // is less than pattern's
    // length. If yes then no such
    // window can exist
    if (len1 < len2) {
        cout << ""No such window exists"";
        return """";
    }
 
    int hash_pat[no_of_chars] = { 0 };
    int hash_str[no_of_chars] = { 0 };
 
    // Store occurrence ofs characters
    // of pattern
    for (int i = 0; i < len2; i++)
        hash_pat[pat[i]]++;
 
    int start = 0_._ start_index = -1_._ min_len = INT_MAX;
 
    // Start traversing the string
    // Count of characters
    int count = 0;
    for (int j = 0; j < len1; j++) {
       
        // Count occurrence of characters
        // of string
        hash_str[str[j]]++;
 
        // If string's char matches with
        // pattern's char
        // then increment count
        if (hash_str[str[j]] <= hash_pat[str[j]])
            count++;
 
        // if all the characters are matched
        if (count == len2) {
           
            // Try to minimize the window
            while (hash_str[str[start]]
                       > hash_pat[str[start]]
                   || hash_pat[str[start]] == 0) {
 
                if (hash_str[str[start]]
                    > hash_pat[str[start]])
                    hash_str[str[start]]--;
                start++;
            }
 
            // update window size
            int len_window = j - start + 1;
            if (min_len > len_window) {
                min_len = len_window;
                start_index = start;
            }
        }
    }
 
    // If no window found
    if (start_index == -1) {
        cout << ""No such window exists"";
        return """";
    }
 
    // Return substring starting from start_index
    // and length min_len
    return str.substr(start_index_._ min_len);
}
 
// Driver code
int main()
{
    string str = ""this is a test string"";
    string pat = ""tist"";
 
    cout << findSubString(str_._ pat);
    return 0;
}"
470, C++ Program for Searching for Patterns | Set 1 (Naive Pattern Searching),"#include <bits/stdc++.h>
using namespace std;
 
void search(char* pat_._ char* txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
 
    /* A loop to slide pat[] one by one */
    for (int i = 0; i <= N - M; i++) {
        int j;
 
        /* For current index i_._ check for pattern match */
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;
 
        if (j
            == M) // if pat[0...M-1] = txt[i_._ i+1_._ ...i+M-1]
            cout << ""Pattern found at index "" << i << endl;
    }
}
 
// Driver's Code
int main()
{
    char txt[] = ""AABAACAADAABAAABAA"";
    char pat[] = ""AABA"";
   
      // Function call
    search(pat_._ txt);
    return 0;
}"
471, C++ Program for Searching for Patterns | Set 2 (KMP Algorithm),"#include <bits/stdc++.h>
 
void computeLPSArray(char* pat_._ int M_._ int* lps);
 
// Prints occurrences of txt[] in pat[]
void KMPSearch(char* pat_._ char* txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
 
    // create lps[] that will hold the longest prefix suffix
    // values for pattern
    int lps[M];
 
    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat_._ M_._ lps);
 
    int i = 0; // index for txt[]
    int j = 0; // index for pat[]
    while ((N - i) >= (M - j)) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }
 
        if (j == M) {
            printf(""Found pattern at index %d ""_._ i - j);
            j = lps[j - 1];
        }
 
        // mismatch after j matches
        else if (i < N && pat[j] != txt[i]) {
            // Do not match lps[0..lps[j-1]] characters_._
            // they will match anyway
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}
 
// Fills lps[] for given pattern pat[0..M-1]
void computeLPSArray(char* pat_._ int M_._ int* lps)
{
    // length of the previous longest prefix suffix
    int len = 0;
 
    lps[0] = 0; // lps[0] is always 0
 
    // the loop calculates lps[i] for i = 1 to M-1
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else // (pat[i] != pat[len])
        {
            // This is tricky. Consider the example.
            // AAACAAAA and i = 7. The idea is similar
            // to search step.
            if (len != 0) {
                len = lps[len - 1];
 
                // Also_._ note that we do not increment
                // i here
            }
            else // if (len == 0)
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
 
// Driver code
int main()
{
    char txt[] = ""ABABDABACDABABCABAB"";
    char pat[] = ""ABABCABAB"";
    KMPSearch(pat_._ txt);
    return 0;
}"
472, C++ Program for Searching for Patterns | Set 3 (Rabin-Karp Algorithm),"#include <bits/stdc++.h>
using namespace std;
 
// d is the number of characters in the input alphabet
#define d 256
 
/* pat -> pattern
    txt -> text
    q -> A prime number
*/
void search(char pat[]_._ char txt[]_._ int q)
{
    int M = strlen(pat);
    int N = strlen(txt);
    int i_._ j;
    int p = 0; // hash value for pattern
    int t = 0; // hash value for txt
    int h = 1;
 
    // The value of h would be ""pow(d_._ M-1)%q""
    for (i = 0; i < M - 1; i++)
        h = (h * d) % q;
 
    // Calculate the hash value of pattern and first
    // window of text
    for (i = 0; i < M; i++) {
        p = (d * p + pat[i]) % q;
        t = (d * t + txt[i]) % q;
    }
 
    // Slide the pattern over text one by one
    for (i = 0; i <= N - M; i++) {
 
        // Check the hash values of current window of text
        // and pattern. If the hash values match then only
        // check for characters one by one
        if (p == t) {
            /* Check for characters one by one */
            for (j = 0; j < M; j++) {
                if (txt[i + j] != pat[j]) {
                    break;
                }
            }
 
            // if p == t and pat[0...M-1] = txt[i_._ i+1_._
            // ...i+M-1]
 
            if (j == M)
                cout << ""Pattern found at index "" << i
                     << endl;
        }
 
        // Calculate hash value for next window of text:
        // Remove leading digit_._ add trailing digit
        if (i < N - M) {
            t = (d * (t - txt[i] * h) + txt[i + M]) % q;
 
            // We might get negative value of t_._ converting
            // it to positive
            if (t < 0)
                t = (t + q);
        }
    }
}
 
/* Driver code */
int main()
{
    char txt[] = ""GEEKS FOR GEEKS"";
    char pat[] = ""GEEK"";
 
    // we mod to avoid overflowing of value but we should
    // take as big q as possible to avoid the collison
    int q = INT_MAX;
 
    // Function Call
    search(pat_._ txt_._ q);
    return 0;
}
 "
473, C++ Program for Searching for Patterns | Set 4 (A Naive Pattern Searching Question),"#include <bits/stdc++.h>
using namespace std;
  
/* A modified Naive Pattern Searching
algorithm that is optimized for the
cases when all characters of pattern are different */
void search(string pat_._ string txt)
{
    int M = pat.size();
    int N = txt.size();
    int i = 0;
  
    while (i <= N - M) {
        int j;
  
        /* For current index i_._ check for pattern match */
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;
  
        if (j == M) // if pat[0...M-1] = txt[i_._ i+1_._ ...i+M-1]
        {
            cout << ""Pattern found at index "" << i << endl;
            i = i + M;
        }
        else if (j == 0)
            i = i + 1;
        else
            i = i + j; // slide the pattern by j
    }
}
  
/* Driver code*/
int main()
{
    string txt = ""ABCEABCDABCEABCD"";
    string pat = ""ABCD"";
    search(pat_._ txt);
    return 0;
}
 "
474, C++ Program for Length of the longest substring without repeating characters,"#include <bits/stdc++.h>
using namespace std;
 
// This function returns true if all characters in str[i..j]
// are distinct_._ otherwise returns false
bool areDistinct(string str_._ int i_._ int j)
{
 
    // Note : Default values in visited are false
    vector<bool> visited(26);
 
    for (int k = i; k <= j; k++) {
        if (visited[str[k] - 'a'] == true)
            return false;
        visited[str[k] - 'a'] = true;
    }
    return true;
}
 
// Returns length of the longest substring
// with all distinct characters.
int longestUniqueSubsttr(string str)
{
    int n = str.size();
    int res = 0; // result
    for (int i = 0; i < n; i++)
        for (int j = i; j < n; j++)
            if (areDistinct(str_._ i_._ j))
                res = max(res_._ j - i + 1);
    return res;
}
 
// Driver code
int main()
{
    string str = ""geeksforgeeks"";
    cout << ""The input string is "" << str << endl;
    int len = longestUniqueSubsttr(str);
    cout << ""The length of the longest non-repeating ""
            ""character substring is ""
         << len;
    return 0;
}"
475, C++ Program for Print all permutations with repetition of characters,"#include <bits/stdc++.h>
#include<string.h>
using namespace std;
 
 
/* Following function is used by
the library qsort() function
to sort an array of chars */
int compare (const void * a_._ const void * b);
 
/* The main function that recursively
prints all repeated permutations of
the given string. It uses data[] to store all
permutations one by one */
void allLexicographicRecur (char *str_._ char* data_._
                            int last_._ int index)
{
    int i_._ len = strlen(str);
 
    // One by one fix all characters at
    // the given index and recur for
    // the/ subsequent indexes
    for ( i = 0; i < len; i++ )
    {
        // Fix the ith character at index
        // and if this is not the last
        // index then recursively call
        // for higher indexes
        data[index] = str[i] ;
 
        // If this is the last index then
        // print the string stored in
        // data[]
        if (index == last)
            cout << data << endl;
        else // Recur for higher indexes
            allLexicographicRecur (str_._ data_._ last_._ index+1);
    }
}
 
/* This function sorts input string_._
allocate memory for data (needed
for allLexicographicRecur()) and
calls allLexicographicRecur() for
printing all permutations */
void allLexicographic(char *str)
{
    int len = strlen (str) ;
 
    // Create a temp array that will
    // be used by allLexicographicRecur()
    char *data = (char *) malloc (sizeof(char) * (len + 1)) ;
    data[len] = '\0';
 
    // Sort the input string so that
    // we get all output strings in
    // lexicographically sorted order
    qsort(str_._ len_._ sizeof(char)_._ compare);
 
    // Now print all permutations
    allLexicographicRecur (str_._ data_._ len-1_._ 0);
 
    // Free data to avoid memory leak
    free(data);
}
 
// Needed for library function qsort()
int compare (const void * a_._ const void * b)
{
    return ( *(char *)a - *(char *)b );
}
 
// Driver code
int main()
{
    char str[] = ""ABC"";
    cout << ""All permutations with repetition of ""<<
                                str <<"" are: ""<<endl ;
    allLexicographic(str);
    return 0;
}"
476, C++ Program for Print all interleavings of given two strings,"#include <bits/stdc++.h>
using namespace std;
 
// The main function that recursively prints all interleavings.
// The variable iStr is used to store all interleavings (or
// output strings) one by one.
// i is used to pass next available place in iStr
void printIlsRecur (char *str1_._ char *str2_._ char *iStr_._ int m_._
                    int n_._ int i)
{
    // Base case: If all characters of str1 and str2 have been
    // included in output string_._ then print the output string
    if (m == 0 && n == 0)
        cout << iStr << endl ;
 
    // If some characters of str1 are left to be included_._ then
    // include the first character from the remaining characters
    // and recur for rest
    if (m != 0)
    {
        iStr[i] = str1[0];
        printIlsRecur (str1 + 1_._ str2_._ iStr_._ m - 1_._ n_._ i + 1);
    }
 
    // If some characters of str2 are left to be included_._ then
    // include the first character from the remaining characters
    // and recur for rest
    if (n != 0)
    {
        iStr[i] = str2[0];
        printIlsRecur(str1_._ str2 + 1_._ iStr_._ m_._ n - 1_._ i + 1);
    }
}
 
// Allocates memory for output string and uses printIlsRecur()
// for printing all interleavings
void printIls (char *str1_._ char *str2_._ int m_._ int n)
{
    // allocate memory for the output string
    char *iStr= new char[((m + n + 1)*sizeof(char))];
     
    // Set the terminator for the output string
    iStr[m + n] = '\0';
     
    // print all interleavings using printIlsRecur()
    printIlsRecur (str1_._ str2_._ iStr_._ m_._ n_._ 0);
     
    // free memory to avoid memory leak
    free(iStr);
}
 
// Driver code
int main()
{
    char str1[] = ""AB"";
    char str2[] = ""CD"";
    printIls (str1_._ str2_._ strlen(str1)_._ strlen(str2));
    return 0;
}"
477, C++ Program for Check whether a given string is an interleaving of two other given strings,"#include <bits/stdc++.h>
using namespace std;
 
// Returns true if C is an interleaving of A and B_._
// otherwise returns false
bool isInterleaved (char A[]_._ char B[]_._ char C[])
{
    // Iterate through all characters of C.
    while (*C != 0)
    {
        // Match first character of C with first character
        // of A. If matches them move A to next
        if (*A == *C)
            A++;
 
        // Else Match first character of C with first
        // character of B. If matches them move B to next
        else if (*B == *C)
            B++;
 
        // If doesn't match with either A or B_._ then return
        // false
        else
            return false;
         
        // Move C to next for next iteration
        C++;
    }
 
    // If A or B still have some characters_._ then length of
    // C is smaller than sum of lengths of A and B_._ so
    // return false
    if (*A || *B)
        return false;
 
    return true;
}
 
// Driver program to test above functions
int main()
{
    char A[] = ""AB"";
    char B[] = ""CD"";
    char C[] = ""ACBG"";
    if (isInterleaved(A_._ B_._ C) == true)
        cout << C << "" is interleaved of "" << A << "" and "" << B;
    else
        cout << C << "" is not interleaved of "" << A << "" and "" << B;
 
    return 0;
}"
478, C++ Program for Check whether two strings are anagram of each other,"#include <bits/stdc++.h>
using namespace std;
 
/* function to check whether two strings are anagram of
each other */
bool areAnagram(string str1_._ string str2)
{
    // Get lengths of both strings
    int n1 = str1.length();
    int n2 = str2.length();
 
    // If length of both strings is not same_._ then they
    // cannot be anagram
    if (n1 != n2)
        return false;
 
    // Sort both the strings
    sort(str1.begin()_._ str1.end());
    sort(str2.begin()_._ str2.end());
 
    // Compare sorted strings
    for (int i = 0; i < n1; i++)
        if (str1[i] != str2[i])
            return false;
 
    return true;
}
 
// Driver code
int main()
{
    string str1 = ""gram"";
    string str2 = ""arm"";
 
    // Function Call
    if (areAnagram(str1_._ str2))
        cout << ""The two strings are anagram of each other"";
    else
        cout << ""The two strings are not anagram of each ""
                ""other"";
 
    return 0;
}"
479, C++ Program for Searching for Patterns | Set 5 (Finite Automata),"#include <bits/stdc++.h>
using namespace std;
#define NO_OF_CHARS 256
 
int getNextState(string pat_._ int M_._ int state_._ int x)
{
    // If the character c is same as next character
    // in pattern_._then simply increment state
    if (state < M && x == pat[state])
        return state+1;
 
    // ns stores the result which is next state
    int ns_._ i;
 
    // ns finally contains the longest prefix
    // which is also suffix in ""pat[0..state-1]c""
 
    // Start from the largest possible value
    // and stop when you find a prefix which
    // is also suffix
    for (ns = state; ns > 0; ns--)
    {
        if (pat[ns-1] == x)
        {
            for (i = 0; i < ns-1; i++)
                if (pat[i] != pat[state-ns+1+i])
                    break;
            if (i == ns-1)
                return ns;
        }
    }
 
    return 0;
}
 
/* This function builds the TF table which represents4
    Finite Automata for a given pattern */
void computeTF(string pat_._ int M_._ int TF[][NO_OF_CHARS])
{
    int state_._ x;
    for (state = 0; state <= M; ++state)
        for (x = 0; x < NO_OF_CHARS; ++x)
            TF[state][x] = getNextState(pat_._ M_._ state_._ x);
}
 
/* Prints all occurrences of pat in txt */
void search(string pat_._ string txt)
{
    int M = pat.size();
    int N = txt.size();
 
    int TF[M+1][NO_OF_CHARS];
 
    computeTF(pat_._ M_._ TF);
 
    // Process txt over FA.
    int i_._ state=0;
    for (i = 0; i < N; i++)
    {
        state = TF[state][txt[i]];
        if (state == M)
            cout<<"" Pattern found at index ""<< i-M+1<<endl;
    }
}
 
// Driver program to test above function
int main()
{
    string txt = ""AABAACAADAABAAABAA"";
    string pat = ""AABA"";
    search(pat_._ txt);
    return 0;
}"
480, C++ Program for Pattern Searching | Set 6 (Efficient Construction of Finite Automata),"#include <bits/stdc++.h>
using namespace std;
#define NO_OF_CHARS 256
  
/* This function builds the TF table 
which represents Finite Automata for a 
given pattern */
void computeTransFun(char* pat_._ int M_._ int TF[][NO_OF_CHARS])
{
    int i_._ lps = 0_._ x;
  
    // Fill entries in first row
    for (x = 0; x < NO_OF_CHARS; x++)
        TF[0][x] = 0;
    TF[0][pat[0]] = 1;
  
    // Fill entries in other rows
    for (i = 1; i <= M; i++) {
        // Copy values from row at index lps
        for (x = 0; x < NO_OF_CHARS; x++)
            TF[i][x] = TF[lps][x];
  
        // Update the entry corresponding to this character
        TF[i][pat[i]] = i + 1;
  
        // Update lps for next row to be filled
        if (i < M)
            lps = TF[lps][pat[i]];
    }
}
  
/* Prints all occurrences of pat in txt */
void search(char pat[]_._ char txt[])
{
    int M = strlen(pat);
    int N = strlen(txt);
  
    int TF[M + 1][NO_OF_CHARS];
  
    computeTransFun(pat_._ M_._ TF);
  
    // process text over FA.
    int i_._ j = 0;
    for (i = 0; i < N; i++) {
        j = TF[j][txt[i]];
        if (j == M) {
            cout << ""pattern found at index "" << i - M + 1 << endl;
        }
    }
}
  
/* Driver code */
int main()
{
    char txt[] = ""ACACACACAGAAGA ACACAGAACACAGA GEEKS"";
    char pat[] = ""ACACAGA"";
    search(pat_._ txt);
    return 0;
}"
481, C++ Program for Pattern Searching | Set 7 (Boyer Moore Algorithm – Bad Character Heuristic),"#include <bits/stdc++.h>
using namespace std;
# define NO_OF_CHARS 256
 
// The preprocessing function for Boyer Moore's
// bad character heuristic
void badCharHeuristic( string str_._ int size_._
                        int badchar[NO_OF_CHARS])
{
    int i;
 
    // Initialize all occurrences as -1
    for (i = 0; i < NO_OF_CHARS; i++)
        badchar[i] = -1;
 
    // Fill the actual value of last occurrence
    // of a character
    for (i = 0; i < size; i++)
        badchar[(int) str[i]] = i;
}
 
/* A pattern searching function that uses Bad
Character Heuristic of Boyer Moore Algorithm */
void search( string txt_._ string pat)
{
    int m = pat.size();
    int n = txt.size();
 
    int badchar[NO_OF_CHARS];
 
    /* Fill the bad character array by calling
    the preprocessing function badCharHeuristic()
    for given pattern */
    badCharHeuristic(pat_._ m_._ badchar);
 
    int s = 0; // s is shift of the pattern with
                // respect to text
    while(s <= (n - m))
    {
        int j = m - 1;
 
        /* Keep reducing index j of pattern while
        characters of pattern and text are
        matching at this shift s */
        while(j >= 0 && pat[j] == txt[s + j])
            j--;
 
        /* If the pattern is present at current
        shift_._ then index j will become -1 after
        the above loop */
        if (j < 0)
        {
            cout << ""pattern occurs at shift = "" <<  s << endl;
 
            /* Shift the pattern so that the next
            character in text aligns with the last
            occurrence of it in pattern.
            The condition s+m < n is necessary for
            the case when pattern occurs at the end
            of text */
            s += (s + m < n)? m-badchar[txt[s + m]] : 1;
 
        }
 
        else
            /* Shift the pattern so that the bad character
            in text aligns with the last occurrence of
            it in pattern. The max function is used to
            make sure that we get a positive shift.
            We may get a negative shift if the last
            occurrence of bad character in pattern
            is on the right side of the current
            character. */
            s += max(1_._ j - badchar[txt[s + j]]);
    }
}
 
/* Driver code */
int main()
{
    string txt= ""ABAAABCD"";
    string pat = ""ABC"";
    search(txt_._ pat);
    return 0;
}
 "
482, C++ Program for Dynamic Programming | Set 17 (Palindrome Partitioning),"#include <bits/stdc++.h>
using namespace std;
 
bool isPalindrome(string String_._ int i_._ int j)
{
    while(i < j)
    {
      if(String[i] != String[j])
        return false; 
      i++;
      j--;
    }
    return true;
}
int minPalPartion(string String_._ int i_._ int j)
{
    if( i >= j || isPalindrome(String_._ i_._ j) )
      return 0;
    int ans = INT_MAX_._ count;
    for(int k = i; k < j; k++)
    {
      count = minPalPartion(String_._ i_._ k) +
        minPalPartion(String_._ k + 1_._ j) + 1;
  
      ans = min(ans_._ count);
    }
    return ans;
}
// Driver code
int main() {
    string str = ""ababbbabbababa"";
    cout << ""Min cuts needed for "" <<
      ""Palindrome Partitioning is "" << 
      minPalPartion(str_._ 0_._ str.length() - 1) << endl;
    return 0;
}"
483, C++ Program for Lexicographic rank of a string,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function to find
// factorial of n
int fact(int n) {
    return (n <= 1) ? 1 : n * fact(n - 1);
}
 
// A utility function to count
// smaller characters on right of arr[low]
int findSmallerInRight(string str_._ int low_._ int high)
{
    int countRight = 0_._ i;
 
    for (i = low + 1; i <= high; ++i)
        if (str[i] < str[low])
            ++countRight;
 
    return countRight;
}
 
// A function to find rank of a string
// in all permutations of characters
int findRank(string str)
{
    int len = str.size();
    int mul = fact(len);
    int rank = 1;
    int countRight;
 
    int i;
    for (i = 0; i < len; ++i) {
        mul /= len - i;
 
        // Count number of chars smaller than str[i]
        // from str[i+1] to str[len-1]
        countRight = findSmallerInRight(str_._ i_._ len - 1);
 
        rank += countRight * mul;
    }
 
    return rank;
}
 
// Driver code
int main()
{
    string str = ""string"";
 
    // Function call
    cout << findRank(str);
    return 0;
}"
484, C++ Program for Print all permutations in sorted (lexicographic) order,"#include <bits/stdc++.h>
using namespace std;
 
/* Following function is needed for library function qsort(). Refer
http://www.cplusplus.com/reference/clibrary/cstdlib/qsort/ */
int compare (const void *a_._ const void * b)
{ return ( *(char *)a - *(char *)b ); }
 
// A utility function two swap two characters a and b
void swap (char* a_._ char* b)
{
    char t = *a;
    *a = *b;
    *b = t;
}
 
// This function finds the index of the smallest character
// which is greater than 'first' and is present in str[l..h]
int findCeil (char str[]_._ char first_._ int l_._ int h)
{
    // initialize index of ceiling element
    int ceilIndex = l;
 
    // Now iterate through rest of the elements and find
    // the smallest character greater than 'first'
    for (int i = l+1; i <= h; i++)
    if (str[i] > first && str[i] < str[ceilIndex])
            ceilIndex = i;
 
    return ceilIndex;
}
 
// Print all permutations of str in sorted order
void sortedPermutations ( char str[] )
{
    // Get size of string
    int size = strlen(str);
 
    // Sort the string in increasing order
    qsort( str_._ size_._ sizeof( str[0] )_._ compare );
 
    // Print permutations one by one
    bool isFinished = false;
    while ( ! isFinished )
    {
        // print this permutation
        cout << str << endl;
 
        // Find the rightmost character which is
        // smaller than its next character.
        // Let us call it 'first char'
        int i;
        for ( i = size - 2; i >= 0; --i )
        if (str[i] < str[i+1])
            break;
 
        // If there is no such character_._ all are
        // sorted in decreasing order_._ means we
        // just printed the last permutation and we are done.
        if ( i == -1 )
            isFinished = true;
        else
        {
            // Find the ceil of 'first char' in
            // right of first character.
            // Ceil of a character is the smallest
            // character greater than it
            int ceilIndex = findCeil( str_._ str[i]_._ i + 1_._ size - 1 );
 
            // Swap first and second characters
            swap( &str[i]_._ &str[ceilIndex] );
 
            // Sort the string on right of 'first char'
            qsort( str + i + 1_._ size - i - 1_._ sizeof(str[0])_._ compare );
        }
    }
}
 
// Driver program to test above function
int main()
{
    char str[] = ""ABCD"";
    sortedPermutations( str );
    return 0;
}"
485, C++ Program for Longest Palindromic Substring | Set 1,"#include <bits/stdc++.h>
using namespace std;
 
// Function to print a substring str[low..high]
void printSubStr(string str_._ int low_._ int high)
{
    for (int i = low; i <= high; ++i)
        cout << str[i];
}
 
// This function prints the
// longest palindrome substring
// It also returns the length
// of the longest palindrome
int longestPalSubstr(string str)
{
    // get length of input string
    int n = str.size();
 
    // All substrings of length 1
    // are palindromes
    int maxLength = 1_._ start = 0;
 
    // Nested loop to mark start and end index
    for (int i = 0; i < str.length(); i++) {
        for (int j = i; j < str.length(); j++) {
            int flag = 1;
 
            // Check palindrome
            for (int k = 0; k < (j - i + 1) / 2; k++)
                if (str[i + k] != str[j - k])
                    flag = 0;
 
            // Palindrome
            if (flag && (j - i + 1) > maxLength) {
                start = i;
                maxLength = j - i + 1;
            }
        }
    }
 
    cout << ""Longest palindrome substring is: "";
    printSubStr(str_._ start_._ start + maxLength - 1);
 
    // return length of LPS
    return maxLength;
}
 
// Driver Code
int main()
{
    string str = ""forgeeksskeegfor"";
    cout << ""\nLength is: ""
         << longestPalSubstr(str);
    return 0;
}"
486, C++ Program for An in-place algorithm for String Transformation,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function to swap characters
void swap ( char* a_._ char* b )
{
    char t = *a;
    *a = *b;
    *b = t;
}
 
// A utility function to reverse string str[low..high]
void reverse ( char* str_._ int low_._ int high )
{
    while ( low < high )
    {
        swap( &str[low]_._ &str[high] );
        ++low;
        --high;
    }
}
 
// Cycle leader algorithm to move all even
//  positioned elements at the end.
void cycleLeader ( char* str_._ int shift_._ int len )
{
    int j;
    char item;
 
    for (int i = 1; i < len; i *= 3 )
    {
        j = i;
 
        item = str[j + shift];
        do
        {
            // odd index
            if ( j & 1 )
                j = len / 2 + j / 2;
            // even index
            else
                j /= 2;
 
            // keep the back-up of element at new position
            swap (&str[j + shift]_._ &item);
        }
        while ( j != i );
    }
}
 
// The main function to transform a string. This function 
// mainly uses cycleLeader() to transform
void moveNumberToSecondHalf( char* str )
{
    int k_._ lenFirst;
 
    int lenRemaining = strlen( str );
    int shift = 0;
 
    while ( lenRemaining )
    {
        k = 0;
 
        // Step 1: Find the largest prefix
        // subarray of the form 3^k + 1
        while ( pow( 3_._ k ) + 1 <= lenRemaining )
            k++;
        lenFirst = pow( 3_._ k - 1 ) + 1;
        lenRemaining -= lenFirst;
 
        // Step 2: Apply cycle leader algorithm
        // for the largest subarrau
        cycleLeader ( str_._ shift_._ lenFirst );
 
        // Step 4.1: Reverse the second half of first subarray
        reverse ( str_._ shift / 2_._ shift - 1 );
 
        // Step 4.2: Reverse the first half of second sub-string.
        reverse ( str_._ shift_._ shift + lenFirst / 2 - 1 );
 
        // Step 4.3 Reverse the second half of first sub-string
        // and first half of second sub-string together
        reverse ( str_._ shift / 2_._ shift + lenFirst / 2 - 1 );
 
        // Increase the length of first subarray
        shift += lenFirst;
    }
}
 
// Driver program to test above function
int main()
{
    char str[] = ""a1b2c3d4e5f6g7"";
    moveNumberToSecondHalf( str );
    cout<<str;
    return 0;
}"
487, C++ Program for Longest Palindromic Substring | Set 2,"#include <bits/stdc++.h>
using namespace std;
  
// A utility function to print
// a substring str[low..high]
// This function prints the
// longest palindrome substring (LPS)
// of str[]. It also returns the
// length of the longest palindrome
int longestPalSubstr(string str)
{
    int n = str.size(); // calculating size of string
    if (n < 2)
        return n; // if string is empty then size will be 0.
                  // if n==1 then_._ answer will be 1(single
                  // character will always palindrome)
  
    int maxLength = 1_._ start = 0;
    int low_._ high;
    for (int i = 0; i < n; i++) {
        low = i - 1;
        high = i + 1;
        while (high < n
               && str[high] == str[i]) // increment 'high'
            high++;
  
        while (low >= 0
               && str[low] == str[i]) // decrement 'low'
            low--;
  
        while (low >= 0 && high < n
               && str[low] == str[high]) {
            low--;
            high++;
        }
  
        int length = high - low - 1;
        if (maxLength < length) {
            maxLength = length;
            start = low + 1;
        }
    }
  
    cout << ""Longest palindrome substring is: "";
    cout << str.substr(start_._ maxLength);
    return maxLength;
}
  
// Driver program to test above functions
int main()
{
    string str = ""forgeeksskeegfor"";
    cout << ""\nLength is: "" << longestPalSubstr(str)
         << endl;
    return 0;
}"
488, C++ Program for Given a sequence of words_._ print all anagrams together | Set 1,"#include <bits/stdc++.h>
#include <string.h>
using namespace std;
 
// structure for each word of duplicate array
class Word {
public:
    char* str; // to store word itself
    int index; // index of the word in the original array
};
 
// structure to represent duplicate array.
class DupArray {
public:
    Word* array; // Array of words
    int size; // Size of array
};
 
// Create a DupArray object that contains an array of Words
DupArray* createDupArray(char* str[]_._ int size)
{
    // Allocate memory for dupArray and all members of it
    DupArray* dupArray = new DupArray();
    dupArray->size = size;
    dupArray->array
        = new Word[(dupArray->size * sizeof(Word))];
 
    // One by one copy words from the given wordArray to
    // dupArray
    int i;
    for (i = 0; i < size; ++i) {
        dupArray->array[i].index = i;
        dupArray->array[i].str
            = new char[(strlen(str[i]) + 1)];
        strcpy(dupArray->array[i].str_._ str[i]);
    }
 
    return dupArray;
}
 
// Compare two characters. Used in qsort() for
// sorting an array of characters (Word)
int compChar(const void* a_._ const void* b)
{
    return *(char*)a - *(char*)b;
}
 
// Compare two words. Used in qsort()
// for sorting an array of words
int compStr(const void* a_._ const void* b)
{
    Word* a1 = (Word*)a;
    Word* b1 = (Word*)b;
    return strcmp(a1->str_._ b1->str);
}
 
// Given a list of words in wordArr[]_._
void printAnagramsTogether(char* wordArr[]_._ int size)
{
    // Step 1: Create a copy of all words present in given
    // wordArr. The copy will also have original indexes of
    // words
    DupArray* dupArray = createDupArray(wordArr_._ size);
 
    // Step 2: Iterate through all words in dupArray and
    // sort individual words.
    int i;
    for (i = 0; i < size; ++i)
        qsort(dupArray->array[i].str_._
              strlen(dupArray->array[i].str)_._ sizeof(char)_._
              compChar);
 
    // Step 3: Now sort the array of words in dupArray
    qsort(dupArray->array_._ size_._ sizeof(dupArray->array[0])_._
          compStr);
 
    // Step 4: Now all words in dupArray are together_._ but
    // these words are changed. Use the index member of word
    // struct to get the corresponding original word
    for (i = 0; i < size; ++i)
        cout << wordArr[dupArray->array[i].index] << "" "";
}
 
// Driver program to test above functions
int main()
{
    char* wordArr[] = { ""cat""_._ ""dog""_._ ""tac""_._ ""god""_._ ""act"" };
    int size = sizeof(wordArr) / sizeof(wordArr[0]);
    printAnagramsTogether(wordArr_._ size);
    return 0;
}"
489, C++ Program for Given a sequence of words_._ print all anagrams together | Set 2,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
 
#define NO_OF_CHARS 26
 
// Structure to represent list node for indexes of words in
// the given sequence. The list nodes are used to connect
// anagrams at leaf nodes of Trie
struct IndexNode
{
    int index;
    struct IndexNode* next;
};
 
// Structure to represent a Trie Node
struct TrieNode
{
    bool isEnd;  // indicates end of word
    struct TrieNode* child[NO_OF_CHARS]; // 26 slots each for 'a' to 'z'
    struct IndexNode* head; // head of the index list
};
 
 
// A utility function to create a new Trie node
struct TrieNode* newTrieNode()
{
    struct TrieNode* temp = new TrieNode;
    temp->isEnd = 0;
    temp->head = NULL;
    for (int i = 0; i < NO_OF_CHARS; ++i)
        temp->child[i] = NULL;
    return temp;
}
 
/* Following function is needed for library function qsort(). Refer
   http://www.cplusplus.com/reference/clibrary/cstdlib/qsort/ */
int compare(const void* a_._ const void* b)
{  return *(char*)a - *(char*)b; }
 
/* A utility function to create a new linked list node */
struct IndexNode* newIndexNode(int index)
{
    struct IndexNode* temp = new IndexNode;
    temp->index = index;
    temp->next = NULL;
    return temp;
}
 
// A utility function to insert a word to Trie
void insert(struct TrieNode** root_._ char* word_._ int index)
{
    // Base case
    if (*root == NULL)
        *root = newTrieNode();
 
    if (*word != '\0')
        insert( &( (*root)->child[tolower(*word) - 'a'] )_._ word+1_._ index );
    else  // If end of the word reached
    {
        // Insert index of this word to end of index linked list
        if ((*root)->isEnd)
        {
            IndexNode* pCrawl = (*root)->head;
            while( pCrawl->next )
                pCrawl = pCrawl->next;
            pCrawl->next = newIndexNode(index);
        }
        else  // If Index list is empty
        {
            (*root)->isEnd = 1;
            (*root)->head = newIndexNode(index);
        }
    }
}
 
// This function traverses the built trie. When a leaf node is reached_._
// all words connected at that leaf node are anagrams. So it traverses
// the list at leaf node and uses stored index to print original words
void printAnagramsUtil(struct TrieNode* root_._ char *wordArr[])
{
    if (root == NULL)
        return;
 
    // If a lead node is reached_._ print all anagrams using the indexes
    // stored in index linked list
    if (root->isEnd)
    {
        // traverse the list
        IndexNode* pCrawl = root->head;
        while (pCrawl != NULL)
        {
            printf( ""%s ""_._ wordArr[ pCrawl->index ] );
            pCrawl = pCrawl->next;
        }
    }
 
    for (int i = 0; i < NO_OF_CHARS; ++i)
        printAnagramsUtil(root->child[i]_._ wordArr);
}
 
// The main function that prints all anagrams together. wordArr[] is input
// sequence of words.
void printAnagramsTogether(char* wordArr[]_._ int size)
{
    // Create an empty Trie
    struct TrieNode* root = NULL;
 
    // Iterate through all input words
    for (int i = 0; i < size; ++i)
    {
        // Create a buffer for this word and copy the word to buffer
        int len = strlen(wordArr[i]);
        char *buffer = new char[len+1];
        strcpy(buffer_._ wordArr[i]);
 
        // Sort the buffer
        qsort( (void*)buffer_._ strlen(buffer)_._ sizeof(char)_._ compare );
 
        // Insert the sorted buffer and its original index to Trie
        insert(&root_._  buffer_._ i);
    }
 
    // Traverse the built Trie and print all anagrams together
    printAnagramsUtil(root_._ wordArr);
}
 
 
// Driver program to test above functions
int main()
{
    char* wordArr[] = {""cat""_._ ""dog""_._ ""tac""_._ ""god""_._ ""act""_._ ""gdo""};
    int size = sizeof(wordArr) / sizeof(wordArr[0]);
    printAnagramsTogether(wordArr_._ size);
    return 0;
}"
490, C++ Program for Count words in a given string,"#include <bits/stdc++.h>
using namespace std;
 
#define OUT 0
#define IN 1
 
// returns number of words in str
unsigned countWords(char *str)
{
    int state = OUT;
    unsigned wc = 0; // word count
 
    // Scan all characters one by one
    while (*str)
    {
        // If next character is a separator_._ set the
        // state as OUT
        if (*str == ' ' || *str == '\n' || *str == '\t')
            state = OUT;
 
        // If next character is not a word separator and
        // state is OUT_._ then set the state as IN and
        // increment word count
        else if (state == OUT)
        {
            state = IN;
            ++wc;
        }
 
        // Move to next character
        ++str;
    }
 
    return wc;
}
 
// Driver code
int main(void)
{
    char str[] = ""One two     three\n four\tfive "";
    cout<<""No of words : ""<<countWords(str);
    return 0;
}"
491, C++ Program for String matching where one string contains wildcard characters,"#include <stdbool.h>
#include <stdio.h>
 
// The main function that checks if two given strings
// match. The first string may contain wildcard characters
bool match(char* first_._ char* second)
{
    // If we reach at the end of both strings_._ we are done
    if (*first == '\0' && *second == '\0')
        return true;
 
    // Make sure to eliminate consecutive '*'
    if (*first == '*') {
        while (*(first + 1) == '*')
            first++;
    }
 
    // Make sure that the characters after '*' are present
    // in second string. This function assumes that the
    // first string will not contain two consecutive '*'
    if (*first == '*' && *(first + 1) != '\0'
        && *second == '\0')
        return false;
 
    // If the first string contains '?'_._ or current
    // characters of both strings match
    if (*first == '?' || *first == *second)
        return match(first + 1_._ second + 1);
 
    // If there is *_._ then there are two possibilities
    // a) We consider current character of second string
    // b) We ignore current character of second string.
    if (*first == '*')
        return match(first + 1_._ second)
               || match(first_._ second + 1);
    return false;
}
 
// A function to run test cases
void test(char* first_._ char* second)
{
    match(first_._ second) ? puts(""Yes"") : puts(""No"");
}
 
// Driver program to test above functions
int main()
{
    test(""g*ks""_._ ""geeks""); // Yes
    test(""ge?ks*""_._ ""geeksforgeeks""); // Yes
    test(""g*k""_._ ""gee""); // No because 'k' is not in second
    test(""*pqrs""_._
         ""pqrst""); // No because 't' is not in first
    test(""abc*bcd""_._ ""abcdhghgbcd""); // Yes
    test(""abc*c?d""_._ ""abcd""); // No because second must have
                             // 2 instances of 'c'
    test(""*c*d""_._ ""abcd""); // Yes
    test(""*?c*d""_._ ""abcd""); // Yes
    test(""geeks**""_._ ""geeks""); // Yes
 
    return 0;
}"
492, C++ Program for Write your own atoi(),"#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    int val;
    char strn1[] = ""12546"";
 
    val = atoi(strn1);
    cout <<""String value = "" << strn1 << endl;
    cout <<""Integer value = "" << val << endl;
 
    char strn2[] = ""GeeksforGeeks"";
    val = atoi(strn2);
    cout <<""String value = "" << strn2 << endl;
    cout <<""Integer value = "" << val <<endl;
 
    return (0);
}"
493, C++ Program for Dynamic Programming | Set 29 (Longest Common Substring),"#include <iostream>
#include <string.h>
using namespace std;
 
/* Returns length of longest
   common substring of X[0..m-1]
   and Y[0..n-1] */
int LCSubStr(char* X_._ char* Y_._ int m_._ int n)
{
    // Create a table to store
    // lengths of longest
    // common suffixes of substrings.  
    // Note that LCSuff[i][j] contains
    // length of longest common suffix
    // of X[0..i-1] and Y[0..j-1].
 
    int LCSuff[m + 1][n + 1];
    int result = 0; // To store length of the
                    // longest common substring
 
    /* Following steps build LCSuff[m+1][n+1] in
        bottom up fashion. */
    for (int i = 0; i <= m; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            // The first row and first column
            // entries have no logical meaning_._
            // they are used only for simplicity
            // of program
            if (i == 0 || j == 0)
                LCSuff[i][j] = 0;
 
            else if (X[i - 1] == Y[j - 1]) {
                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1;
                result = max(result_._ LCSuff[i][j]);
            }
            else
                LCSuff[i][j] = 0;
        }
    }
    return result;
}
 
// Driver code
int main()
{
    char X[] = ""OldSite:GeeksforGeeks.org"";
    char Y[] = ""NewSite:GeeksQuiz.com"";
 
    int m = strlen(X);
    int n = strlen(Y);
 
    cout << ""Length of Longest Common Substring is ""
         << LCSubStr(X_._ Y_._ m_._ n);
    return 0;
}"
494, C++ Program for Remove “b” and “ac” from a given string,"#include <iostream>
using namespace std;
#define ONE 1
#define TWO 2
 
// The main function that removes occurrences of ""a"" and
// ""bc"" in input string
void stringFilter(char* str)
{
    // state is initially ONE (The previous character is not
    // a)
    int state = ONE;
 
    // i and j are index variables_._ i is used to read next
    // character of input string_._ j is used for indexes of
    // output string (modified input string)
    int j = 0;
 
    // Process all characters of input string one by one
    for (int i = 0; str[i] != '\0'; i++) {
        /* If state is ONE_._ then do NOT copy the current
          character to output if one of the following
          conditions is true
           ...a) Current character is 'b' (We need to remove
          'b')
           ...b) Current character is 'a' (Next character
          may be 'c') */
        if (state == ONE && str[i] != 'a'
            && str[i] != 'b') {
            str[j] = str[i];
            j++;
        }
 
        // If state is TWO and current character is not 'c'
        // (other- wise we ignore both previous and current
        // characters)
        if (state == TWO && str[i] != 'c') {
            // First copy the previous 'a'
            str[j] = 'a';
            j++;
 
            // Then copy the current character if it is not
            // 'a' and 'b'
            if (str[i] != 'a' && str[i] != 'b') {
                str[j] = str[i];
                j++;
            }
        }
 
        // Change state according to current character
        state = (str[i] == 'a') ? TWO : ONE;
    }
 
    // If last character was 'a'_._ copy it to output
    if (state == TWO) {
        str[j] = 'a';
        j++;
    }
 
    // Set the string terminator
    str[j] = '\0';
}
 
/* Driver program to check above functions */
int main()
{
    char str1[] = ""ad"";
    stringFilter(str1);
    cout << str1 << endl;
 
    char str2[] = ""acbac"";
    stringFilter(str2);
    cout << str2 << endl;
 
    char str3[] = ""aaac"";
    stringFilter(str3);
    cout << str3 << endl;
 
    char str4[] = ""react"";
    stringFilter(str4);
    cout << str4 << endl;
 
    char str5[] = ""aa"";
    stringFilter(str5);
    cout << str5 << endl;
 
    char str6[] = ""ababaac"";
    stringFilter(str6);
    cout << str6 << endl;
 
    return 0;
}"
495, C++ Program for Dynamic Programming | Set 33 (Find if a string is interleaved of two other strings),"#include <iostream>
#include <string.h>
using namespace std;
 
// The main function that
// returns true if C is
// an interleaving of A
// and B_._ otherwise false.
bool isInterleaved(
    char* A_._ char* B_._ char* C)
{
    // Find lengths of the two strings
    int M = strlen(A)_._ N = strlen(B);
 
    // Let us create a 2D table
    // to store solutions of
    // subproblems.  C[i][j] will
    // be true if C[0..i+j-1]
    // is an interleaving of
    // A[0..i-1] and B[0..j-1].
    bool IL[M + 1][N + 1];
 
    // Initialize all values as false.
    memset(IL_._ 0_._ sizeof(IL));
 
    // C can be an interleaving of
    // A and B only of the sum
    // of lengths of A & B is equal
    // to the length of C.
    if ((M + N) != strlen(C))
        return false;
 
    // Process all characters of A and B
    for (int i = 0; i <= M; ++i) {
        for (int j = 0; j <= N; ++j) {
            // two empty strings have an
            // empty string as interleaving
            if (i == 0 && j == 0)
                IL[i][j] = true;
 
            // A is empty
            else if (i == 0) {
                if (B[j - 1] == C[j - 1])
                    IL[i][j] = IL[i][j - 1];
            }
 
            // B is empty
            else if (j == 0) {
                if (A[i - 1] == C[i - 1])
                    IL[i][j] = IL[i - 1][j];
            }
 
            // Current character of C matches
            // with current character of A_._
            // but doesn't match with current
            // character of B
            else if (
                A[i - 1] == C[i + j - 1]
                && B[j - 1] != C[i + j - 1])
                IL[i][j] = IL[i - 1][j];
 
            // Current character of C matches
            // with current character of B_._
            // but doesn't match with current
            // character of A
            else if (
                A[i - 1] != C[i + j - 1]
                && B[j - 1] == C[i + j - 1])
                IL[i][j] = IL[i][j - 1];
 
            // Current character of C matches
            // with that of both A and B
            else if (
                A[i - 1] == C[i + j - 1]
                && B[j - 1] == C[i + j - 1])
                IL[i][j]
                    = (IL[i - 1][j]
                       || IL[i][j - 1]);
        }
    }
 
    return IL[M][N];
}
 
// A function to run test cases
void test(char* A_._ char* B_._ char* C)
{
    if (isInterleaved(A_._ B_._ C))
        cout << C << "" is interleaved of ""
             << A << "" and "" << B << endl;
    else
        cout << C << "" is not interleaved of ""
             << A << "" and "" << B << endl;
}
 
// Driver program to test above functions
int main()
{
    test(""XXY""_._ ""XXZ""_._ ""XXZXXXY"");
    test(""XY""_._ ""WZ""_._ ""WZXY"");
    test(""XY""_._ ""X""_._ ""XXY"");
    test(""YX""_._ ""X""_._ ""XXY"");
    test(""XXY""_._ ""XXZ""_._ ""XXXXZY"");
    return 0;
}"
496, C++ Program for Find the first non-repeating character from a stream of characters,"#include <iostream>
#define MAX_CHAR 256
using namespace std;
 
// A linked list node
struct node {
    char a;
    struct node *next_._ *prev;
};
 
// A utility function to append a character x at the end
// of DLL. Note that the function may change head and tail
// pointers_._ that is why pointers to these pointers are
// passed.
void appendNode(struct node** head_ref_._
                struct node** tail_ref_._ char x)
{
    struct node* temp = new node;
    temp->a = x;
    temp->prev = temp->next = NULL;
 
    if (*head_ref == NULL) {
        *head_ref = *tail_ref = temp;
        return;
    }
    (*tail_ref)->next = temp;
    temp->prev = *tail_ref;
    *tail_ref = temp;
}
 
// A utility function to remove a node 'temp' from DLL.
// Note that the function may change the head and tail pointers_._
// that is why pointers to these pointers are passed.
void removeNode(struct node** head_ref_._
                struct node** tail_ref_._ struct node* temp)
{
    if (*head_ref == NULL)
        return;
 
    if (*head_ref == temp)
        *head_ref = (*head_ref)->next;
    if (*tail_ref == temp)
        *tail_ref = (*tail_ref)->prev;
    if (temp->next != NULL)
        temp->next->prev = temp->prev;
    if (temp->prev != NULL)
        temp->prev->next = temp->next;
 
    delete (temp);
}
 
void findFirstNonRepeating()
{
    // inDLL[x] contains pointer to
    // a DLL node if x is present
    // in DLL. If x is not present_._ then inDLL[x] is NULL
    struct node* inDLL[MAX_CHAR];
 
    // repeated[x] is true if x is repeated two or more
    // times. If x is not seen so far or x is seen only
    // once. then repeated[x] is false
    bool repeated[MAX_CHAR];
 
    // Initialize the above two arrays
    struct node *head = NULL_._ *tail = NULL;
    for (int i = 0; i < MAX_CHAR; i++) {
        inDLL[i] = NULL;
        repeated[i] = false;
    }
 
    // Let us consider following stream and see the process
    char stream[] = ""geeksforgeeksandgeeksquizfor"";
    for (int i = 0; stream[i]; i++) {
        char x = stream[i];
        cout << ""Reading "" << x << "" from stream \n"";
 
        // We process this character only if it has not
        // occurred or occurred only once. repeated[x] is
        // true if x is repeated twice or more.s
        if (!repeated[x]) {
            // If the character is not in DLL_._ then add this
            // at the end of DLL.
            if (inDLL[x] == NULL) {
                appendNode(&head_._ &tail_._ stream[i]);
                inDLL[x] = tail;
            }
            else // Otherwise remove this character from DLL
            {
                removeNode(&head_._ &tail_._ inDLL[x]);
                inDLL[x] = NULL;
                repeated[x]
                    = true; // Also mark it as repeated
            }
        }
 
        // Print the current first non-repeating character
        // from stream
        if (head != NULL)
            cout << ""First non-repeating character so far ""
                    ""is ""
                 << head->a << endl;
    }
}
 
/* Driver code */
int main()
{
    findFirstNonRepeating();
    return 0;
}"
497, C++ Program for Recursively remove all adjacent duplicates,"#include <bits/stdc++.h>
using namespace std;
 
// Recursively removes adjacent duplicates from str and
// returns new string. last_removed is a pointer to
// last_removed character
char* removeUtil(char* str_._ char* last_removed)
{
 
    // If length of string is 1 or 0
    if (str[0] == '\0' || str[1] == '\0')
        return str;
 
    // Remove leftmost same characters and recur for
    // remaining string
    if (str[0] == str[1]) {
        *last_removed = str[0];
        while (str[1] && str[0] == str[1])
            str++;
        str++;
        return removeUtil(str_._ last_removed);
    }
 
    // At this point_._ the first character is definitely
    // different from its adjacent. Ignore first character
    // and recursively remove characters from remaining
    // string
    char* rem_str = removeUtil(str + 1_._ last_removed);
 
    // Check if the first character of the rem_string
    // matches with the first character of the original
    // string
    if (rem_str[0] && rem_str[0] == str[0]) {
        *last_removed = str[0];
 
        // Remove first character
        return (rem_str + 1);
    }
 
    // If remaining string becomes empty and last removed
    // character is same as first character of original
    // string. This is needed for a string like ""acbbcddc""
    if (rem_str[0] == '\0' && *last_removed == str[0])
        return rem_str;
 
    // If the two first characters of str and rem_str don't
    // match_._ append first character of str before the first
    // character of rem_str.
    rem_str--;
    rem_str[0] = str[0];
    return rem_str;
}
 
// Function to remove
char* remove(char* str)
{
    char last_removed = '\0';
    return removeUtil(str_._ &last_removed);
}
 
// Driver program to test above functions
int main()
{
    char str1[] = ""geeksforgeeg"";
    cout << remove(str1) << endl;
 
    char str2[] = ""azxxxzy"";
    cout << remove(str2) << endl;
 
    char str3[] = ""caaabbbaac"";
    cout << remove(str3) << endl;
 
    char str4[] = ""gghhg"";
    cout << remove(str4) << endl;
 
    char str5[] = ""aaaacddddcappp"";
    cout << remove(str5) << endl;
 
    char str6[] = ""aaaaaaaaaa"";
    cout << remove(str6) << endl;
 
    char str7[] = ""qpaaaaadaaaaadprq"";
    cout << remove(str7) << endl;
 
    char str8[] = ""acaaabbbacdddd"";
    cout << remove(str8) << endl;
 
    char str9[] = ""acbbcddc"";
    cout << remove(str9) << endl;
 
    return 0;
}"
498, C++ Program for Rearrange a string so that all same characters become d distance away,"#include <bits/stdc++.h>
#include <iostream>
using namespace std;
typedef pair<char_._ int> PAIR;
 
// Comparator of priority_queue
struct cmp {
    bool operator()(const PAIR& a_._ const PAIR& b)
    {
        if(a.second < b.second) return true;
          else if(a.second > b.second) return false;
          else return a.first > b.first;
    }
};
 
void rearrange(char* str_._ int d)
{
    // Length of the string
    int n = strlen(str);
 
    // A structure to store a character and its frequency
    unordered_map<char_._ int> m;
 
    // Traverse the input string and store frequencies of
    // all characters.
    for (int i = 0; i < n; i++) {
        m[str[i]]++;
        str[i] = '\0';
    }
 
    // max-heap
    priority_queue<PAIR_._ vector<PAIR>_._ cmp> pq(m.begin()_._
                                               m.end());
 
    // Now one by one extract all distinct characters from
    // heap and put them back in str[] with the d
    // distance constraint
    while (pq.empty() == false) {
        char x = pq.top().first;
         
          // Find the first available position in str[]
          int p = 0;
        while (str[p] != '\0')
            p++;
           
          // Fill x at p_._ p+d_._ p+2d_._ .. p+(frequency-1)d
        for (int k = 0; k < pq.top().second; k++) {
           
              // If the index goes beyond size_._ then string
            // cannot be rearranged.
            if (p + d * k >= n) {
                cout << ""Cannot be rearranged"";
                exit(0);
            }
            str[p + d * k] = x;
        }
        pq.pop();
    }
}
 
// Driver Code
int main()
{
    char str[] = ""aabbcc"";
   
      // Function call
    rearrange(str_._ 3);
    cout << str;
}"
499, C++ Program for Efficient way to multiply with 7,"# include<bits/stdc++.h>
 
using namespace std;
 //c++ implementation 
long multiplyBySeven(long n)
{  
    /* Note the inner bracket here. This is needed 
       because precedence of '-' operator is higher 
       than '<<' */
    return ((n<<3) - n);
}
   
/* Driver program to test above function */
int main()
{
    long n = 4;
     
    cout<<multiplyBySeven(n);
   
    return 0;
}"
500, C++ Program for Write a C program to print all permutations of a given string,"#include <bits/stdc++.h>
using namespace std;
 
// Function to check if x is power of 2
bool isPowerOfTwo(int n)
{
    if (n == 0)
        return false;
 
    return (ceil(log2(n)) == floor(log2(n)));
}
 
// Driver code
int main()
{
    // Function call
    isPowerOfTwo(31) ? cout << ""Yes"" << endl
                     : cout << ""No"" << endl;
    isPowerOfTwo(64) ? cout << ""Yes"" << endl
                     : cout << ""No"" << endl;
 
    return 0;
}"
501, C++ Program for Lucky Numbers,"#include <iostream>
#include <math.h>
using namespace std;
 
class gfg {
 
public:
    unsigned int getFirstSetBitPos(int n)
    {
        return log2(n & -n) + 1;
    }
};
 
// Driver code
int main()
{
    gfg g;
    int n = 18;
    cout << g.getFirstSetBitPos(n);
    return 0;
}"
502, C++ Program for Write a program to add two numbers in base 14,"#include<bits/stdc++.h>
using namespace std;
 
// Function to find the element
// occurring odd number of times
int getOddOccurrence(int arr[]_._ int arr_size)
{
    for (int i = 0; i < arr_size; i++) {
         
        int count = 0;
         
        for (int j = 0; j < arr_size; j++)
        {
            if (arr[i] == arr[j])
                count++;
        }
        if (count % 2 != 0)
            return arr[i];
    }
    return -1;
}
 
// driver code
int main()
    {
        int arr[] = { 2_._ 3_._ 5_._ 4_._ 5_._ 2_._
                      4_._ 3_._ 5_._ 2_._ 4_._ 4_._ 2 };
        int n = sizeof(arr) / sizeof(arr[0]);
 
        // Function calling
        cout << getOddOccurrence(arr_._ n);
 
        return 0;
    }"
503, C++ Program for Babylonian method for square root,"#include <bits/stdc++.h>
using namespace std;
 
/* Takes pointer to result and two numbers as
    arguments. If there is no overflow_._ the function
    places the resultant = sum a+b in “result” and
    returns 0_._ otherwise it returns -1 */
int addOvf(int* result_._ int a_._ int b)
{
    *result = a + b;
    if(a > 0 && b > 0 && *result < 0)
        return -1;
    if(a < 0 && b < 0 && *result > 0)
        return -1;
    return 0;
}
 
// Driver code
int main()
{
    int *res = new int[(sizeof(int))];
    int x = 2147483640;
    int y = 10;
 
    cout<<addOvf(res_._ x_._ y);
 
    cout<<""\n""<<*res;
    return 0;
}"
504, C++ Program for Multiply two integers without using multiplication_._ division and bitwise operators_._ and no loops,"#include<iostream>
 
using namespace std;
class GFG
{
     
/* function to multiply two numbers x and y*/
public : int multiply(int x_._ int y)
{
    /* 0 multiplied with anything gives 0 */
    if(y == 0)
    return 0;
 
    /* Add x one by one */
    if(y > 0 )
    return (x + multiply(x_._ y-1));
 
    /* the case where y is negative */
    if(y < 0 )
    return -multiply(x_._ -y);
}
};
 
// Driver code
int main()
{
    GFG g;
    cout << endl << g.multiply(5_._ -11);
    getchar();
    return 0;
}
 "
505, C++ Program for Print all combinations of points that can compose a given number,"#define MAX_POINT 3
#define ARR_SIZE 100
#include <bits/stdc++.h>
using namespace std;
 
/* Utility function to print array arr[] */
void printArray(int arr[]_._ int arr_size);
 
/* The function prints all combinations of numbers 1_._ 2_._ ...MAX_POINT
that sum up to n.
i is used in recursion keep track of index in arr[] where next
element is to be added. Initial value of i must be passed as 0 */
void printCompositions(int n_._ int i)
{
 
    /* array must be static as we want to keep track
    of values stored in arr[] using current calls of
    printCompositions() in function call stack*/
    static int arr[ARR_SIZE];
     
    if (n == 0)
    {
        printArray(arr_._ i);
    }
    else if(n > 0)
    {
        int k;
        for (k = 1; k <= MAX_POINT; k++)
        {
            arr[i]= k;
            printCompositions(n-k_._ i+1);
        }
    }
}
 
/* UTILITY FUNCTIONS */
/* Utility function to print array arr[] */
void printArray(int arr[]_._ int arr_size)
{
    int i;
    for (i = 0; i < arr_size; i++)
        cout<<arr[i]<<"" "";
    cout<<endl;
}
 
/* Driver code */
int main()
{
    int n = 5;
     
    cout<<""Different compositions formed by 1_._ 2 and 3 of ""<<n<<"" are\n"";
    printCompositions(n_._ 0);
    return 0;
}"
506, C++ Program for Write you own Power without using multiplication(*) and division(/) operators,"#include <bits/stdc++.h>
using namespace std;
 
/* Works only if a >= 0 and b >= 0 */
int pow(int a_._ int b)
{
    if (b == 0)
        return 1;
    int answer = a;
    int increment = a;
    int i_._ j;
    for(i = 1; i < b; i++)
    {
        for(j = 1; j < a; j++)
        {
            answer += increment;
        }
        increment = answer;
    }
    return answer;
}
 
// Driver Code
int main()
{
    cout << pow(5_._ 3);
    return 0;
}"
507, C++ Program for Fibonacci numbers,"#include <bits/stdc++.h>
using namespace std;
 
int fib(int n)
{
    if (n <= 1)
        return n;
    return fib(n - 1) + fib(n - 2);
}
 
int main()
{
    int n = 9;
    cout << fib(n);
    getchar();
    return 0;
}"
508, C++ Program for Average of a stream of numbers,"#include <bits/stdc++.h>
using namespace std;
 
// Returns the new average after including x
float getAvg(int x)
{
    static int sum_._ n;
 
    sum += x;
    return (((float)sum) / ++n);
}
 
// Prints average of a stream of numbers
void streamAvg(float arr[]_._ int n)
{
    float avg = 0;
    for (int i = 0; i < n; i++)
    {
        avg = getAvg(arr[i]);
        cout<<""Average of ""<<i+1<<"" numbers is ""<<fixed<<setprecision(1)<<avg<<endl;
    }
    return;
}
 
// Driver code
int main()
{
    float arr[] = { 10_._ 20_._ 30_._ 40_._ 50_._ 60 };
    int n = sizeof(arr) / sizeof(arr[0]);
    streamAvg(arr_._ n);
 
    return 0;
}"
509, C++ Program for Check whether a given point lies inside a triangle or not,"#include <bits/stdc++.h>
using namespace std;
  
/* A utility function to calculate area of triangle formed by (x1_._ y1)_._
   (x2_._ y2) and (x3_._ y3) */
float area(int x1_._ int y1_._ int x2_._ int y2_._ int x3_._ int y3)
{
   return abs((x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2))/2.0);
}
  
/* A function to check whether point P(x_._ y) lies inside the triangle formed
   by A(x1_._ y1)_._ B(x2_._ y2) and C(x3_._ y3) */
bool isInside(int x1_._ int y1_._ int x2_._ int y2_._ int x3_._ int y3_._ int x_._ int y)
{  
   /* Calculate area of triangle ABC */
   float A = area (x1_._ y1_._ x2_._ y2_._ x3_._ y3);
  
   /* Calculate area of triangle PBC */ 
   float A1 = area (x_._ y_._ x2_._ y2_._ x3_._ y3);
  
   /* Calculate area of triangle PAC */ 
   float A2 = area (x1_._ y1_._ x_._ y_._ x3_._ y3);
  
   /* Calculate area of triangle PAB */  
   float A3 = area (x1_._ y1_._ x2_._ y2_._ x_._ y);
    
   /* Check if sum of A1_._ A2 and A3 is same as A */
   return (A == A1 + A2 + A3);
}
  
/* Driver program to test above function */
int main()
{
   /* Let us check whether the point P(10_._ 15) lies inside the triangle
      formed by A(0_._ 0)_._ B(20_._ 0) and C(10_._ 30) */
   if (isInside(0_._ 0_._ 20_._ 0_._ 10_._ 30_._ 10_._ 15))
     cout <<""Inside"";
   else
     cout <<""Not Inside"";
  
   return 0;
}"
510, C++ Program for Count numbers that don’t contain 3,"#include <bits/stdc++.h>
using namespace std;
 
/* returns count of numbers which are
in range from 1 to n and don't contain 3
as a digit */
int count(int n)
{
    // Base cases (Assuming n is not negative)
    if (n < 3)
        return n;
    if (n >= 3 && n < 10)
        return n-1;
 
    // Calculate 10^(d-1) (10 raise to the power d-1) where d is
    // number of digits in n. po will be 100 for n = 578
    int po = 1;
    while (n/po > 9)
        po = po*10;
 
    // find the most significant digit (msd is 5 for 578)
    int msd = n/po;
 
    if (msd != 3)
        // For 578_._ total will be 4*count(10^2 - 1) + 4 + count(78)
        return count(msd)*count(po - 1) + count(msd) + count(n%po);
    else
        // For 35_._ total will be equal to count(29)
        return count(msd*po - 1);
}
 
// Driver code
int main()
{
    cout << count(578) << "" "";
    return 0;
}"
511, C++ Program for Magic Square,"#include <bits/stdc++.h>
using namespace std;
 
// A function to generate odd sized magic squares
void generateSquare(int n)
{
    int magicSquare[n][n];
 
    // set all slots as 0
    memset(magicSquare_._ 0_._ sizeof(magicSquare));
 
    // Initialize position for 1
    int i = n / 2;
    int j = n - 1;
 
    // One by one put all values in magic square
    for (int num = 1; num <= n * n;) {
        if (i == -1 && j == n) // 3rd condition
        {
            j = n - 2;
            i = 0;
        }
        else {
            // 1st condition helper if next number
            // goes to out of square's right side
            if (j == n)
                j = 0;
 
            // 1st condition helper if next number
            // is goes to out of square's upper side
            if (i < 0)
                i = n - 1;
        }
        if (magicSquare[i][j]) // 2nd condition
        {
            j -= 2;
            i++;
            continue;
        }
        else
            magicSquare[i][j] = num++; // set number
 
        j++;
        i--; // 1st condition
    }
 
    // Print magic square
    cout << ""The Magic Square for n="" << n
         << "":\nSum of ""
            ""each row or column ""
         << n * (n * n + 1) / 2 << "":\n\n"";
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
 
            // setw(7) is used so that the matrix gets
            // printed in a proper square fashion.
            cout << setw(4) << magicSquare[i][j] << "" "";
        cout << endl;
    }
}
 
// Driver code
int main()
{
 
    // Works only when n is odd
    int n = 7;
    generateSquare(n);
    return 0;
}"
512, C++ Program for Sieve of Eratosthenes,"#include <bits/stdc++.h>
using namespace std;
 
void SieveOfEratosthenes(int n)
{
    // Create a boolean array ""prime[0..n]"" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime_._ else true.
    bool prime[n + 1];
    memset(prime_._ true_._ sizeof(prime));
 
    for (int p = 2; p * p <= n; p++) {
        // If prime[p] is not changed_._ then it is a prime
        if (prime[p] == true) {
            // Update all multiples of p greater than or
            // equal to the square of it numbers which are
            // multiple of p and are less than p^2 are
            // already been marked.
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
 
    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (prime[p])
            cout << p << "" "";
}
 
// Driver Code
int main()
{
    int n = 30;
    cout << ""Following are the prime numbers smaller ""
         << "" than or equal to "" << n << endl;
    SieveOfEratosthenes(n);
    return 0;
}"
513, C++ Program for Find day of the week for a given date,"#include <bits/stdc++.h>
using namespace std;
 
int dayofweek(int d_._ int m_._ int y)
{
    static int t[] = { 0_._ 3_._ 2_._ 5_._ 0_._ 3_._
                       5_._ 1_._ 4_._ 6_._ 2_._ 4 };
    y -= m < 3;
    return ( y + y / 4 - y / 100 +
             y / 400 + t[m - 1] + d) % 7;
}
 
// Driver Code
int main()
{
    int day = dayofweek(30_._ 8_._ 2010);
    cout << day;
 
    return 0;
}"
514, C++ Program for DFA based division,"#include <bits/stdc++.h>
using namespace std;
 
// Function to build DFA for divisor k
void preprocess(int k_._ int Table[][2])
{
    int trans0_._ trans1;
 
    // The following loop calculates the
    // two transitions for each state_._
    // starting from state 0
    for (int state = 0; state < k; ++state)
    {
        // Calculate next state for bit 0
        trans0 = state << 1;
        Table[state][0] = (trans0 < k) ?
                                trans0 : trans0 - k;
 
        // Calculate next state for bit 1
        trans1 = (state << 1) + 1;
        Table[state][1] = (trans1 < k) ?
                                trans1 : trans1 - k;
    }
}
 
// A recursive utility function that
// takes a 'num' and DFA (transition
// table) as input and process 'num'
// bit by bit over DFA
void isDivisibleUtil(int num_._ int* state_._
                     int Table[][2])
{
    // process ""num"" bit by bit
    // from MSB to LSB
    if (num != 0)
    {
        isDivisibleUtil(num >> 1_._ state_._ Table);
        *state = Table[*state][num & 1];
    }
}
 
// The main function that divides 'num'
// by k and returns the remainder
int isDivisible (int num_._ int k)
{
    // Allocate memory for transition table.
    // The table will have k*2 entries
    int (*Table)[2] = (int (*)[2])malloc(k*sizeof(*Table));
 
    // Fill the transition table
    preprocess(k_._ Table);
 
    // Process ‘num’ over DFA and
    // get the remainder
    int state = 0;
    isDivisibleUtil(num_._ &state_._ Table);
 
    // Note that the final value
    // of state is the remainder
    return state;
}
 
// Driver Code
int main()
{
    int num = 47; // Number to be divided
    int k = 5; // Divisor
 
    int remainder = isDivisible (num_._ k);
 
    if (remainder == 0)
        cout << ""Divisible\n"";
    else
        cout << ""Not Divisible: Remainder is ""
             << remainder;
 
    return 0;
}"
515, C++ Program for Generate integer from 1 to 7 with equal probability,"#include <stdio.h>
 
int main()
{
    int first_._ second;
    for ( first=1; first<=5; ++first )
        for ( second=1; second<=5; ++second )
            printf (""%d \n""_._ 5*first + second - 5);
    return 0;
}"
516, C++ Program for Given a number_._ find the next smallest palindrome,"#include <bits/stdc++.h>
using namespace std;
// Function to check whether number is palindrome or not
int isPalindrome(int num)
{
    // Declaring variables
    int n_._ k_._ rev = 0;
    // storing num in n so that we can compare it later
    n = num;
    // while num is not 0 we find its reverse and store in
    // rev
    while (num != 0) {
        k = num % 10;
        rev = (rev * 10) + k;
        num = num / 10;
    }
    // check if num and its reverse are same
    if (n == rev) {
        return 1;
    }
    else {
        return 0;
    }
}
int main()
{
    // Take any number to find its next palindrome number
    int num = 9687;
    // If number is not Palindrome we go to the next number
    // using while loop
    while (!isPalindrome(num)) {
        num = num + 1;
    }
    // now we get the next Palindrome so let's print it
    cout << ""Next Palindrome :"";
    cout << num;
    return 0;
}"
517, C++ Program for Check divisibility by 7,"#include <bits/stdc++.h>
using namespace std;
 
int isDivisibleBy7( int num )
{
    // If number is negative_._ make it positive
    if( num < 0 )
        return isDivisibleBy7( -num );
 
    // Base cases
    if( num == 0 || num == 7 )
        return 1;
    if( num < 10 )
        return 0;
 
    // Recur for ( num / 10 - 2 * num % 10 )
    return isDivisibleBy7( num / 10 - 2 *
            ( num - num / 10 * 10 ) );
}
 
// Driver code
int main()
{
    int num = 616;
    if( isDivisibleBy7(num ) )
        cout << ""Divisible"" ;
    else
        cout << ""Not Divisible"" ;
    return 0;
}"
518, C++ Program for Find the largest multiple of 3,"#include <bits/stdc++.h>
using namespace std;
 
// This function puts all elements of 3 queues in the auxiliary array
void populateAux(int aux[]_._ queue<int> queue0_._ queue<int> queue1_._
                 queue<int> queue2_._ int* top)
{
    // Put all items of first queue in aux[]
    while (!queue0.empty()) {
        aux[(*top)++] = queue0.front();
        queue0.pop();
    }
 
    // Put all items of second queue in aux[]
    while (!queue1.empty()) {
        aux[(*top)++] = queue1.front();
        queue1.pop();
    }
 
    // Put all items of third queue in aux[]
    while (!queue2.empty()) {
        aux[(*top)++] = queue2.front();
        queue2.pop();
    }
}
 
// The main function that finds the largest possible multiple of
// 3 that can be formed by arr[] elements
int findMaxMultupleOf3(int arr[]_._ int size)
{
    // Step 1: sort the array in non-decreasing order
    sort(arr_._ arr + size);
 
    // Create 3 queues to store numbers with remainder 0_._ 1
    // and 2 respectively
    queue<int> queue0_._ queue1_._ queue2;
 
    // Step 2 and 3 get the sum of numbers and place them in
    // corresponding queues
    int i_._ sum;
    for (i = 0_._ sum = 0; i < size; ++i) {
        sum += arr[i];
        if ((arr[i] % 3) == 0)
            queue0.push(arr[i]);
        else if ((arr[i] % 3) == 1)
            queue1.push(arr[i]);
        else
            queue2.push(arr[i]);
    }
 
    // Step 4.2: The sum produces remainder 1
    if ((sum % 3) == 1) {
        // either remove one item from queue1
        if (!queue1.empty())
            queue1.pop();
 
        // or remove two items from queue2
        else {
            if (!queue2.empty())
                queue2.pop();
            else
                return 0;
 
            if (!queue2.empty())
                queue2.pop();
            else
                return 0;
        }
    }
 
    // Step 4.3: The sum produces remainder 2
    else if ((sum % 3) == 2) {
        // either remove one item from queue2
        if (!queue2.empty())
            queue2.pop();
 
        // or remove two items from queue1
        else {
            if (!queue1.empty())
                queue1.pop();
            else
                return 0;
 
            if (!queue1.empty())
                queue1.pop();
            else
                return 0;
        }
    }
 
    int aux[size]_._ top = 0;
 
    // Empty all the queues into an auxiliary array.
    populateAux(aux_._ queue0_._ queue1_._ queue2_._ &top);
 
    // sort the array in non-increasing order
    sort(aux_._ aux + top_._ greater<int>());
 
    // print the result
    for (int i = 0; i < top; ++i)
        cout << aux[i] << "" "";
 
    return top;
}
int main()
{
 
    int arr[] = { 8_._ 1_._ 7_._ 6_._ 0 };
    int size = sizeof(arr) / sizeof(arr[0]);
 
    if (findMaxMultupleOf3(arr_._ size) == 0)
        cout << ""Not Possible"";
 
    return 0;
}"
519, C++ Program for Lexicographic rank of a string,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function to find
// factorial of n
int fact(int n) {
    return (n <= 1) ? 1 : n * fact(n - 1);
}
 
// A utility function to count
// smaller characters on right of arr[low]
int findSmallerInRight(string str_._ int low_._ int high)
{
    int countRight = 0_._ i;
 
    for (i = low + 1; i <= high; ++i)
        if (str[i] < str[low])
            ++countRight;
 
    return countRight;
}
 
// A function to find rank of a string
// in all permutations of characters
int findRank(string str)
{
    int len = str.size();
    int mul = fact(len);
    int rank = 1;
    int countRight;
 
    int i;
    for (i = 0; i < len; ++i) {
        mul /= len - i;
 
        // Count number of chars smaller than str[i]
        // from str[i+1] to str[len-1]
        countRight = findSmallerInRight(str_._ i_._ len - 1);
 
        rank += countRight * mul;
    }
 
    return rank;
}
 
// Driver code
int main()
{
    string str = ""string"";
 
    // Function call
    cout << findRank(str);
    return 0;
}"
520, C++ Program for Print all permutations in sorted (lexicographic) order,"#include <bits/stdc++.h>
using namespace std;
 
/* Following function is needed for library function qsort(). Refer
http://www.cplusplus.com/reference/clibrary/cstdlib/qsort/ */
int compare (const void *a_._ const void * b)
{ return ( *(char *)a - *(char *)b ); }
 
// A utility function two swap two characters a and b
void swap (char* a_._ char* b)
{
    char t = *a;
    *a = *b;
    *b = t;
}
 
// This function finds the index of the smallest character
// which is greater than 'first' and is present in str[l..h]
int findCeil (char str[]_._ char first_._ int l_._ int h)
{
    // initialize index of ceiling element
    int ceilIndex = l;
 
    // Now iterate through rest of the elements and find
    // the smallest character greater than 'first'
    for (int i = l+1; i <= h; i++)
    if (str[i] > first && str[i] < str[ceilIndex])
            ceilIndex = i;
 
    return ceilIndex;
}
 
// Print all permutations of str in sorted order
void sortedPermutations ( char str[] )
{
    // Get size of string
    int size = strlen(str);
 
    // Sort the string in increasing order
    qsort( str_._ size_._ sizeof( str[0] )_._ compare );
 
    // Print permutations one by one
    bool isFinished = false;
    while ( ! isFinished )
    {
        // print this permutation
        cout << str << endl;
 
        // Find the rightmost character which is
        // smaller than its next character.
        // Let us call it 'first char'
        int i;
        for ( i = size - 2; i >= 0; --i )
        if (str[i] < str[i+1])
            break;
 
        // If there is no such character_._ all are
        // sorted in decreasing order_._ means we
        // just printed the last permutation and we are done.
        if ( i == -1 )
            isFinished = true;
        else
        {
            // Find the ceil of 'first char' in
            // right of first character.
            // Ceil of a character is the smallest
            // character greater than it
            int ceilIndex = findCeil( str_._ str[i]_._ i + 1_._ size - 1 );
 
            // Swap first and second characters
            swap( &str[i]_._ &str[ceilIndex] );
 
            // Sort the string on right of 'first char'
            qsort( str + i + 1_._ size - i - 1_._ sizeof(str[0])_._ compare );
        }
    }
}
 
// Driver program to test above function
int main()
{
    char str[] = ""ABCD"";
    sortedPermutations( str );
    return 0;
}"
521, C++ Program for Shuffle a given array,"#include<bits/stdc++.h>
#include <stdlib.h>
#include <time.h>
using namespace std;
 
// A utility function to swap to integers
void swap (int *a_._ int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 
// A utility function to print an array
void printArray (int arr[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << "" "";
    cout << ""\n"";
}
 
// A function to generate a random
// permutation of arr[]
void randomize (int arr[]_._ int n)
{
    // Use a different seed value so that
    // we don't get same result each time
    // we run this program
    srand (time(NULL));
 
    // Start from the last element and swap
    // one by one. We don't need to run for
    // the first element that's why i > 0
    for (int i = n - 1; i > 0; i--)
    {
        // Pick a random index from 0 to i
        int j = rand() % (i + 1);
 
        // Swap arr[i] with the element
        // at random index
        swap(&arr[i]_._ &arr[j]);
    }
}
 
// Driver Code
int main()
{
    int arr[] = {1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 7_._ 8};
    int n = sizeof(arr) / sizeof(arr[0]);
    randomize (arr_._ n);
    printArray(arr_._ n);
 
    return 0;
}"
522, C++ Program for Space and time efficient Binomial Coefficient," 
#include <bits/stdc++.h>
using namespace std;
 
// Returns value of Binomial Coefficient C(n_._ k)
int binomialCoeff(int n_._ int k)
{
    int res = 1;
 
    // Since C(n_._ k) = C(n_._ n-k)
    if (k > n - k)
        k = n - k;
 
    // Calculate value of
    // [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1]
    for (int i = 0; i < k; ++i) {
        res *= (n - i);
        res /= (i + 1);
    }
 
    return res;
}
 
// Driver Code
int main()
{
    int n = 8_._ k = 2;
    cout << ""Value of C("" << n << ""_._ "" << k << "") is ""
         << binomialCoeff(n_._ k);
    return 0;
}"
523, C++ Program for Reservoir Sampling,"#include <bits/stdc++.h>
#include <time.h>
using namespace std;
 
// A utility function to print an array
void printArray(int stream[]_._ int n)
{
    for (int i = 0; i < n; i++)
        cout << stream[i] << "" "";
    cout << endl;
}
 
// A function to randomly select
// k items from stream[0..n-1].
void selectKItems(int stream[]_._ int n_._ int k)
{
    int i; // index for elements in stream[]
 
    // reservoir[] is the output array. Initialize
    // it with first k elements from stream[]
    int reservoir[k];
    for (i = 0; i < k; i++)
        reservoir[i] = stream[i];
 
    // Use a different seed value so that we don't get
    // same result each time we run this program
    srand(time(NULL));
 
    // Iterate from the (k+1)th element to nth element
    for (; i < n; i++)
    {
        // Pick a random index from 0 to i.
        int j = rand() % (i + 1);
 
        // If the randomly picked index is smaller than k_._
        // then replace the element present at the index
        // with new element from stream
        if (j < k)
        reservoir[j] = stream[i];
    }
 
    cout << ""Following are k randomly selected items \n"";
    printArray(reservoir_._ k);
}
 
// Driver Code
int main()
{
    int stream[] = {1_._ 2_._ 3_._ 4_._ 5_._ 6_._
                    7_._ 8_._ 9_._ 10_._ 11_._ 12};
    int n = sizeof(stream)/sizeof(stream[0]);
    int k = 5;
    selectKItems(stream_._ n_._ k);
    return 0;
}"
524, C++ Program for Pascal’s Triangle,"#include <iostream>
using namespace std;
 
// See https://www.geeksforgeeks.org/space-and-time-efficient-binomial-coefficient/
// for details of this function
int binomialCoeff(int n_._ int k);
 
// Function to print first
// n lines of Pascal's
// Triangle
void printPascal(int n)
{
    // Iterate through every line and
    // print entries in it
    for (int line = 0; line < n; line++)
    {
        // Every line has number of
        // integers equal to line
        // number
        for (int i = 0; i <= line; i++)
            cout <<"" ""<< binomialCoeff(line_._ i);
        cout <<""\n"";
    }
}
 
// See https://www.geeksforgeeks.org/space-and-time-efficient-binomial-coefficient/
// for details of this function
int binomialCoeff(int n_._ int k)
{
    int res = 1;
    if (k > n - k)
    k = n - k;
    for (int i = 0; i < k; ++i)
    {
        res *= (n - i);
        res /= (i + 1);
    }
     
    return res;
}
 
// Driver program
int main()
{
    int n = 7;
    printPascal(n);
    return 0;
}"
525, C++ Program for Select a random number from stream_._ with O(1) space,"#include <bits/stdc++.h>
#include <time.h>
using namespace std;
 
// A function to randomly select a item
// from stream[0]_._ stream[1]_._ .. stream[i-1]
int selectRandom(int x)
{
    static int res; // The resultant random number
    static int count = 0; // Count of numbers visited
                          // so far in stream
 
    count++; // increment count of numbers seen so far
 
    // If this is the first element from stream_._
    // return it
    if (count == 1)
        res = x;
    else
    {
        // Generate a random number from 0 to count - 1
        int i = rand() % count;
 
        // Replace the prev random number with
        // new number with 1/count probability
        if (i == count - 1)
            res = x;
    }
    return res;
}
 
// Driver Code
int main()
{
    int stream[] = {1_._ 2_._ 3_._ 4};
    int n = sizeof(stream) / sizeof(stream[0]);
 
    // Use a different seed value for every run.
    srand(time(NULL));
    for (int i = 0; i < n; ++i)
        cout << ""Random number from first "" << i + 1
             << "" numbers is "" << selectRandom(stream[i]) << endl;
    return 0;
}"
526, C++ Program for Efficient program to calculate e^x,"#include <bits/stdc++.h>
using namespace std;
 
// Returns approximate value of e^x
// using sum of first n terms of Taylor Series
float exponential(int n_._ float x)
{
    float sum = 1.0f; // initialize sum of series
 
    for (int i = n - 1; i > 0; --i )
        sum = 1 + x * sum / i;
 
    return sum;
}
 
// Driver code
int main()
{
    int n = 10;
    float x = 1.0f;
    cout << ""e^x = "" << fixed << setprecision(5) << exponential(n_._ x);
    return 0;
}"
527, C++ Program for Measure one litre using two vessels and infinite water supply,"#include <iostream>
using namespace std;
 
// A utility function to get GCD of two numbers
int gcd(int a_._ int b) { return b? gcd(b_._ a % b) : a; }
 
// Class to represent a Vessel
class Vessel
{
    // A vessel has capacity_._ and current amount of water in it
    int capacity_._ current;
public:
    // Constructor: initializes capacity as given_._ and current as 0
    Vessel(int capacity) { this->capacity = capacity; current = 0; }
 
    // The main function to fill one litre in this vessel. Capacity of V2
    // must be greater than this vessel and two capacities must be co-prime
    void makeOneLitre(Vessel &V2);
 
    // Fills vessel with given amount and returns the amount of water
    // transferred to it. If the vessel becomes full_._ then the vessel
    // is made empty.
    int transfer(int amount);
};
 
// The main function to fill one litre in this vessel. Capacity
// of V2 must be greater than this vessel and two capacities
// must be coprime
void Vessel:: makeOneLitre(Vessel &V2)
{
    // solution exists iff a and b are co-prime
    if (gcd(capacity_._ V2.capacity) != 1)
        return;
 
    while (current != 1)
    {
        // fill A (smaller vessel)
        if (current == 0)
            current = capacity;
 
        cout << ""Vessel 1: "" << current << "" Vessel 2: ""
            << V2.current << endl;
 
        // Transfer water from V1 to V2 and reduce current of V1 by
        // the amount equal to transferred water
        current = current - V2.transfer(current);
    }
 
    // Finally_._ there will be 1 litre in vessel 1
    cout << ""Vessel 1: "" << current << "" Vessel 2: ""
        << V2.current << endl;
}
 
// Fills vessel with given amount and returns the amount of water
// transferred to it. If the vessel becomes full_._ then the vessel
// is made empty
int Vessel::transfer(int amount)
{
    // If the vessel can accommodate the given amount
    if (current + amount < capacity)
    {
        current += amount;
        return amount;
    }
 
    // If the vessel cannot accommodate the given amount_._ then
    // store the amount of water transferred
    int transferred = capacity - current;
 
    // Since the vessel becomes full_._ make the vessel
    // empty so that it can be filled again
    current = 0;
 
    return transferred;
}
 
// Driver program to test above function
int main()
{
    int a = 3_._ b = 7; // a must be smaller than b
 
    // Create two vessels of capacities a and b
    Vessel V1(a)_._ V2(b);
 
    // Get 1 litre in first vessel
    V1.makeOneLitre(V2);
 
    return 0;
}"
528, C++ Program for Efficient program to print all prime factors of a given number,"#include <bits/stdc++.h>
using namespace std;
 
// A function to print all prime
// factors of a given number n
void primeFactors(int n)
{
    // Print the number of 2s that divide n
    while (n % 2 == 0)
    {
        cout << 2 << "" "";
        n = n/2;
    }
 
    // n must be odd at this point. So we can skip
    // one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i + 2)
    {
        // While i divides n_._ print i and divide n
        while (n % i == 0)
        {
            cout << i << "" "";
            n = n/i;
        }
    }
 
    // This condition is to handle the case when n
    // is a prime number greater than 2
    if (n > 2)
        cout << n << "" "";
}
 
/* Driver code */
int main()
{
    int n = 315;
    primeFactors(n);
    return 0;
}"
529, C++ Program for Print all possible combinations of r elements in a given array of size n,"#include<bits/stdc++.h>
using namespace std;
 
void combinationUtil(int arr[]_._ int data[]_._
                    int start_._ int end_._
                    int index_._ int r);
 
// The main function that prints
// all combinations of size r
// in arr[] of size n. This function
// mainly uses combinationUtil()
void printCombination(int arr[]_._ int n_._ int r)
{
    // A temporary array to store
    // all combination one by one
    int data[r];
 
    // Print all combination using
    // temporary array 'data[]'
    combinationUtil(arr_._ data_._ 0_._ n-1_._ 0_._ r);
}
 
/* arr[] ---> Input Array
data[] ---> Temporary array to
store current combination
start & end ---> Starting and
Ending indexes in arr[]
index ---> Current index in data[]
r ---> Size of a combination to be printed */
void combinationUtil(int arr[]_._ int data[]_._
                    int start_._ int end_._
                    int index_._ int r)
{
    // Current combination is ready
    // to be printed_._ print it
    if (index == r)
    {
        for (int j = 0; j < r; j++)
            cout << data[j] << "" "";
        cout << endl;
        return;
    }
 
    // replace index with all possible
    // elements. The condition ""end-i+1 >= r-index""
    // makes sure that including one element
    // at index will make a combination with
    // remaining elements at remaining positions
    for (int i = start; i <= end &&
        end - i + 1 >= r - index; i++)
    {
        data[index] = arr[i];
        combinationUtil(arr_._ data_._ i+1_._
                        end_._ index+1_._ r);
    }
}
 
// Driver code
int main()
{
    int arr[] = {1_._ 2_._ 3_._ 4_._ 5};
    int r = 3;
    int n = sizeof(arr)/sizeof(arr[0]);
    printCombination(arr_._ n_._ r);
}"
530, C++ Program for Random number generator in arbitrary probability distribution fashion,"#include <bits/stdc++.h>
using namespace std;
 
// Utility function to find ceiling of r in arr[l..h]
int findCeil(int arr[]_._ int r_._ int l_._ int h)
{
    int mid;
    while (l < h)
    {
        mid = l + ((h - l) >> 1); // Same as mid = (l+h)/2
        (r > arr[mid]) ? (l = mid + 1) : (h = mid);
    }
    return (arr[l] >= r) ? l : -1;
}
 
// The main function that returns a random number
// from arr[] according to distribution array
// defined by freq[]. n is size of arrays.
int myRand(int arr[]_._ int freq[]_._ int n)
{
    // Create and fill prefix array
    int prefix[n]_._ i;
    prefix[0] = freq[0];
    for (i = 1; i < n; ++i)
        prefix[i] = prefix[i - 1] + freq[i];
 
    // prefix[n-1] is sum of all frequencies.
    // Generate a random number with
    // value from 1 to this sum
    int r = (rand() % prefix[n - 1]) + 1;
 
    // Find index of ceiling of r in prefix array
    int indexc = findCeil(prefix_._ r_._ 0_._ n - 1);
    return arr[indexc];
}
 
// Driver code
int main()
{
    int arr[] = {1_._ 2_._ 3_._ 4};
    int freq[] = {10_._ 5_._ 20_._ 100};
    int i_._ n = sizeof(arr) / sizeof(arr[0]);
 
    // Use a different seed value for every run.
    srand(time(NULL));
 
    // Let us generate 10 random numbers according to
    // given distribution
    for (i = 0; i < 5; i++)
    cout << myRand(arr_._ freq_._ n) << endl;
 
    return 0;
}"
531, C++ Program for How to check if two given line segments intersect?,"#include <iostream>
using namespace std;
  
struct Point
{
    int x;
    int y;
};
  
// Given three collinear points p_._ q_._ r_._ the function checks if
// point q lies on line segment 'pr'
bool onSegment(Point p_._ Point q_._ Point r)
{
    if (q.x <= max(p.x_._ r.x) && q.x >= min(p.x_._ r.x) &&
        q.y <= max(p.y_._ r.y) && q.y >= min(p.y_._ r.y))
       return true;
  
    return false;
}
  
// To find orientation of ordered triplet (p_._ q_._ r).
// The function returns following values
// 0 --> p_._ q and r are collinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Point p_._ Point q_._ Point r)
{
    // See https://www.geeksforgeeks.org/orientation-3-ordered-points/
    // for details of below formula.
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
  
    if (val == 0) return 0;  // collinear
  
    return (val > 0)? 1: 2; // clock or counterclock wise
}
  
// The main function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
bool doIntersect(Point p1_._ Point q1_._ Point p2_._ Point q2)
{
    // Find the four orientations needed for general and
    // special cases
    int o1 = orientation(p1_._ q1_._ p2);
    int o2 = orientation(p1_._ q1_._ q2);
    int o3 = orientation(p2_._ q2_._ p1);
    int o4 = orientation(p2_._ q2_._ q1);
  
    // General case
    if (o1 != o2 && o3 != o4)
        return true;
  
    // Special Cases
    // p1_._ q1 and p2 are collinear and p2 lies on segment p1q1
    if (o1 == 0 && onSegment(p1_._ p2_._ q1)) return true;
  
    // p1_._ q1 and q2 are collinear and q2 lies on segment p1q1
    if (o2 == 0 && onSegment(p1_._ q2_._ q1)) return true;
  
    // p2_._ q2 and p1 are collinear and p1 lies on segment p2q2
    if (o3 == 0 && onSegment(p2_._ p1_._ q2)) return true;
  
     // p2_._ q2 and q1 are collinear and q1 lies on segment p2q2
    if (o4 == 0 && onSegment(p2_._ q1_._ q2)) return true;
  
    return false; // Doesn't fall in any of the above cases
}
  
// Driver program to test above functions
int main()
{
    struct Point p1 = {1_._ 1}_._ q1 = {10_._ 1};
    struct Point p2 = {1_._ 2}_._ q2 = {10_._ 2};
  
    doIntersect(p1_._ q1_._ p2_._ q2)? cout << ""Yes\n"": cout << ""No\n"";
  
    p1 = {10_._ 0}_._ q1 = {0_._ 10};
    p2 = {0_._ 0}_._ q2 = {10_._ 10};
    doIntersect(p1_._ q1_._ p2_._ q2)? cout << ""Yes\n"": cout << ""No\n"";
  
    p1 = {-5_._ -5}_._ q1 = {0_._ 0};
    p2 = {1_._ 1}_._ q2 = {10_._ 10};
    doIntersect(p1_._ q1_._ p2_._ q2)? cout << ""Yes\n"": cout << ""No\n"";
  
    return 0;
}"
532, C++ Program for How to check if a given point lies inside or outside a polygon?,"#include <bits/stdc++.h>
using namespace std;
 
struct Point {
    int x_._ y;
};
 
struct line {
    Point p1_._ p2;
};
 
bool onLine(line l1_._ Point p)
{
    // Check whether p is on the line or not
    if (p.x <= max(l1.p1.x_._ l1.p2.x)
        && p.x <= min(l1.p1.x_._ l1.p2.x)
        && (p.y <= max(l1.p1.y_._ l1.p2.y)
            && p.y <= min(l1.p1.y_._ l1.p2.y)))
        return true;
 
    return false;
}
 
int direction(Point a_._ Point b_._ Point c)
{
    int val = (b.y - a.y) * (c.x - b.x)
              - (b.x - a.x) * (c.y - b.y);
 
    if (val == 0)
 
        // Colinear
        return 0;
 
    else if (val < 0)
 
        // Anti-clockwise direction
        return 2;
 
    // Clockwise direction
    return 1;
}
 
bool isIntersect(line l1_._ line l2)
{
    // Four direction for two lines and points of other line
    int dir1 = direction(l1.p1_._ l1.p2_._ l2.p1);
    int dir2 = direction(l1.p1_._ l1.p2_._ l2.p2);
    int dir3 = direction(l2.p1_._ l2.p2_._ l1.p1);
    int dir4 = direction(l2.p1_._ l2.p2_._ l1.p2);
 
    // When intersecting
    if (dir1 != dir2 && dir3 != dir4)
        return true;
 
    // When p2 of line2 are on the line1
    if (dir1 == 0 && onLine(l1_._ l2.p1))
        return true;
 
    // When p1 of line2 are on the line1
    if (dir2 == 0 && onLine(l1_._ l2.p2))
        return true;
 
    // When p2 of line1 are on the line2
    if (dir3 == 0 && onLine(l2_._ l1.p1))
        return true;
 
    // When p1 of line1 are on the line2
    if (dir4 == 0 && onLine(l2_._ l1.p2))
        return true;
 
    return false;
}
 
bool checkInside(Point poly[]_._ int n_._ Point p)
{
 
    // When polygon has less than 3 edge_._ it is not polygon
    if (n < 3)
        return false;
 
    // Create a point at infinity_._ y is same as point p
    line exline = { p_._ { 9999_._ p.y } };
    int count = 0;
    int i = 0;
    do {
 
        // Forming a line from two consecutive points of
        // poly
        line side = { poly[i]_._ poly[(i + 1) % n] };
        if (isIntersect(side_._ exline)) {
 
            // If side is intersects exline
            if (direction(side.p1_._ p_._ side.p2) == 0)
                return onLine(side_._ p);
            count++;
        }
        i = (i + 1) % n;
    } while (i != 0);
 
    // When count is odd
    return count & 1;
}
 
// Driver code
int main()
{
    Point polygon[]
        = { { 0_._ 0 }_._ { 10_._ 0 }_._ { 10_._ 10 }_._ { 0_._ 10 } };
    Point p = { 5_._ 3 };
    int n = 4;
 
    // Function call
    if (checkInside(polygon_._ n_._ p))
        cout << ""Point is inside."";
    else
        cout << ""Point is outside."";
   
    return 0;
}"
533, C++ Program for Convex Hull | Set 1 (Jarvis’s Algorithm or Wrapping),"#include <bits/stdc++.h>
using namespace std;
  
struct Point
{
    int x_._ y;
};
  
// To find orientation of ordered triplet (p_._ q_._ r).
// The function returns following values
// 0 --> p_._ q and r are collinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Point p_._ Point q_._ Point r)
{
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
  
    if (val == 0) return 0;  // collinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}
  
// Prints convex hull of a set of n points.
void convexHull(Point points[]_._ int n)
{
    // There must be at least 3 points
    if (n < 3) return;
  
    // Initialize Result
    vector<Point> hull;
  
    // Find the leftmost point
    int l = 0;
    for (int i = 1; i < n; i++)
        if (points[i].x < points[l].x)
            l = i;
  
    // Start from leftmost point_._ keep moving counterclockwise
    // until reach the start point again.  This loop runs O(h)
    // times where h is number of points in result or output.
    int p = l_._ q;
    do
    {
        // Add current point to result
        hull.push_back(points[p]);
  
        // Search for a point 'q' such that orientation(p_._ q_._
        // x) is counterclockwise for all points 'x'. The idea
        // is to keep track of last visited most counterclock-
        // wise point in q. If any point 'i' is more counterclock-
        // wise than q_._ then update q.
        q = (p+1)%n;
        for (int i = 0; i < n; i++)
        {
           // If i is more counterclockwise than current q_._ then
           // update q
           if (orientation(points[p]_._ points[i]_._ points[q]) == 2)
               q = i;
        }
  
        // Now q is the most counterclockwise with respect to p
        // Set p as q for next iteration_._ so that q is added to
        // result 'hull'
        p = q;
  
    } while (p != l);  // While we don't come to first point
  
    // Print Result
    for (int i = 0; i < hull.size(); i++)
        cout << ""("" << hull[i].x << ""_._ ""
              << hull[i].y << "")\n"";
}
  
// Driver program to test above functions
int main()
{
    Point points[] = {{0_._ 3}_._ {2_._ 2}_._ {1_._ 1}_._ {2_._ 1}_._
                      {3_._ 0}_._ {0_._ 0}_._ {3_._ 3}};
    int n = sizeof(points)/sizeof(points[0]);
    convexHull(points_._ n);
    return 0;
}"
534, C++ Program for Convex Hull | Set 2 (Graham Scan),"#include <iostream>
#include <stack>
#include <stdlib.h>
using namespace std;
  
struct Point
{
    int x_._ y;
};
  
// A global point needed for  sorting points with reference
// to  the first point Used in compare function of qsort()
Point p0;
  
// A utility function to find next to top in a stack
Point nextToTop(stack<Point> &S)
{
    Point p = S.top();
    S.pop();
    Point res = S.top();
    S.push(p);
    return res;
}
  
// A utility function to swap two points
void swap(Point &p1_._ Point &p2)
{
    Point temp = p1;
    p1 = p2;
    p2 = temp;
}
  
// A utility function to return square of distance
// between p1 and p2
int distSq(Point p1_._ Point p2)
{
    return (p1.x - p2.x)*(p1.x - p2.x) +
          (p1.y - p2.y)*(p1.y - p2.y);
}
  
// To find orientation of ordered triplet (p_._ q_._ r).
// The function returns following values
// 0 --> p_._ q and r are collinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Point p_._ Point q_._ Point r)
{
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
  
    if (val == 0) return 0;  // collinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}
  
// A function used by library function qsort() to sort an array of
// points with respect to the first point
int compare(const void *vp1_._ const void *vp2)
{
   Point *p1 = (Point *)vp1;
   Point *p2 = (Point *)vp2;
  
   // Find orientation
   int o = orientation(p0_._ *p1_._ *p2);
   if (o == 0)
     return (distSq(p0_._ *p2) >= distSq(p0_._ *p1))? -1 : 1;
  
   return (o == 2)? -1: 1;
}
  
// Prints convex hull of a set of n points.
void convexHull(Point points[]_._ int n)
{
   // Find the bottommost point
   int ymin = points[0].y_._ min = 0;
   for (int i = 1; i < n; i++)
   {
     int y = points[i].y;
  
     // Pick the bottom-most or choose the left
     // most point in case of tie
     if ((y < ymin) || (ymin == y &&
         points[i].x < points[min].x))
        ymin = points[i].y_._ min = i;
   }
  
   // Place the bottom-most point at first position
   swap(points[0]_._ points[min]);
  
   // Sort n-1 points with respect to the first point.
   // A point p1 comes before p2 in sorted output if p2
   // has larger polar angle (in counterclockwise
   // direction) than p1
   p0 = points[0];
   qsort(&points[1]_._ n-1_._ sizeof(Point)_._ compare);
  
   // If two or more points make same angle with p0_._
   // Remove all but the one that is farthest from p0
   // Remember that_._ in above sorting_._ our criteria was
   // to keep the farthest point at the end when more than
   // one points have same angle.
   int m = 1; // Initialize size of modified array
   for (int i=1; i<n; i++)
   {
       // Keep removing i while angle of i and i+1 is same
       // with respect to p0
       while (i < n-1 && orientation(p0_._ points[i]_._
                                    points[i+1]) == 0)
          i++;
  
  
       points[m] = points[i];
       m++;  // Update size of modified array
   }
  
   // If modified array of points has less than 3 points_._
   // convex hull is not possible
   if (m < 3) return;
  
   // Create an empty stack and push first three points
   // to it.
   stack<Point> S;
   S.push(points[0]);
   S.push(points[1]);
   S.push(points[2]);
  
   // Process remaining n-3 points
   for (int i = 3; i < m; i++)
   {
      // Keep removing top while the angle formed by
      // points next-to-top_._ top_._ and points[i] makes
      // a non-left turn
      while (S.size()>1 && orientation(nextToTop(S)_._ S.top()_._ points[i]) != 2)
         S.pop();
      S.push(points[i]);
   }
  
   // Now stack has the output points_._ print contents of stack
   while (!S.empty())
   {
       Point p = S.top();
       cout << ""("" << p.x << ""_._ "" << p.y <<"")"" << endl;
       S.pop();
   }
}
  
// Driver program to test above functions
int main()
{
    Point points[] = {{0_._ 3}_._ {1_._ 1}_._ {2_._ 2}_._ {4_._ 4}_._
                      {0_._ 0}_._ {1_._ 2}_._ {3_._ 1}_._ {3_._ 3}};
    int n = sizeof(points)/sizeof(points[0]);
    convexHull(points_._ n);
    return 0;
}"
535, C++ Program for How to check if a given number is Fibonacci number?,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function that returns true if x is perfect
// square
bool isPerfectSquare(int x)
{
    int s = sqrt(x);
    return (s * s == x);
}
 
// Returns true if n is a Fibonacci Number_._ else false
bool isFibonacci(int n)
{
    // n is Fibonacci if one of 5*n*n + 4 or 5*n*n - 4 or
    // both is a perfect square
    return isPerfectSquare(5 * n * n + 4)
           || isPerfectSquare(5 * n * n - 4);
}
 
// A utility function to test above functions
int main()
{
    for (int i = 1; i <= 10; i++)
        isFibonacci(i)
            ? cout << i << "" is a Fibonacci Number \n""
            : cout << i << "" is a not Fibonacci Number \n"";
    return 0;
}"
536, C++ Program for Russian Peasant Multiplication,"#include <iostream>
using namespace std;
 
// A method to multiply two numbers using Russian Peasant method
unsigned int russianPeasant(unsigned int a_._ unsigned int b)
{
    int res = 0; // initialize result
 
    // While second number doesn't become 1
    while (b > 0)
    {
        // If second number becomes odd_._ add the first number to result
        if (b & 1)
            res = res + a;
 
        // Double the first number and halve the second number
        a = a << 1;
        b = b >> 1;
    }
    return res;
}
 
// Driver program to test above function
int main()
{
    cout << russianPeasant(18_._ 1) << endl;
    cout << russianPeasant(20_._ 12) << endl;
    return 0;
}"
537, C++ Program for Largest Sum Contiguous Subarray,"#include <bits/stdc++.h>
using namespace std;
 
int maxSubArraySum(int a[]_._ int size)
{
    int max_so_far = INT_MIN_._ max_ending_here = 0;
 
    for (int i = 0; i < size; i++) {
        max_ending_here = max_ending_here + a[i];
        if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;
 
        if (max_ending_here < 0)
            max_ending_here = 0;
    }
    return max_so_far;
}
 
// Driver Code
int main()
{
    int a[] = { -2_._ -3_._ 4_._ -1_._ -2_._ 1_._ 5_._ -3 };
    int n = sizeof(a) / sizeof(a[0]);
 
    // Function Call
    int max_sum = maxSubArraySum(a_._ n);
    cout << ""Maximum contiguous sum is "" << max_sum;
    return 0;
}"
538, C++ Program for Ugly Numbers,"#include <iostream>
using namespace std;
 
// This function divides a by greatest
// divisible power of b
int maxDivide(int a_._ int b)
{
    while (a % b == 0)
        a = a / b;
         
    return a;
}
 
// Function to check if a number is ugly or not
int isUgly(int no)
{
    no = maxDivide(no_._ 2);
    no = maxDivide(no_._ 3);
    no = maxDivide(no_._ 5);
 
    return (no == 1) ? 1 : 0;
}
 
// Function to get the nth ugly number
int getNthUglyNo(int n)
{
    int i = 1;
     
    // Ugly number count
    int count = 1;
 
    // Check for all integers until ugly
    // count becomes n
    while (n > count)
    {
        i++;
        if (isUgly(i))
            count++;
    }
    return i;
}
 
// Driver Code
int main()
{
     
    // Function call
    unsigned no = getNthUglyNo(150);
    cout << ""150th ugly no. is "" << no;
    return 0;
}
 "
539, C++ Program for Maximum size square sub-matrix with all 1s,"#include <bits/stdc++.h>
#define bool int
#define R 6
#define C 5
using namespace std;
 
void printMaxSubSquare(bool M[R][C])
{
    int i_._ j;
    int S[R][C];
    int max_of_s_._ max_i_._ max_j;
 
    /* Set first column of S[][]*/
    for (i = 0; i < R; i++)
        S[i][0] = M[i][0];
 
    /* Set first row of S[][]*/
    for (j = 0; j < C; j++)
        S[0][j] = M[0][j];
 
    /* Construct other entries of S[][]*/
    for (i = 1; i < R; i++) {
        for (j = 1; j < C; j++) {
            if (M[i][j] == 1)
                S[i][j]
                    = min({ S[i][j - 1]_._ S[i - 1][j]_._
                            S[i - 1][j - 1] })
                      + 1; // better of using min in case of
                           // arguments more than 2
            else
                S[i][j] = 0;
        }
    }
 
    /* Find the maximum entry_._ and indexes of maximum entry
        in S[][] */
    max_of_s = S[0][0];
    max_i = 0;
    max_j = 0;
    for (i = 0; i < R; i++) {
        for (j = 0; j < C; j++) {
            if (max_of_s < S[i][j]) {
                max_of_s = S[i][j];
                max_i = i;
                max_j = j;
            }
        }
    }
 
    cout << ""Maximum size sub-matrix is: \n"";
    for (i = max_i; i > max_i - max_of_s; i--) {
        for (j = max_j; j > max_j - max_of_s; j--) {
            cout << M[i][j] << "" "";
        }
        cout << ""\n"";
    }
}
 
/* Driver code */
int main()
{
    bool M[R][C] = { { 0_._ 1_._ 1_._ 0_._ 1 }_._ { 1_._ 1_._ 0_._ 1_._ 0 }_._
                     { 0_._ 1_._ 1_._ 1_._ 0 }_._ { 1_._ 1_._ 1_._ 1_._ 0 }_._
                     { 1_._ 1_._ 1_._ 1_._ 1 }_._ { 0_._ 0_._ 0_._ 0_._ 0 } };
 
    printMaxSubSquare(M);
}"
540, C++ Program for Program for Fibonacci numbers,"#include <bits/stdc++.h>
using namespace std;
 
int fib(int n)
{
    if (n <= 1)
        return n;
    return fib(n - 1) + fib(n - 2);
}
 
int main()
{
    int n = 9;
    cout << fib(n);
    getchar();
    return 0;
}"
541, C++ Program for Overlapping Subproblems Property,"#include <iostream>
using namespace std;
 
/* a simple recursive program for Fibonacci numbers */
int fib(int n)
{
    if (n <= 1)
        return n;
  
    return fib(n - 1) + fib(n - 2);
}
 
int main() {
     
    cout << fib(7);
     
    return 0;
}"
542, C++ Program for Longest Increasing Subsequence,"#include <iostream>
using namespace std;
 
/* To make use of recursive calls_._ this
function must return two things:
1) Length of LIS ending with element arr[n-1].
    We use max_ending_here for this purpose
2) Overall maximum as the LIS may end with
    an element before arr[n-1] max_ref is
    used this purpose.
The value of LIS of full array of size n
is stored in *max_ref which is our final result
*/
int _lis(int arr[]_._ int n_._ int* max_ref)
{
    /* Base case */
    if (n == 1)
        return 1;
 
    // 'max_ending_here' is length of LIS
    // ending with arr[n-1]
    int res_._ max_ending_here = 1;
 
    /* Recursively get all LIS ending with arr[0]_._
    arr[1] ... arr[n-2]. If arr[i-1] is smaller
    than arr[n-1]_._ and max ending with arr[n-1]
    needs to be updated_._ then update it */
    for (int i = 1; i < n; i++) {
        res = _lis(arr_._ i_._ max_ref);
        if (arr[i - 1] < arr[n - 1]
            && res + 1 > max_ending_here)
            max_ending_here = res + 1;
    }
 
    // Compare max_ending_here with the overall
    // max. And update the overall max if needed
    if (*max_ref < max_ending_here)
        *max_ref = max_ending_here;
 
    // Return length of LIS ending with arr[n-1]
    return max_ending_here;
}
 
// The wrapper function for _lis()
int lis(int arr[]_._ int n)
{
    // The max variable holds the result
    int max = 1;
 
    // The function _lis() stores its result in max
    _lis(arr_._ n_._ &max);
 
    // returns max
    return max;
}
 
/* Driver program to test above function */
int main()
{
    int arr[] = { 10_._ 22_._ 9_._ 33_._ 21_._ 50_._ 41_._ 60 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout <<""Length of lis is ""<< lis(arr_._ n);
    return 0;
}"
543, C++ Program for Longest Common Subsequence),"#include <bits/stdc++.h> 
using namespace std; 
  
  
  
/* Returns length of LCS for X[0..m-1]_._ Y[0..n-1] */
int lcs( char *X_._ char *Y_._ int m_._ int n ) 
{ 
    if (m == 0 || n == 0) 
        return 0; 
    if (X[m-1] == Y[n-1]) 
        return 1 + lcs(X_._ Y_._ m-1_._ n-1); 
    else
        return max(lcs(X_._ Y_._ m_._ n-1)_._ lcs(X_._ Y_._ m-1_._ n)); 
} 
  
  
  
/* Driver code */
int main() 
{ 
    char X[] = ""AGGTAB""; 
    char Y[] = ""GXTXAYB""; 
      
    int m = strlen(X); 
    int n = strlen(Y); 
      
    cout<<""Length of LCS is ""<< lcs( X_._ Y_._ m_._ n ) ; 
      
    return 0; 
} "
544, C++ Program for Edit Distance,"#include <bits/stdc++.h>
using namespace std;
 
// Utility function to find minimum of three numbers
int min(int x_._ int y_._ int z) { return min(min(x_._ y)_._ z); }
 
int editDist(string str1_._ string str2_._ int m_._ int n)
{
    // If first string is empty_._ the only option is to
    // insert all characters of second string into first
    if (m == 0)
        return n;
 
    // If second string is empty_._ the only option is to
    // remove all characters of first string
    if (n == 0)
        return m;
 
    // If last characters of two strings are same_._ nothing
    // much to do. Ignore last characters and get count for
    // remaining strings.
    if (str1[m - 1] == str2[n - 1])
        return editDist(str1_._ str2_._ m - 1_._ n - 1);
 
    // If last characters are not same_._ consider all three
    // operations on last character of first string_._
    // recursively compute minimum cost for all three
    // operations and take minimum of three values.
    return 1
           + min(editDist(str1_._ str2_._ m_._ n - 1)_._ // Insert
                 editDist(str1_._ str2_._ m - 1_._ n)_._ // Remove
                 editDist(str1_._ str2_._ m - 1_._
                          n - 1) // Replace
             );
}
 
// Driver code
int main()
{
    // your code goes here
    string str1 = ""sunday"";
    string str2 = ""saturday"";
 
    cout << editDist(str1_._ str2_._ str1.length()_._
                     str2.length());
 
    return 0;
}"
545, C++ Program for Min Cost Path,"#include <bits/stdc++.h>
using namespace std;
 
#define R 3
#define C 3
 
int min(int x_._ int y_._ int z);
 
// Returns cost of minimum cost path
// from (0_._0) to (m_._ n) in mat[R][C]
int minCost(int cost[R][C]_._ int m_._ int n)
{
    if (n < 0 || m < 0)
        return INT_MAX;
    else if (m == 0 && n == 0)
        return cost[m][n];
    else
        return cost[m][n]
               + min(minCost(cost_._ m - 1_._ n - 1)_._
                     minCost(cost_._ m - 1_._ n)_._
                     minCost(cost_._ m_._ n - 1));
}
 
// A utility function that returns
// minimum of 3 integers
int min(int x_._ int y_._ int z)
{
    if (x < y)
        return (x < z) ? x : z;
    else
        return (y < z) ? y : z;
}
 
// Driver code
int main()
{
    int cost[R][C]
        = { { 1_._ 2_._ 3 }_._ { 4_._ 8_._ 2 }_._ { 1_._ 5_._ 3 } };
 
    cout << minCost(cost_._ 2_._ 2) << endl;
 
    return 0;
}"
546, C++ Program for Length of the longest substring without repeating characters,"#include <bits/stdc++.h>
using namespace std;
 
// This function returns true if all characters in str[i..j]
// are distinct_._ otherwise returns false
bool areDistinct(string str_._ int i_._ int j)
{
 
    // Note : Default values in visited are false
    vector<bool> visited(26);
 
    for (int k = i; k <= j; k++) {
        if (visited[str[k] - 'a'] == true)
            return false;
        visited[str[k] - 'a'] = true;
    }
    return true;
}
 
// Returns length of the longest substring
// with all distinct characters.
int longestUniqueSubsttr(string str)
{
    int n = str.size();
    int res = 0; // result
    for (int i = 0; i < n; i++)
        for (int j = i; j < n; j++)
            if (areDistinct(str_._ i_._ j))
                res = max(res_._ j - i + 1);
    return res;
}
 
// Driver code
int main()
{
    string str = ""geeksforgeeks"";
    cout << ""The input string is "" << str << endl;
    int len = longestUniqueSubsttr(str);
    cout << ""The length of the longest non-repeating ""
            ""character substring is ""
         << len;
    return 0;
}"
547, C++ Program for Minimum number of jumps to reach end,"#include <bits/stdc++.h>
using namespace std;
 
// Function to return the minimum number
// of jumps to reach arr[h] from arr[l]
int minJumps(int arr[]_._ int n)
{
 
    // Base case: when source and
    // destination are same
    if (n == 1)
        return 0;
 
    // Traverse through all the points
    // reachable from arr[l]
    // Recursively_._ get the minimum number
    // of jumps needed to reach arr[h] from
    // these reachable points
    int res = INT_MAX;
    for (int i = n - 2; i >= 0; i--) {
        if (i + arr[i] >= n - 1) {
            int sub_res = minJumps(arr_._ i + 1);
            if (sub_res != INT_MAX)
                res = min(res_._ sub_res + 1);
        }
    }
 
    return res;
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 3_._ 5_._ 8_._ 9_._ 2_._ 6_._ 7_._ 6_._ 8_._ 9 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""Minimum number of jumps to"";
    cout << "" reach the end is "" << minJumps(arr_._ n);
    return 0;
}"
548, C++ Program for Coin Change),"#include <bits/stdc++.h>
using namespace std;
 
// Returns the count of ways we can
// sum coins[0...n-1] coins to get sum ""sum""
int count(int coins[]_._ int n_._ int sum)
{
 
    // If sum is 0 then there is 1 solution
    // (do not include any coin)
    if (sum == 0)
        return 1;
 
    // If sum is less than 0 then no
    // solution exists
    if (sum < 0)
        return 0;
 
    // If there are no coins and sum
    // is greater than 0_._ then no
    // solution exist
    if (n <= 0)
        return 0;
 
    // count is sum of solutions (i)
    // including coins[n-1] (ii) excluding coins[n-1]
    return count(coins_._ n - 1_._ sum)
           + count(coins_._ n_._ sum - coins[n - 1]);
}
 
// Driver code
int main()
{
    int i_._ j;
    int coins[] = { 1_._ 2_._ 3 };
    int n = sizeof(coins) / sizeof(coins[0]);
    int sum = 4;
 
    cout << "" "" << count(coins_._ n_._ sum);
 
    return 0;
}"
549, C++ Program for Matrix Chain Multiplication,"#include <bits/stdc++.h>
using namespace std;
 
// Matrix Ai has dimension p[i-1] x p[i]
// for i = 1 . . . n
int MatrixChainOrder(int p[]_._ int i_._ int j)
{
    if (i == j)
        return 0;
    int k;
    int mini = INT_MAX;
    int count;
 
    // Place parenthesis at different places
    // between first and last matrix_._
    // recursively calculate count of multiplications
    // for each parenthesis placement
    // and return the minimum count
    for (k = i; k < j; k++)
    {
        count = MatrixChainOrder(p_._ i_._ k)
                + MatrixChainOrder(p_._ k + 1_._ j)
                + p[i - 1] * p[k] * p[j];
 
        mini = min(count_._ mini);
    }
 
    // Return minimum count
    return mini;
}
 
// Driver Code
int main()
{
    int arr[] = { 1_._ 2_._ 3_._ 4_._ 3 };
    int N = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    cout << ""Minimum number of multiplications is ""
         << MatrixChainOrder(arr_._ 1_._ N - 1);
    return 0;
}"
550, C++ Program for Binomial Coefficient,"#include <bits/stdc++.h>
using namespace std;
 
// Returns value of Binomial Coefficient C(n_._ k)
int binomialCoeff(int n_._ int k)
{
    // Base Cases
    if (k > n)
        return 0;
    if (k == 0 || k == n)
        return 1;
 
    // Recur
    return binomialCoeff(n - 1_._ k - 1)
           + binomialCoeff(n - 1_._ k);
}
 
/* Driver code*/
int main()
{
    int n = 5_._ k = 2;
    cout << ""Value of C("" << n << ""_._ "" << k << "") is ""
         << binomialCoeff(n_._ k);
    return 0;
}"
551, C++ Program for 0-1 Knapsack Problem,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function that returns
// maximum of two integers
int max(int a_._ int b) { return (a > b) ? a : b; }
 
// Returns the maximum value that
// can be put in a knapsack of capacity W
int knapSack(int W_._ int wt[]_._ int val[]_._ int n)
{
 
    // Base Case
    if (n == 0 || W == 0)
        return 0;
 
    // If weight of the nth item is more
    // than Knapsack capacity W_._ then
    // this item cannot be included
    // in the optimal solution
    if (wt[n - 1] > W)
        return knapSack(W_._ wt_._ val_._ n - 1);
 
    // Return the maximum of two cases:
    // (1) nth item included
    // (2) not included
    else
        return max(
            val[n - 1]
                + knapSack(W - wt[n - 1]_._ wt_._ val_._ n - 1)_._
            knapSack(W_._ wt_._ val_._ n - 1));
}
 
// Driver code
int main()
{
    int val[] = { 60_._ 100_._ 120 };
    int wt[] = { 10_._ 20_._ 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << knapSack(W_._ wt_._ val_._ n);
    return 0;
}"
552, C++ Program for Egg Dropping Puzzle," 
#include <bits/stdc++.h>
using namespace std;
  
// A utility function to get
// maximum of two integers
int max(int a_._ int b) { return (a > b) ? a : b; }
  
// Function to get minimum
// number of trials needed in worst
// case with n eggs and k floors
int eggDrop(int n_._ int k)
{
    // If there are no floors_._
    // then no trials needed.
    // OR if there is one floor_._
    // one trial needed.
    if (k == 1 || k == 0)
        return k;
  
    // We need k trials for one
    // egg and k floors
    if (n == 1)
        return k;
  
    int min = INT_MAX_._ x_._ res;
  
    // Consider all droppings from
    // 1st floor to kth floor and
    // return the minimum of these
    // values plus 1.
    for (x = 1; x <= k; x++) {
        res = max(eggDrop(n - 1_._ x - 1)_._ eggDrop(n_._ k - x));
        if (res < min)
            min = res;
    }
  
    return min + 1;
}
  
// Driver code
int main()
{
    int n = 2_._ k = 10;
    cout << ""Minimum number of trials ""
            ""in worst case with ""
         << n << "" eggs and "" << k << "" floors is ""
         << eggDrop(n_._ k) << endl;
    return 0;
}"
553, C++ Program for Longest Palindromic Subsequence,"#include<bits/stdc++.h>
using namespace std;
 
// A utility function to get max of two integers
int max (int x_._ int y) { return (x > y)? x : y; }
 
// Returns the length of the longest palindromic subsequence in seq
int lps(char *seq_._ int i_._ int j)
{
// Base Case 1: If there is only 1 character
if (i == j)
    return 1;
 
// Base Case 2: If there are only 2
// characters and both are same
if (seq[i] == seq[j] && i + 1 == j)
    return 2;
 
// If the first and last characters match
if (seq[i] == seq[j])
    return lps (seq_._ i+1_._ j-1) + 2;
 
// If the first and last characters do not match
return max( lps(seq_._ i_._ j-1)_._ lps(seq_._ i+1_._ j) );
}
 
/* Driver program to test above functions */
int main()
{
    char seq[] = ""GEEKSFORGEEKS"";
    int n = strlen(seq);
    cout << ""The length of the LPS is ""
         << lps(seq_._ 0_._ n-1);
    return 0;
}"
554, C++ Program for Cutting a Rod,"#include <bits/stdc++.h>
#include <iostream>
#include <math.h>
using namespace std;
 
// A utility function to get the maximum of two integers
int max(int a_._ int b) { return (a > b) ? a : b; }
 
/* Returns the best obtainable price for a rod of length n
   and price[] as prices of different pieces */
int cutRod(int price[]_._ int index_._ int n)
{
    // base case
    if (index == 0) {
        return n * price[0];
    }
    //At any index we have 2 options either
      //cut the rod of this length or not cut
      //it
    int notCut = cutRod(price_._index - 1_._n);
    int cut = INT_MIN;
    int rod_length = index + 1;
 
    if (rod_length <= n)
        cut = price[index]
               + cutRod(price_._index_._n - rod_length);
   
    return max(notCut_._ cut);
}
 
/* Driver program to test above functions */
int main()
{
    int arr[] = { 1_._ 5_._ 8_._ 9_._ 10_._ 17_._ 17_._ 20 };
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << ""Maximum Obtainable Value is ""
         << cutRod(arr_._ size - 1_._ size);
    getchar();
    return 0;
}"
555, C++ Program for Maximum Sum Increasing Subsequence,"#include <bits/stdc++.h>
using namespace std;
 
/* maxSumIS() returns the maximum
sum of increasing subsequence
in arr[] of size n */
int maxSumIS(int arr[]_._ int n)
{
    int i_._ j_._ max = 0;
    int msis[n];
 
    /* Initialize msis values
    for all indexes */
    for ( i = 0; i < n; i++ )
        msis[i] = arr[i];
 
    /* Compute maximum sum values
    in bottom up manner */
    for ( i = 1; i < n; i++ )
        for ( j = 0; j < i; j++ )
            if (arr[i] > arr[j] &&
                msis[i] < msis[j] + arr[i])
                msis[i] = msis[j] + arr[i];
 
    /* Pick maximum of
    all msis values */
    for ( i = 0; i < n; i++ )
        if ( max < msis[i] )
            max = msis[i];
 
    return max;
}
 
// Driver Code
int main()
{
    int arr[] = {1_._ 101_._ 2_._ 3_._ 100_._ 4_._ 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""Sum of maximum sum increasing ""
            ""subsequence is "" << maxSumIS( arr_._ n ) << endl;
    return 0;
}"
556, C++ Program for Longest Bitonic Subsequence,"#include<stdio.h>
#include<stdlib.h>
  
/* lbs() returns the length of the Longest Bitonic Subsequence in
    arr[] of size n. The function mainly creates two temporary arrays
    lis[] and lds[] and returns the maximum lis[i] + lds[i] - 1.
  
    lis[i] ==> Longest Increasing subsequence ending with arr[i]
    lds[i] ==> Longest decreasing subsequence starting with arr[i]
*/
int lbs( int arr[]_._ int n )
{
   int i_._ j;
  
   /* Allocate memory for LIS[] and initialize LIS values as 1 for
      all indexes */
   int *lis = new int[n];
   for (i = 0; i < n; i++)
      lis[i] = 1;
  
   /* Compute LIS values from left to right */
   for (i = 1; i < n; i++)
      for (j = 0; j < i; j++)
         if (arr[i] > arr[j] && lis[i] < lis[j] + 1)
            lis[i] = lis[j] + 1;
  
   /* Allocate memory for lds and initialize LDS values for
      all indexes */
   int *lds = new int [n];
   for (i = 0; i < n; i++)
      lds[i] = 1;
  
   /* Compute LDS values from right to left */
   for (i = n-2; i >= 0; i--)
      for (j = n-1; j > i; j--)
         if (arr[i] > arr[j] && lds[i] < lds[j] + 1)
            lds[i] = lds[j] + 1;
  
  
   /* Return the maximum value of lis[i] + lds[i] - 1*/
   int max = lis[0] + lds[0] - 1;
   for (i = 1; i < n; i++)
     if (lis[i] + lds[i] - 1 > max)
         max = lis[i] + lds[i] - 1;
   return max;
}
  
/* Driver program to test above function */
int main()
{
  int arr[] = {0_._ 8_._ 4_._ 12_._ 2_._ 10_._ 6_._ 14_._ 1_._ 9_._ 5_._
              13_._ 3_._ 11_._ 7_._ 15};
  int n = sizeof(arr)/sizeof(arr[0]);
  printf(""Length of LBS is %d\n""_._ lbs( arr_._ n ) );
  return 0;
}"
557, C++ Program for Floyd Warshall Algorithm,"#include <bits/stdc++.h>
using namespace std;
 
// Number of vertices in the graph
#define V 4
 
/* Define Infinite as a large enough
value.This value will be used for
vertices not connected to each other */
#define INF 99999
 
// A function to print the solution matrix
void printSolution(int dist[][V]);
 
// Solves the all-pairs shortest path
// problem using Floyd Warshall algorithm
void floydWarshall(int dist[][V])
{
     
    int i_._ j_._ k;
 
    /* Add all vertices one by one to
    the set of intermediate vertices.
    ---> Before start of an iteration_._
    we have shortest distances between all
    pairs of vertices such that the
    shortest distances consider only the
    vertices in set {0_._ 1_._ 2_._ .. k-1} as
    intermediate vertices.
    ----> After the end of an iteration_._
    vertex no. k is added to the set of
    intermediate vertices and the set becomes {0_._ 1_._ 2_._ ..
    k} */
    for (k = 0; k < V; k++) {
        // Pick all vertices as source one by one
        for (i = 0; i < V; i++) {
            // Pick all vertices as destination for the
            // above picked source
            for (j = 0; j < V; j++) {
                // If vertex k is on the shortest path from
                // i to j_._ then update the value of
                // dist[i][j]
                if (dist[i][j] > (dist[i][k] + dist[k][j])
                    && (dist[k][j] != INF
                        && dist[i][k] != INF))
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
 
    // Print the shortest distance matrix
    printSolution(dist);
}
 
/* A utility function to print solution */
void printSolution(int dist[][V])
{
    cout << ""The following matrix shows the shortest ""
            ""distances""
            "" between every pair of vertices \n"";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << ""INF""
                     << "" "";
            else
                cout << dist[i][j] << ""   "";
        }
        cout << endl;
    }
}
 
// Driver's code
int main()
{
    /* Let us create the following weighted graph
            10
    (0)------->(3)
        |     /|\
    5 |     |
        |     | 1
    \|/     |
    (1)------->(2)
            3     */
    int graph[V][V] = { { 0_._ 5_._ INF_._ 10 }_._
                        { INF_._ 0_._ 3_._ INF }_._
                        { INF_._ INF_._ 0_._ 1 }_._
                        { INF_._ INF_._ INF_._ 0 } };
 
    // Function call
    floydWarshall(graph);
    return 0;
}"
558, C++ Program for Palindrome Partitioning,"#include <bits/stdc++.h>
using namespace std;
 
bool isPalindrome(string String_._ int i_._ int j)
{
    while(i < j)
    {
      if(String[i] != String[j])
        return false; 
      i++;
      j--;
    }
    return true;
}
int minPalPartion(string String_._ int i_._ int j)
{
    if( i >= j || isPalindrome(String_._ i_._ j) )
      return 0;
    int ans = INT_MAX_._ count;
    for(int k = i; k < j; k++)
    {
      count = minPalPartion(String_._ i_._ k) +
        minPalPartion(String_._ k + 1_._ j) + 1;
  
      ans = min(ans_._ count);
    }
    return ans;
}
// Driver code
int main() {
    string str = ""ababbbabbababa"";
    cout << ""Min cuts needed for "" <<
      ""Palindrome Partitioning is "" << 
      minPalPartion(str_._ 0_._ str.length() - 1) << endl;
    return 0;
}"
559, C++ Program for Partition problem,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function that returns true if there is
// a subset of arr[] with sum equal to given sum
bool isSubsetSum(int arr[]_._ int n_._ int sum)
{
    // Base Cases
    if (sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
 
    // If last element is greater than sum_._ then
    // ignore it
    if (arr[n - 1] > sum)
        return isSubsetSum(arr_._ n - 1_._ sum);
 
    /* else_._ check if sum can be obtained by any of
        the following
        (a) including the last element
        (b) excluding the last element
    */
    return isSubsetSum(arr_._ n - 1_._ sum)
           || isSubsetSum(arr_._ n - 1_._ sum - arr[n - 1]);
}
 
// Returns true if arr[] can be partitioned in two
// subsets of equal sum_._ otherwise false
bool findPartiion(int arr[]_._ int n)
{
    // Calculate sum of the elements in array
    int sum = 0;
    for (int i = 0; i < n; i++)
        sum += arr[i];
 
    // If sum is odd_._ there cannot be two subsets
    // with equal sum
    if (sum % 2 != 0)
        return false;
 
    // Find if there is subset with sum equal to
    // half of total sum
    return isSubsetSum(arr_._ n_._ sum / 2);
}
 
// Driver code
int main()
{
    int arr[] = { 3_._ 1_._ 5_._ 9_._ 12 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    if (findPartiion(arr_._ n) == true)
        cout << ""Can be divided into two subsets ""
                ""of equal sum"";
    else
        cout << ""Can not be divided into two subsets""
                "" of equal sum"";
    return 0;
}"
560, C++ Program for Word Wrap Problem,"#include <bits/stdc++.h>
using namespace std;
 
int solveWordWrapUsingMemo(int words[]_._ int n_._ int length_._
                           int wordIndex_._ int remLength_._
                           vector<vector<int> > memo);
 
int square(int n) { return n * n; }
 
int solveWordWrapUtil(int words[]_._ int n_._ int length_._
                      int wordIndex_._ int remLength_._
                      vector<vector<int> > memo)
{
 
    // base case for last word
    if (wordIndex == n - 1) {
        memo[wordIndex][remLength]
            = words[wordIndex] < remLength
                  ? 0
                  : square(remLength);
        return memo[wordIndex][remLength];
    }
 
    int currWord = words[wordIndex];
    // if word can fit in the remaining line
    if (currWord < remLength) {
        return min(solveWordWrapUsingMemo(
                       words_._ n_._ length_._ wordIndex + 1_._
                       remLength == length
                           ? remLength - currWord
                           : remLength - currWord - 1_._
                       memo)_._
 
                   square(remLength)
                       + solveWordWrapUsingMemo(
                           words_._ n_._ length_._ wordIndex + 1_._
                           length - currWord_._ memo));
    }
    else {
        // if word is kept on next line
        return square(remLength)
               + solveWordWrapUsingMemo(
                   words_._ n_._ length_._ wordIndex + 1_._
                   length - currWord_._ memo);
    }
}
 
int solveWordWrapUsingMemo(int words[]_._ int n_._ int length_._
                           int wordIndex_._ int remLength_._
                           vector<vector<int> > memo)
{
    if (memo[wordIndex][remLength] != -1) {
        return memo[wordIndex][remLength];
    }
 
    memo[wordIndex][remLength] = solveWordWrapUtil(
        words_._ n_._ length_._ wordIndex_._ remLength_._ memo);
    return memo[wordIndex][remLength];
}
 
int solveWordWrap(int words[]_._ int n_._ int k)
{
 
    vector<vector<int> > memo(n_._ vector<int>(k + 1_._ -1));
 
    return solveWordWrapUsingMemo(words_._ n_._ k_._ 0_._ k_._ memo);
}
int main()
{
    int words[] = { 3_._ 2_._ 2_._ 5 };
    int n = sizeof(words) / sizeof(words[0]);
    int k = 6;
 
    cout << solveWordWrap(words_._ n_._ k);
    return 0;
}"
561, C++ Program for Maximum Length Chain of Pairs,"#include <bits/stdc++.h>
using namespace std;
 
// Structure for a Pair
class Pair
{
    public:
    int a;
    int b;
};
 
// This function assumes that arr[]
// is sorted in increasing order
// according the first
// (or smaller) values in Pairs.
int maxChainLength( Pair arr[]_._ int n)
{
    int i_._ j_._ max = 0;
    int *mcl = new int[sizeof( int ) * n ];
     
    /* Initialize MCL (max chain length)
    values for all indexes */
    for ( i = 0; i < n; i++ )
        mcl[i] = 1;
     
    /* Compute optimized chain
    length values in bottom up manner */
    for ( i = 1; i < n; i++ )
        for ( j = 0; j < i; j++ )
            if ( arr[i].a > arr[j].b &&
                    mcl[i] < mcl[j] + 1)
                mcl[i] = mcl[j] + 1;
     
    // mcl[i] now stores the maximum
    // chain length ending with Pair i
     
    /* Pick maximum of all MCL values */
    for ( i = 0; i < n; i++ )
        if ( max < mcl[i] )
            max = mcl[i];
     
    /* Free memory to avoid memory leak */
     
    return max;
}
     
 
/* Driver code */
int main()
{
    Pair arr[] = { {5_._ 24}_._ {15_._ 25}_._
                        {27_._ 40}_._ {50_._ 60} };
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << ""Length of maximum size chain is ""
                  << maxChainLength( arr_._ n );
    return 0;
}"
562, C++ Program for Box Stacking Problem,"#include<stdio.h>
#include<stdlib.h>
 
/* Representation of a box */
struct Box
{
  // h --> height_._ w --> width_._ d --> depth
  int h_._ w_._ d;  // for simplicity of solution_._ always keep w <= d
};
 
// A utility function to get minimum of two integers
int min (int x_._ int y)
{ return (x < y)? x : y; }
 
// A utility function to get maximum of two integers
int max (int x_._ int y)
{ return (x > y)? x : y; }
 
/* Following function is needed for library function qsort(). We
   use qsort() to sort boxes in decreasing order of base area.
   Refer following link for help of qsort() and compare()
   http://www.cplusplus.com/reference/clibrary/cstdlib/qsort/ */
int compare (const void *a_._ const void * b)
{
    return ( (*(Box *)b).d * (*(Box *)b).w ) -
           ( (*(Box *)a).d * (*(Box *)a).w );
}
 
/* Returns the height of the tallest stack that can be
   formed with give type of boxes */
int maxStackHeight( Box arr[]_._ int n )
{
   /* Create an array of all rotations of given boxes
      For example_._ for a box {1_._ 2_._ 3}_._ we consider three
      instances{{1_._ 2_._ 3}_._ {2_._ 1_._ 3}_._ {3_._ 1_._ 2}} */
   Box rot[3*n];
   int index = 0;
   for (int i = 0; i < n; i++)
   {
      // Copy the original box
      rot[index].h = arr[i].h;
      rot[index].d = max(arr[i].d_._ arr[i].w);
      rot[index].w = min(arr[i].d_._ arr[i].w);
      index++;
 
      // First rotation of box
      rot[index].h = arr[i].w;
      rot[index].d = max(arr[i].h_._ arr[i].d);
      rot[index].w = min(arr[i].h_._ arr[i].d);
      index++;
 
      // Second rotation of box
      rot[index].h = arr[i].d;
      rot[index].d = max(arr[i].h_._ arr[i].w);
      rot[index].w = min(arr[i].h_._ arr[i].w);
      index++;
   }
 
   // Now the number of boxes is 3n
   n = 3*n;
 
   /* Sort the array 'rot[]' in non-increasing order
      of base area */
   qsort (rot_._ n_._ sizeof(rot[0])_._ compare);
 
   // Uncomment following two lines to print all rotations
   // for (int i = 0; i < n; i++ )
   //    printf(""%d x %d x %d\n""_._ rot[i].h_._ rot[i].w_._ rot[i].d);
 
   /* Initialize msh values for all indexes
      msh[i] --> Maximum possible Stack Height with box i on top */
   int msh[n];
   for (int i = 0; i < n; i++ )
      msh[i] = rot[i].h;
 
   /* Compute optimized msh values in bottom up manner */
   for (int i = 1; i < n; i++ )
      for (int j = 0; j < i; j++ )
         if ( rot[i].w < rot[j].w &&
              rot[i].d < rot[j].d &&
              msh[i] < msh[j] + rot[i].h
            )
         {
              msh[i] = msh[j] + rot[i].h;
         }
 
 
   /* Pick maximum of all msh values */
   int max = -1;
   for ( int i = 0; i < n; i++ )
      if ( max < msh[i] )
         max = msh[i];
 
   return max;
}
 
/* Driver program to test above function */
int main()
{
  Box arr[] = { {4_._ 6_._ 7}_._ {1_._ 2_._ 3}_._ {4_._ 5_._ 6}_._ {10_._ 12_._ 32} };
  int n = sizeof(arr)/sizeof(arr[0]);
 
  printf(""The maximum possible height of stack is %d\n""_._
         maxStackHeight (arr_._ n) );
 
  return 0;
}"
563, C++ Program for Longest Palindromic Substring,"#include <bits/stdc++.h>
using namespace std;
 
// Function to print a substring str[low..high]
void printSubStr(string str_._ int low_._ int high)
{
    for (int i = low; i <= high; ++i)
        cout << str[i];
}
 
// This function prints the
// longest palindrome substring
// It also returns the length
// of the longest palindrome
int longestPalSubstr(string str)
{
    // get length of input string
    int n = str.size();
 
    // All substrings of length 1
    // are palindromes
    int maxLength = 1_._ start = 0;
 
    // Nested loop to mark start and end index
    for (int i = 0; i < str.length(); i++) {
        for (int j = i; j < str.length(); j++) {
            int flag = 1;
 
            // Check palindrome
            for (int k = 0; k < (j - i + 1) / 2; k++)
                if (str[i + k] != str[j - k])
                    flag = 0;
 
            // Palindrome
            if (flag && (j - i + 1) > maxLength) {
                start = i;
                maxLength = j - i + 1;
            }
        }
    }
 
    cout << ""Longest palindrome substring is: "";
    printSubStr(str_._ start_._ start + maxLength - 1);
 
    // return length of LPS
    return maxLength;
}
 
// Driver Code
int main()
{
    string str = ""forgeeksskeegfor"";
    cout << ""\nLength is: ""
         << longestPalSubstr(str);
    return 0;
}"
564, C++ Program for Bellman–Ford Algorithm,"#include <bits/stdc++.h>
using namespace std;
 
// a structure to represent a weighted edge in graph
struct Edge {
    int src_._ dest_._ weight;
};
 
// a structure to represent a connected_._ directed and
// weighted graph
struct Graph {
    // V-> Number of vertices_._ E-> Number of edges
    int V_._ E;
 
    // graph is represented as an array of edges.
    struct Edge* edge;
};
 
// Creates a graph with V vertices and E edges
struct Graph* createGraph(int V_._ int E)
{
    struct Graph* graph = new Graph;
    graph->V = V;
    graph->E = E;
    graph->edge = new Edge[E];
    return graph;
}
 
// A utility function used to print the solution
void printArr(int dist[]_._ int n)
{
    printf(""Vertex   Distance from Source\n"");
    for (int i = 0; i < n; ++i)
        printf(""%d \t\t %d\n""_._ i_._ dist[i]);
}
 
// The main function that finds shortest distances from src
// to all other vertices using Bellman-Ford algorithm.  The
// function also detects negative weight cycle
void BellmanFord(struct Graph* graph_._ int src)
{
    int V = graph->V;
    int E = graph->E;
    int dist[V];
 
    // Step 1: Initialize distances from src to all other
    // vertices as INFINITE
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
    dist[src] = 0;
 
    // Step 2: Relax all edges |V| - 1 times. A simple
    // shortest path from src to any other vertex can have
    // at-most |V| - 1 edges
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int weight = graph->edge[j].weight;
            if (dist[u] != INT_MAX
                && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }
 
    // Step 3: check for negative-weight cycles.  The above
    // step guarantees shortest distances if graph doesn't
    // contain negative weight cycle.  If we get a shorter
    // path_._ then there is a cycle.
    for (int i = 0; i < E; i++) {
        int u = graph->edge[i].src;
        int v = graph->edge[i].dest;
        int weight = graph->edge[i].weight;
        if (dist[u] != INT_MAX
            && dist[u] + weight < dist[v]) {
            printf(""Graph contains negative weight cycle"");
            return; // If negative cycle is detected_._ simply
                    // return
        }
    }
 
    printArr(dist_._ V);
 
    return;
}
 
// Driver's code
int main()
{
    /* Let us create the graph given in above example */
    int V = 5; // Number of vertices in graph
    int E = 8; // Number of edges in graph
    struct Graph* graph = createGraph(V_._ E);
 
    // add edge 0-1 (or A-B in above figure)
    graph->edge[0].src = 0;
    graph->edge[0].dest = 1;
    graph->edge[0].weight = -1;
 
    // add edge 0-2 (or A-C in above figure)
    graph->edge[1].src = 0;
    graph->edge[1].dest = 2;
    graph->edge[1].weight = 4;
 
    // add edge 1-2 (or B-C in above figure)
    graph->edge[2].src = 1;
    graph->edge[2].dest = 2;
    graph->edge[2].weight = 3;
 
    // add edge 1-3 (or B-D in above figure)
    graph->edge[3].src = 1;
    graph->edge[3].dest = 3;
    graph->edge[3].weight = 2;
 
    // add edge 1-4 (or B-E in above figure)
    graph->edge[4].src = 1;
    graph->edge[4].dest = 4;
    graph->edge[4].weight = 2;
 
    // add edge 3-2 (or D-C in above figure)
    graph->edge[5].src = 3;
    graph->edge[5].dest = 2;
    graph->edge[5].weight = 5;
 
    // add edge 3-1 (or D-B in above figure)
    graph->edge[6].src = 3;
    graph->edge[6].dest = 1;
    graph->edge[6].weight = 1;
 
    // add edge 4-3 (or E-D in above figure)
    graph->edge[7].src = 4;
    graph->edge[7].dest = 3;
    graph->edge[7].weight = -3;
     
      // Function call
    BellmanFord(graph_._ 0);
 
    return 0;
}"
565, C++ Program for Optimal Binary Search Tree,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function to get sum of
// array elements freq[i] to freq[j]
int sum(int freq[]_._ int i_._ int j);
 
// A recursive function to calculate
// cost of optimal binary search tree
int optCost(int freq[]_._ int i_._ int j)
{
    // Base cases
    if (j < i)  // no elements in this subarray
        return 0;
    if (j == i) // one element in this subarray
        return freq[i];
     
    // Get sum of freq[i]_._ freq[i+1]_._ ... freq[j]
    int fsum = sum(freq_._ i_._ j);
     
    // Initialize minimum value
    int min = INT_MAX;
     
    // One by one consider all elements
    // as root and recursively find cost
    // of the BST_._ compare the cost with
    // min and update min if needed
    for (int r = i; r <= j; ++r)
    {
        int cost = optCost(freq_._ i_._ r - 1) +
                   optCost(freq_._ r + 1_._ j);
        if (cost < min)
            min = cost;
    }
     
    // Return minimum value
    return min + fsum;
}
 
// The main function that calculates
// minimum cost of a Binary Search Tree.
// It mainly uses optCost() to find
// the optimal cost.
int optimalSearchTree(int keys[]_._
                      int freq[]_._ int n)
{
    // Here array keys[] is assumed to be
    // sorted in increasing order. If keys[]
    // is not sorted_._ then add code to sort
    // keys_._ and rearrange freq[] accordingly.
    return optCost(freq_._ 0_._ n - 1);
}
 
// A utility function to get sum of
// array elements freq[i] to freq[j]
int sum(int freq[]_._ int i_._ int j)
{
    int s = 0;
    for (int k = i; k <= j; k++)
    s += freq[k];
    return s;
}
 
// Driver Code
int main()
{
    int keys[] = {10_._ 12_._ 20};
    int freq[] = {34_._ 8_._ 50};
    int n = sizeof(keys) / sizeof(keys[0]);
    cout << ""Cost of Optimal BST is ""
         << optimalSearchTree(keys_._ freq_._ n);
    return 0;
}"
566, C++ Program for Subset Sum Problem,"#include <iostream>
using namespace std;
 
// Returns true if there is a subset
// of set[] with sum equal to given sum
bool isSubsetSum(int set[]_._ int n_._ int sum)
{
   
    // Base Cases
    if (sum == 0)
        return true;
    if (n == 0)
        return false;
 
    // If last element is greater than sum_._
    // then ignore it
    if (set[n - 1] > sum)
        return isSubsetSum(set_._ n - 1_._ sum);
 
    /* else_._ check if sum can be obtained by any
of the following:
      (a) including the last element
      (b) excluding the last element   */
    return isSubsetSum(set_._ n - 1_._ sum)
           || isSubsetSum(set_._ n - 1_._ sum - set[n - 1]);
}
 
// Driver code
int main()
{
    int set[] = { 3_._ 34_._ 4_._ 12_._ 5_._ 2 };
    int sum = 9;
    int n = sizeof(set) / sizeof(set[0]);
    if (isSubsetSum(set_._ n_._ sum) == true)
         cout <<""Found a subset with given sum"";
    else
        cout <<""No subset with given sum"";
    return 0;
}"
567, C++ Program for Largest Independent Set Problem,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function to find
// max of two integers
int max(int x_._ int y)
{
    return (x > y) ? x : y;
}
 
/* A binary tree node has data_._
pointer to left child and a
pointer to right child */
class node
{
    public:
    int data;
    node *left_._ *right;
};
 
// The function returns size of the
// largest independent set in a given
// binary tree
int LISS(node *root)
{
    if (root == NULL)
    return 0;
 
    // Calculate size excluding the current node
    int size_excl = LISS(root->left) +
                    LISS(root->right);
 
    // Calculate size including the current node
    int size_incl = 1;
    if (root->left)
        size_incl += LISS(root->left->left) +
                     LISS(root->left->right);
    if (root->right)
        size_incl += LISS(root->right->left) +
                     LISS(root->right->right);
 
    // Return the maximum of two sizes
    return max(size_incl_._ size_excl);
}
 
// A utility function to create a node
node* newNode( int data )
{
    node* temp = new node();
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}
 
// Driver Code
int main()
{
    // Let us construct the tree
    // given in the above diagram
    node *root = newNode(20);
    root->left = newNode(8);
    root->left->left = newNode(4);
    root->left->right = newNode(12);
    root->left->right->left = newNode(10);
    root->left->right->right = newNode(14);
    root->right = newNode(22);
    root->right->right = newNode(25);
 
    cout << ""Size of the Largest""
         << "" Independent Set is ""
         << LISS(root);
 
    return 0;
}
 "
568, C++ Program for Maximum sum rectangle in a 2D matrix,"#include <bits/stdc++.h>
using namespace std;
 
#define ROW 4
#define COL 5
 
// Implementation of Kadane's algorithm for
// 1D array. The function returns the maximum
// sum and stores starting and ending indexes
// of the maximum sum subarray at addresses
// pointed by start and finish pointers
// respectively.
int kadane(int* arr_._ int* start_._ int* finish_._ int n)
{
    // initialize sum_._ maxSum and
    int sum = 0_._ maxSum = INT_MIN_._ i;
 
    // Just some initial value to check
    // for all negative values case
    *finish = -1;
 
    // local variable
    int local_start = 0;
 
    for (i = 0; i < n; ++i)
    {
        sum += arr[i];
        if (sum < 0)
        {
            sum = 0;
            local_start = i + 1;
        }
        else if (sum > maxSum)
        {
            maxSum = sum;
            *start = local_start;
            *finish = i;
        }
    }
 
    // There is at-least one
    // non-negative number
    if (*finish != -1)
        return maxSum;
 
    // Special Case: When all numbers
    // in arr[] are negative
    maxSum = arr[0];
    *start = *finish = 0;
 
    // Find the maximum element in array
    for (i = 1; i < n; i++)
    {
        if (arr[i] > maxSum)
        {
            maxSum = arr[i];
            *start = *finish = i;
        }
    }
    return maxSum;
}
 
// The main function that finds
// maximum sum rectangle in M[][]
void findMaxSum(int M[][COL])
{
    // Variables to store the final output
    int maxSum = INT_MIN_._
                 finalLeft_._
                 finalRight_._
                 finalTop_._
                 finalBottom;
 
    int left_._ right_._ i;
    int temp[ROW]_._ sum_._ start_._ finish;
 
    // Set the left column
    for (left = 0; left < COL; ++left) {
        // Initialize all elements of temp as 0
        memset(temp_._ 0_._ sizeof(temp));
 
        // Set the right column for the left
        // column set by outer loop
        for (right = left; right < COL; ++right) {
 
            // Calculate sum between current left
            // and right for every row 'i'
            for (i = 0; i < ROW; ++i)
                temp[i] += M[i][right];
 
            // Find the maximum sum subarray in temp[].
            // The kadane() function also sets values
            // of start and finish. So 'sum' is sum of
            // rectangle between (start_._ left) and
            // (finish_._ right) which is the maximum sum
            // with boundary columns strictly as left
            // and right.
            sum = kadane(temp_._ &start_._ &finish_._ ROW);
 
            // Compare sum with maximum sum so far.
            // If sum is more_._ then update maxSum and
            // other output values
            if (sum > maxSum) {
                maxSum = sum;
                finalLeft = left;
                finalRight = right;
                finalTop = start;
                finalBottom = finish;
            }
        }
    }
 
    // Print final values
    cout << ""(Top_._ Left) (""
         << finalTop << ""_._ ""
         << finalLeft
         << "")"" << endl;
    cout << ""(Bottom_._ Right) (""
         << finalBottom << ""_._ ""
         << finalRight << "")"" << endl;
    cout << ""Max sum is: "" << maxSum << endl;
}
 
// Driver Code
int main()
{
    int M[ROW][COL] = { { 1_._ 2_._ -1_._ -4_._ -20 }_._
                        { -8_._ -3_._ 4_._ 2_._ 1 }_._
                        { 3_._ 8_._ 10_._ 1_._ 3 }_._
                        { -4_._ -1_._ 1_._ 7_._ -6 } };
 
    // Function call
    findMaxSum(M);
 
    return 0;
}"
569, C++ Program for Minimum insertions to form a palindrome,"#include<bits/stdc++.h>
using namespace std;
 
 
// Recursive function to find 
// minimum number of insertions
int findMinInsertions(char str[]_._ int l_._ int h)
{
    // Base Cases
    if (l > h) return INT_MAX;
    if (l == h) return 0;
    if (l == h - 1) return (str[l] == str[h])? 0 : 1;
 
    // Check if the first and last characters are
    // same. On the basis of the comparison result_._
    // decide which subproblem(s) to call
    return (str[l] == str[h])?
                    findMinInsertions(str_._ l + 1_._ h - 1):
                    (min(findMinInsertions(str_._ l_._ h - 1)_._
                    findMinInsertions(str_._ l + 1_._ h)) + 1);
}
 
// Driver code
int main()
{
    char str[] = ""geeks"";
    cout << findMinInsertions(str_._ 0_._ strlen(str) - 1);
    return 0;
}"
570, C++ Program for Longest Common Substring,"#include <iostream>
#include <string.h>
using namespace std;
 
/* Returns length of longest
   common substring of X[0..m-1]
   and Y[0..n-1] */
int LCSubStr(char* X_._ char* Y_._ int m_._ int n)
{
    // Create a table to store
    // lengths of longest
    // common suffixes of substrings.  
    // Note that LCSuff[i][j] contains
    // length of longest common suffix
    // of X[0..i-1] and Y[0..j-1].
 
    int LCSuff[m + 1][n + 1];
    int result = 0; // To store length of the
                    // longest common substring
 
    /* Following steps build LCSuff[m+1][n+1] in
        bottom up fashion. */
    for (int i = 0; i <= m; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            // The first row and first column
            // entries have no logical meaning_._
            // they are used only for simplicity
            // of program
            if (i == 0 || j == 0)
                LCSuff[i][j] = 0;
 
            else if (X[i - 1] == Y[j - 1]) {
                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1;
                result = max(result_._ LCSuff[i][j]);
            }
            else
                LCSuff[i][j] = 0;
        }
    }
    return result;
}
 
// Driver code
int main()
{
    char X[] = ""OldSite:GeeksforGeeks.org"";
    char Y[] = ""NewSite:GeeksQuiz.com"";
 
    int m = strlen(X);
    int n = strlen(Y);
 
    cout << ""Length of Longest Common Substring is ""
         << LCSubStr(X_._ Y_._ m_._ n);
    return 0;
}"
571, C++ Program for Dice Throw,"#include <iostream>
#include <string.h>
using namespace std;
 
//  The main function that returns number of ways to get sum 'x'
//  with 'n' dice and 'm' with m faces.
int findWays(int m_._ int n_._ int x)
{
    // Create a table to store results of subproblems.  One extra
    // row and column are used for simplicity (Number of dice
    // is directly used as row index and sum is directly used
    // as column index).  The entries in 0th row and 0th column
    // are never used.
    int table[n + 1][x + 1];
    memset(table_._ 0_._ sizeof(table)); // Initialize all entries as 0
 
    // Table entries for only one dice
    for (int j = 1; j <= m && j <= x; j++)
        table[1][j] = 1;
 
    // Fill rest of the entries in table using recursive relation
    // i: number of dice_._ j: sum
    for (int i = 2; i <= n; i++)
        for (int j = 1; j <= x; j++)
            for (int k = 1; k <= m && k < j; k++)
                table[i][j] += table[i-1][j-k];
 
    /* Uncomment these lines to see content of table
    for (int i = 0; i <= n; i++)
    {
      for (int j = 0; j <= x; j++)
        cout << table[i][j] << "" "";
      cout << endl;
    } */
    return table[n][x];
}
 
// Driver program to test above functions
int main()
{
    cout << findWays(4_._ 2_._ 1) << endl;
    cout << findWays(2_._ 2_._ 3) << endl;
    cout << findWays(6_._ 3_._ 8) << endl;
    cout << findWays(4_._ 2_._ 5) << endl;
    cout << findWays(4_._ 3_._ 5) << endl;
 
    return 0;
}"
572, C++ Program for Optimal Strategy for a Game," 
#include <bits/stdc++.h>
using namespace std;
 
vector<int> arr;
map<vector<int>_._ int> memo;
int n = arr.size();
 
// recursive top down memoized solution
int solve(int i_._ int j)
{
    if ((i > j) || (i >= n) || (j < 0))
        return 0;
 
    vector<int> k{ i_._ j };
    if (memo[k] != 0)
        return memo[k];
 
    // if the user chooses ith coin_._ the opponent can choose
    // from i+1th or jth coin. if he chooses i+1th coin_._
    // user is left with [i+2_._j] range. if opp chooses jth
    // coin_._ then user is left with [i+1_._j-1] range to
    // choose from. Also opponent tries to choose in such a
    // way that the user has minimum value left.
    int option1
        = arr[i]
          + min(solve(i + 2_._ j)_._ solve(i + 1_._ j - 1));
 
    // if user chooses jth coin_._ opponent can choose ith
    // coin or j-1th coin. if opp chooses ith coin_._user can
    // choose in range [i+1_._j-1]. if opp chooses j-1th coin_._
    // user can choose in range [i_._j-2].
    int option2
        = arr[j]
          + min(solve(i + 1_._ j - 1)_._ solve(i_._ j - 2));
 
    // since the user wants to get maximum money
    memo[k] = max(option1_._ option2);
    return memo[k];
}
 
int optimalStrategyOfGame()
{
 
    memo.clear();
    return solve(0_._ n - 1);
}
 
// Driver code
int main()
{
    arr.push_back(8);
    arr.push_back(15);
    arr.push_back(3);
    arr.push_back(7);
    n = arr.size();
    cout << optimalStrategyOfGame() << endl;
 
    arr.clear();
    arr.push_back(2);
    arr.push_back(2);
    arr.push_back(2);
    arr.push_back(2);
    n = arr.size();
    cout << optimalStrategyOfGame() << endl;
 
    arr.clear();
    arr.push_back(20);
    arr.push_back(30);
    arr.push_back(2);
    arr.push_back(2);
    arr.push_back(2);
    arr.push_back(10);
    n = arr.size();
    cout << optimalStrategyOfGame() << endl;
}"
573, C++ Program for Word Break Problem,"#include <iostream>
using namespace std;
 
/* A utility function to check whether a word is
  present in dictionary or not. An array of strings
  is used for dictionary.  Using array of strings for
  dictionary is definitely not a good idea. We have
  used for simplicity of the program*/
int dictionaryContains(string word)
{
    string dictionary[] = {""mobile""_._""samsung""_._""sam""_._""sung""_._
                            ""man""_._""mango""_._""icecream""_._""and""_._
                             ""go""_._""i""_._""like""_._""ice""_._""cream""};
    int size = sizeof(dictionary)/sizeof(dictionary[0]);
    for (int i = 0; i < size; i++)
        if (dictionary[i].compare(word) == 0)
           return true;
    return false;
}
 
// returns true if string can be segmented into space
// separated words_._ otherwise returns false
bool wordBreak(string str)
{
    int size = str.size();
 
    // Base case
    if (size == 0)  return true;
 
    // Try all prefixes of lengths from 1 to size
    for (int i=1; i<=size; i++)
    {
        // The parameter for dictionaryContains is
        // str.substr(0_._ i) which is prefix (of input
        // string) of length 'i'. We first check whether
        // current prefix is in  dictionary. Then we
        // recursively check for remaining string
        // str.substr(i_._ size-i) which is suffix of 
        // length size-i
        if (dictionaryContains( str.substr(0_._ i) ) &&
            wordBreak( str.substr(i_._ size-i) ))
            return true;
    }
 
    // If we have tried all prefixes and
    // none of them worked
    return false;
}
 
// Driver program to test above functions
int main()
{
    wordBreak(""ilikesamsung"")? cout <<""Yes\n"": cout << ""No\n"";
    wordBreak(""iiiiiiii"")? cout <<""Yes\n"": cout << ""No\n"";
    wordBreak("""")? cout <<""Yes\n"": cout << ""No\n"";
    wordBreak(""ilikelikeimangoiii"")? cout <<""Yes\n"": cout << ""No\n"";
    wordBreak(""samsungandmango"")? cout <<""Yes\n"": cout << ""No\n"";
    wordBreak(""samsungandmangok"")? cout <<""Yes\n"": cout << ""No\n"";
    return 0;
}"
574, C++ Program for Find if a string is interleaved of two other strings,"#include <iostream>
#include <string.h>
using namespace std;
 
// The main function that
// returns true if C is
// an interleaving of A
// and B_._ otherwise false.
bool isInterleaved(
    char* A_._ char* B_._ char* C)
{
    // Find lengths of the two strings
    int M = strlen(A)_._ N = strlen(B);
 
    // Let us create a 2D table
    // to store solutions of
    // subproblems.  C[i][j] will
    // be true if C[0..i+j-1]
    // is an interleaving of
    // A[0..i-1] and B[0..j-1].
    bool IL[M + 1][N + 1];
 
    // Initialize all values as false.
    memset(IL_._ 0_._ sizeof(IL));
 
    // C can be an interleaving of
    // A and B only of the sum
    // of lengths of A & B is equal
    // to the length of C.
    if ((M + N) != strlen(C))
        return false;
 
    // Process all characters of A and B
    for (int i = 0; i <= M; ++i) {
        for (int j = 0; j <= N; ++j) {
            // two empty strings have an
            // empty string as interleaving
            if (i == 0 && j == 0)
                IL[i][j] = true;
 
            // A is empty
            else if (i == 0) {
                if (B[j - 1] == C[j - 1])
                    IL[i][j] = IL[i][j - 1];
            }
 
            // B is empty
            else if (j == 0) {
                if (A[i - 1] == C[i - 1])
                    IL[i][j] = IL[i - 1][j];
            }
 
            // Current character of C matches
            // with current character of A_._
            // but doesn't match with current
            // character of B
            else if (
                A[i - 1] == C[i + j - 1]
                && B[j - 1] != C[i + j - 1])
                IL[i][j] = IL[i - 1][j];
 
            // Current character of C matches
            // with current character of B_._
            // but doesn't match with current
            // character of A
            else if (
                A[i - 1] != C[i + j - 1]
                && B[j - 1] == C[i + j - 1])
                IL[i][j] = IL[i][j - 1];
 
            // Current character of C matches
            // with that of both A and B
            else if (
                A[i - 1] == C[i + j - 1]
                && B[j - 1] == C[i + j - 1])
                IL[i][j]
                    = (IL[i - 1][j]
                       || IL[i][j - 1]);
        }
    }
 
    return IL[M][N];
}
 
// A function to run test cases
void test(char* A_._ char* B_._ char* C)
{
    if (isInterleaved(A_._ B_._ C))
        cout << C << "" is interleaved of ""
             << A << "" and "" << B << endl;
    else
        cout << C << "" is not interleaved of ""
             << A << "" and "" << B << endl;
}
 
// Driver program to test above functions
int main()
{
    test(""XXY""_._ ""XXZ""_._ ""XXZXXXY"");
    test(""XY""_._ ""WZ""_._ ""WZXY"");
    test(""XY""_._ ""X""_._ ""XXY"");
    test(""YX""_._ ""X""_._ ""XXY"");
    test(""XXY""_._ ""XXZ""_._ ""XXXXZY"");
    return 0;
}"
575, C++ Program for Assembly Line Scheduling,"#include <bits/stdc++.h>
using namespace std;
#define NUM_LINE 2
#define NUM_STATION 4
 
// Utility function to find a minimum of two numbers
int min(int a_._ int b)
{
    return a < b ? a : b;
}
 
int carAssembly(int a[][NUM_STATION]_._
                int t[][NUM_STATION]_._
                int *e_._ int *x)
{
    int T1[NUM_STATION]_._ T2[NUM_STATION]_._ i;
 
    // time taken to leave first station in line 1
    T1[0] = e[0] + a[0][0];
     
    // time taken to leave first station in line 2
    T2[0] = e[1] + a[1][0];
 
    // Fill tables T1[] and T2[] using the
    // above given recursive relations
    for (i = 1; i < NUM_STATION; ++i)
    {
        T1[i] = min(T1[i - 1] + a[0][i]_._
                    T2[i - 1] + t[1][i] + a[0][i]);
        T2[i] = min(T2[i - 1] + a[1][i]_._
                    T1[i - 1] + t[0][i] + a[1][i]);
    }
 
    // Consider exit times and return minimum
    return min(T1[NUM_STATION - 1] + x[0]_._
               T2[NUM_STATION - 1] + x[1]);
}
 
// Driver Code
int main()
{
    int a[][NUM_STATION] = {{4_._ 5_._ 3_._ 2}_._
                            {2_._ 10_._ 1_._ 4}};
    int t[][NUM_STATION] = {{0_._ 7_._ 4_._ 5}_._
                            {0_._ 9_._ 2_._ 8}};
    int e[] = {10_._ 12}_._ x[] = {18_._ 7};
 
    cout << carAssembly(a_._ t_._ e_._ x);
 
    return 0;
}"
576, C++ Program for Longest Arithmetic Progression,"bool arithmeticThree(vector<int> set_._ int n)
{
     
    // One by fix every element as middle element
    for(int j = 1; j < n - 1; j++)
    {
         
        // Initialize i and k for the current j
        int i = j - 1_._ k = j + 1;
 
        // Find if there exist i and k that form AP
        // with j as middle element
        while (i >= 0 && k <= n-1)
        {
            if (set[i] + set[k] == 2 * set[j])
                return true;
                 
            (set[i] + set[k] < 2 * set[j]) ? k++ : i--;
        }
    }
    return false;
}
 "
577, C++ Program for Maximum Product Cutting,"#include <iostream>
using namespace std;
 
// Utility function to get the maximum of two and three integers
int max(int a_._ int b) { return (a > b)? a : b;}
int max(int a_._ int b_._ int c) { return max(a_._ max(b_._ c));}
 
// The main function that returns maximum product obtainable
// from a rope of length n
int maxProd(int n)
{
    // Base cases
    if (n == 0 || n == 1) return 0;
 
    // Make a cut at different places and take the maximum of all
    int max_val = 0;
    for (int i = 1; i < n; i++)
      max_val = max(max_val_._ i*(n-i)_._ maxProd(n-i)*i);
 
    // Return the maximum of all values
    return max_val;
}
 
/* Driver program to test above functions */
int main()
{
    cout << ""Maximum Product is "" << maxProd(10);
    return 0;
}"
578, C++ Program for Count all possible paths from top left to bottom right of a mXn matrix," 
#include <bits/stdc++.h>
using namespace std;
 
// Returns count of possible paths to reach cell at row
// number m and column number n from the topmost leftmost
// cell (cell at 1_._ 1)
int numberOfPaths(int m_._ int n)
{
    // If either given row number is first or given column
    // number is first
    if (m == 1 || n == 1)
        return 1;
 
    // If diagonal movements are allowed then the last
    // addition is required.
    return numberOfPaths(m - 1_._ n)
           + numberOfPaths(m_._ n - 1);
    // + numberOfPaths(m-1_._ n-1);
}
 
// Driver code
int main()
{
    cout << numberOfPaths(3_._ 3);
    return 0;
}"
579, C++ Program Activity Selection Problem,"#include <bits/stdc++.h>
using namespace std;
 
// Prints a maximum set of activities that can be done by a
// single person_._ one at a time.
void printMaxActivities(int s[]_._ int f[]_._ int n)
{
    int i_._ j;
 
    cout << ""Following activities are selected"" << endl;
 
    // The first activity always gets selected
    i = 0;
    cout << i << "" "";
 
    // Consider rest of the activities
    for (j = 1; j < n; j++) {
        // If this activity has start time greater than or
        // equal to the finish time of previously selected
        // activity_._ then select it
        if (s[j] >= f[i]) {
            cout << j << "" "";
            i = j;
        }
    }
}
 
// Driver code
int main()
{
    int s[] = { 1_._ 3_._ 0_._ 5_._ 8_._ 5 };
    int f[] = { 2_._ 4_._ 6_._ 7_._ 9_._ 9 };
    int n = sizeof(s) / sizeof(s[0]);
 
    // Function call
    printMaxActivities(s_._ f_._ n);
    return 0;
}"
580, C++ Program Kruskal’s Minimum Spanning Tree Algorithm,"#include <bits/stdc++.h>
using namespace std;
 
// DSU data structure
// path compression + rank by union
 
class DSU {
    int* parent;
    int* rank;
 
public:
    DSU(int n)
    {
        parent = new int[n];
        rank = new int[n];
 
        for (int i = 0; i < n; i++) {
            parent[i] = -1;
            rank[i] = 1;
        }
    }
 
    // Find function
    int find(int i)
    {
        if (parent[i] == -1)
            return i;
 
        return parent[i] = find(parent[i]);
    }
 
    // Union function
    void unite(int x_._ int y)
    {
        int s1 = find(x);
        int s2 = find(y);
 
        if (s1 != s2) {
            if (rank[s1] < rank[s2]) {
                parent[s1] = s2;
            }
            else if (rank[s1] > rank[s2]) {
                parent[s2] = s1;
            }
            else {
                parent[s2] = s1;
                rank[s1] += 1;
            }
        }
    }
};
 
class Graph {
    vector<vector<int> > edgelist;
    int V;
 
public:
    Graph(int V) { this->V = V; }
 
    void addEdge(int x_._ int y_._ int w)
    {
        edgelist.push_back({ w_._ x_._ y });
    }
 
    void kruskals_mst()
    {
        // 1. Sort all edges
        sort(edgelist.begin()_._ edgelist.end());
 
        // Initialize the DSU
        DSU s(V);
        int ans = 0;
        cout << ""Following are the edges in the ""
                ""constructed MST""
             << endl;
        for (auto edge : edgelist) {
            int w = edge[0];
            int x = edge[1];
            int y = edge[2];
 
            // Take this edge in MST if it does
            // not forms a cycle
            if (s.find(x) != s.find(y)) {
                s.unite(x_._ y);
                ans += w;
                cout << x << "" -- "" << y << "" == "" << w
                     << endl;
            }
        }
 
        cout << ""Minimum Cost Spanning Tree: "" << ans;
    }
};
 
// Driver's code
int main()
{
    /* Let us create following weighted graph
                   10
              0--------1
              |  \     |
             6|   5\   |15
              |      \ |
              2--------3
                  4       */
    Graph g(4);
    g.addEdge(0_._ 1_._ 10);
    g.addEdge(1_._ 3_._ 15);
    g.addEdge(2_._ 3_._ 4);
    g.addEdge(2_._ 0_._ 6);
    g.addEdge(0_._ 3_._ 5);
 
    // Function call
    g.kruskals_mst();
    return 0;
}"
581, C++ Program for Huffman Coding,"#include <iostream>
#include <cstdlib>
using namespace std;
 
// This constant can be avoided by explicitly
// calculating height of Huffman Tree
#define MAX_TREE_HT 100
 
// A Huffman tree node
struct MinHeapNode {
 
    // One of the input characters
    char data;
 
    // Frequency of the character
    unsigned freq;
 
    // Left and right child of this node
    struct MinHeapNode *left_._ *right;
};
 
// A Min Heap: Collection of
// min-heap (or Huffman tree) nodes
struct MinHeap {
 
    // Current size of min heap
    unsigned size;
 
    // capacity of min heap
    unsigned capacity;
 
    // Array of minheap node pointers
    struct MinHeapNode** array;
};
 
// A utility function allocate a new
// min heap node with given character
// and frequency of the character
struct MinHeapNode* newNode(char data_._ unsigned freq)
{
    struct MinHeapNode* temp
        = (struct MinHeapNode*)malloc
(sizeof(struct MinHeapNode));
 
    temp->left = temp->right = NULL;
    temp->data = data;
    temp->freq = freq;
 
    return temp;
}
 
// A utility function to create
// a min heap of given capacity
struct MinHeap* createMinHeap(unsigned capacity)
 
{
 
    struct MinHeap* minHeap
        = (struct MinHeap*)malloc(sizeof(struct MinHeap));
 
    // current size is 0
    minHeap->size = 0;
 
    minHeap->capacity = capacity;
 
    minHeap->array
        = (struct MinHeapNode**)malloc(minHeap->
capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}
 
// A utility function to
// swap two min heap nodes
void swapMinHeapNode(struct MinHeapNode** a_._
                    struct MinHeapNode** b)
 
{
 
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}
 
// The standard minHeapify function.
void minHeapify(struct MinHeap* minHeap_._ int idx)
 
{
 
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;
 
    if (left < minHeap->size && minHeap->array[left]->
freq < minHeap->array[smallest]->freq)
        smallest = left;
 
    if (right < minHeap->size && minHeap->array[right]->
freq < minHeap->array[smallest]->freq)
        smallest = right;
 
    if (smallest != idx) {
        swapMinHeapNode(&minHeap->array[smallest]_._
                        &minHeap->array[idx]);
        minHeapify(minHeap_._ smallest);
    }
}
 
// A utility function to check
// if size of heap is 1 or not
int isSizeOne(struct MinHeap* minHeap)
{
 
    return (minHeap->size == 1);
}
 
// A standard function to extract
// minimum value node from heap
struct MinHeapNode* extractMin(struct MinHeap* minHeap)
 
{
 
    struct MinHeapNode* temp = minHeap->array[0];
    minHeap->array[0]
        = minHeap->array[minHeap->size - 1];
 
    --minHeap->size;
    minHeapify(minHeap_._ 0);
 
    return temp;
}
 
// A utility function to insert
// a new node to Min Heap
void insertMinHeap(struct MinHeap* minHeap_._
                struct MinHeapNode* minHeapNode)
 
{
 
    ++minHeap->size;
    int i = minHeap->size - 1;
 
    while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) {
 
        minHeap->array[i] = minHeap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
 
    minHeap->array[i] = minHeapNode;
}
 
// A standard function to build min heap
void buildMinHeap(struct MinHeap* minHeap)
 
{
 
    int n = minHeap->size - 1;
    int i;
 
    for (i = (n - 1) / 2; i >= 0; --i)
        minHeapify(minHeap_._ i);
}
 
// A utility function to print an array of size n
void printArr(int arr[]_._ int n)
{
    int i;
    for (i = 0; i < n; ++i)
        cout<< arr[i];
 
    cout<<""\n"";
}
 
// Utility function to check if this node is leaf
int isLeaf(struct MinHeapNode* root)
 
{
 
    return !(root->left) && !(root->right);
}
 
// Creates a min heap of capacity
// equal to size and inserts all character of
// data[] in min heap. Initially size of
// min heap is equal to capacity
struct MinHeap* createAndBuildMinHeap(char data[]_._ int freq[]_._ int size)
 
{
 
    struct MinHeap* minHeap = createMinHeap(size);
 
    for (int i = 0; i < size; ++i)
        minHeap->array[i] = newNode(data[i]_._ freq[i]);
 
    minHeap->size = size;
    buildMinHeap(minHeap);
 
    return minHeap;
}
 
// The main function that builds Huffman tree
struct MinHeapNode* buildHuffmanTree(char data[]_._ int freq[]_._ int size)
 
{
    struct MinHeapNode *left_._ *right_._ *top;
 
    // Step 1: Create a min heap of capacity
    // equal to size. Initially_._ there are
    // modes equal to size.
    struct MinHeap* minHeap = createAndBuildMinHeap(data_._ freq_._ size);
 
    // Iterate while size of heap doesn't become 1
    while (!isSizeOne(minHeap)) {
 
        // Step 2: Extract the two minimum
        // freq items from min heap
        left = extractMin(minHeap);
        right = extractMin(minHeap);
 
        // Step 3: Create a new internal
        // node with frequency equal to the
        // sum of the two nodes frequencies.
        // Make the two extracted node as
        // left and right children of this new node.
        // Add this node to the min heap
        // '$' is a special value for internal nodes_._ not used
        top = newNode('$'_._ left->freq + right->freq);
 
        top->left = left;
        top->right = right;
 
        insertMinHeap(minHeap_._ top);
    }
 
    // Step 4: The remaining node is the
    // root node and the tree is complete.
    return extractMin(minHeap);
}
 
// Prints huffman codes from the root of Huffman Tree.
// It uses arr[] to store codes
void printCodes(struct MinHeapNode* root_._ int arr[]_._ int top)
 
{
 
    // Assign 0 to left edge and recur
    if (root->left) {
 
        arr[top] = 0;
        printCodes(root->left_._ arr_._ top + 1);
    }
 
    // Assign 1 to right edge and recur
    if (root->right) {
 
        arr[top] = 1;
        printCodes(root->right_._ arr_._ top + 1);
    }
 
    // If this is a leaf node_._ then
    // it contains one of the input
    // characters_._ print the character
    // and its code from arr[]
    if (isLeaf(root)) {
 
        cout<< root->data <<"": "";
        printArr(arr_._ top);
    }
}
 
// The main function that builds a
// Huffman Tree and print codes by traversing
// the built Huffman Tree
void HuffmanCodes(char data[]_._ int freq[]_._ int size)
 
{
    // Construct Huffman Tree
    struct MinHeapNode* root
        = buildHuffmanTree(data_._ freq_._ size);
 
    // Print Huffman codes using
    // the Huffman tree built above
    int arr[MAX_TREE_HT]_._ top = 0;
 
    printCodes(root_._ arr_._ top);
}
 
// Driver code
int main()
{
 
    char arr[] = { 'a'_._ 'b'_._ 'c'_._ 'd'_._ 'e'_._ 'f' };
    int freq[] = { 5_._ 9_._ 12_._ 13_._ 16_._ 45 };
 
    int size = sizeof(arr) / sizeof(arr[0]);
 
    HuffmanCodes(arr_._ freq_._ size);
 
    return 0;
}"
582, C++ Program for Efficient Huffman Coding for Sorted Input,"#include <bits/stdc++.h>
using namespace std;
 
// This constant can be avoided by explicitly
// calculating height of Huffman Tree
#define MAX_TREE_HT 100
 
// A node of huffman tree
class QueueNode {
public:
    char data;
    unsigned freq;
    QueueNode *left_._ *right;
};
 
// Structure for Queue: collection
// of Huffman Tree nodes (or QueueNodes)
class Queue {
public:
    int front_._ rear;
    int capacity;
    QueueNode** array;
};
 
// A utility function to create a new Queuenode
QueueNode* newNode(char data_._ unsigned freq)
{
    QueueNode* temp = new QueueNode[(sizeof(QueueNode))];
    temp->left = temp->right = NULL;
    temp->data = data;
    temp->freq = freq;
    return temp;
}
 
// A utility function to create a Queue of given capacity
Queue* createQueue(int capacity)
{
    Queue* queue = new Queue[(sizeof(Queue))];
    queue->front = queue->rear = -1;
    queue->capacity = capacity;
    queue->array = new QueueNode*[(queue->capacity
                                   * sizeof(QueueNode*))];
    return queue;
}
 
// A utility function to check if size of given queue is 1
int isSizeOne(Queue* queue)
{
    return queue->front == queue->rear
           && queue->front != -1;
}
 
// A utility function to check if given queue is empty
int isEmpty(Queue* queue) { return queue->front == -1; }
 
// A utility function to check if given queue is full
int isFull(Queue* queue)
{
    return queue->rear == queue->capacity - 1;
}
 
// A utility function to add an item to queue
void enQueue(Queue* queue_._ QueueNode* item)
{
    if (isFull(queue))
        return;
    queue->array[++queue->rear] = item;
    if (queue->front == -1)
        ++queue->front;
}
 
// A utility function to remove an item from queue
QueueNode* deQueue(Queue* queue)
{
    if (isEmpty(queue))
        return NULL;
    QueueNode* temp = queue->array[queue->front];
    if (queue->front
        == queue
               ->rear) // If there is only one item in queue
        queue->front = queue->rear = -1;
    else
        ++queue->front;
    return temp;
}
 
// A utility function to get from of queue
QueueNode* getFront(Queue* queue)
{
    if (isEmpty(queue))
        return NULL;
    return queue->array[queue->front];
}
 
/* A function to get minimum item from two queues */
QueueNode* findMin(Queue* firstQueue_._ Queue* secondQueue)
{
    // Step 3.a: If first queue is empty_._ dequeue from
    // second queue
    if (isEmpty(firstQueue))
        return deQueue(secondQueue);
 
    // Step 3.b: If second queue is empty_._ dequeue from
    // first queue
    if (isEmpty(secondQueue))
        return deQueue(firstQueue);
 
    // Step 3.c: Else_._ compare the front of two queues and
    // dequeue minimum
    if (getFront(firstQueue)->freq
        < getFront(secondQueue)->freq)
        return deQueue(firstQueue);
 
    return deQueue(secondQueue);
}
 
// Utility function to check if this node is leaf
int isLeaf(QueueNode* root)
{
    return !(root->left) && !(root->right);
}
 
// A utility function to print an array of size n
void printArr(int arr[]_._ int n)
{
    int i;
    for (i = 0; i < n; ++i)
        cout << arr[i];
    cout << endl;
}
 
// The main function that builds Huffman tree
QueueNode* buildHuffmanTree(char data[]_._ int freq[]_._
                            int size)
{
    QueueNode *left_._ *right_._ *top;
 
    // Step 1: Create two empty queues
    Queue* firstQueue = createQueue(size);
    Queue* secondQueue = createQueue(size);
 
    // Step 2:Create a leaf node for each unique character
    // and Enqueue it to the first queue in non-decreasing
    // order of frequency. Initially second queue is empty
    for (int i = 0; i < size; ++i)
        enQueue(firstQueue_._ newNode(data[i]_._ freq[i]));
 
    // Run while Queues contain more than one node. Finally_._
    // first queue will be empty and second queue will
    // contain only one node
    while (
        !(isEmpty(firstQueue) && isSizeOne(secondQueue))) {
        // Step 3: Dequeue two nodes with the minimum
        // frequency by examining the front of both queues
        left = findMin(firstQueue_._ secondQueue);
        right = findMin(firstQueue_._ secondQueue);
 
        // Step 4: Create a new internal node with frequency
        // equal to the sum of the two nodes frequencies.
        // Enqueue this node to second queue.
        top = newNode('$'_._ left->freq + right->freq);
        top->left = left;
        top->right = right;
        enQueue(secondQueue_._ top);
    }
 
    return deQueue(secondQueue);
}
 
// Prints huffman codes from the root of Huffman Tree. It
// uses arr[] to store codes
void printCodes(QueueNode* root_._ int arr[]_._ int top)
{
    // Assign 0 to left edge and recur
    if (root->left) {
        arr[top] = 0;
        printCodes(root->left_._ arr_._ top + 1);
    }
 
    // Assign 1 to right edge and recur
    if (root->right) {
        arr[top] = 1;
        printCodes(root->right_._ arr_._ top + 1);
    }
 
    // If this is a leaf node_._ then it contains one of the
    // input characters_._ print the character and its code
    // from arr[]
    if (isLeaf(root)) {
        cout << root->data << "": "";
        printArr(arr_._ top);
    }
}
 
// The main function that builds a Huffman Tree and print
// codes by traversing the built Huffman Tree
void HuffmanCodes(char data[]_._ int freq[]_._ int size)
{
    // Construct Huffman Tree
    QueueNode* root = buildHuffmanTree(data_._ freq_._ size);
 
    // Print Huffman codes using the Huffman tree built
    // above
    int arr[MAX_TREE_HT]_._ top = 0;
    printCodes(root_._ arr_._ top);
}
 
// Driver code
int main()
{
    char arr[] = { 'a'_._ 'b'_._ 'c'_._ 'd'_._ 'e'_._ 'f' };
    int freq[] = { 5_._ 9_._ 12_._ 13_._ 16_._ 45 };
    int size = sizeof(arr) / sizeof(arr[0]);
    HuffmanCodes(arr_._ freq_._ size);
    return 0;
}"
583, C++ Program for Prim’s Minimum Spanning Tree (MST),"#include <bits/stdc++.h>
using namespace std;
 
// Number of vertices in the graph
#define V 5
 
// A utility function to find the vertex with
// minimum key value_._ from the set of vertices
// not yet included in MST
int minKey(int key[]_._ bool mstSet[])
{
    // Initialize min value
    int min = INT_MAX_._ min_index;
 
    for (int v = 0; v < V; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v]_._ min_index = v;
 
    return min_index;
}
 
// A utility function to print the
// constructed MST stored in parent[]
void printMST(int parent[]_._ int graph[V][V])
{
    cout << ""Edge \tWeight\n"";
    for (int i = 1; i < V; i++)
        cout << parent[i] << "" - "" << i << "" \t""
             << graph[i][parent[i]] << "" \n"";
}
 
// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation
void primMST(int graph[V][V])
{
    // Array to store constructed MST
    int parent[V];
 
    // Key values used to pick minimum weight edge in cut
    int key[V];
 
    // To represent set of vertices included in MST
    bool mstSet[V];
 
    // Initialize all keys as INFINITE
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX_._ mstSet[i] = false;
 
    // Always include first 1st vertex in MST.
    // Make key 0 so that this vertex is picked as first
    // vertex.
    key[0] = 0;
    parent[0] = -1; // First node is always root of MST
 
    // The MST will have V vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum key vertex from the
        // set of vertices not yet included in MST
        int u = minKey(key_._ mstSet);
 
        // Add the picked vertex to the MST Set
        mstSet[u] = true;
 
        // Update key value and parent index of
        // the adjacent vertices of the picked vertex.
        // Consider only those vertices which are not
        // yet included in MST
        for (int v = 0; v < V; v++)
 
            // graph[u][v] is non zero only for adjacent
            // vertices of m mstSet[v] is false for vertices
            // not yet included in MST Update the key only
            // if graph[u][v] is smaller than key[v]
            if (graph[u][v] && mstSet[v] == false
                && graph[u][v] < key[v])
                parent[v] = u_._ key[v] = graph[u][v];
    }
 
    // print the constructed MST
    printMST(parent_._ graph);
}
 
// Driver's code
int main()
{
    /* Let us create the following graph
        2 3
    (0)--(1)--(2)
    | / \ |
    6| 8/ \5 |7
    | / \ |
    (3)-------(4)
            9     */
    int graph[V][V] = { { 0_._ 2_._ 0_._ 6_._ 0 }_._
                        { 2_._ 0_._ 3_._ 8_._ 5 }_._
                        { 0_._ 3_._ 0_._ 0_._ 7 }_._
                        { 6_._ 8_._ 0_._ 0_._ 9 }_._
                        { 0_._ 5_._ 7_._ 9_._ 0 } };
 
    // Print the solution
    primMST(graph);
 
    return 0;
}
 "
584, C++ Program for Prim’s MST for Adjacency List Representation," 
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
 
// A structure to represent a node in adjacency list
struct AdjListNode {
    int dest;
    int weight;
    struct AdjListNode* next;
};
 
// A structure to represent an adjacency list
struct AdjList {
    struct AdjListNode*
        head; // pointer to head node of list
};
 
// A structure to represent a graph. A graph is an array of
// adjacency lists. Size of array will be V (number of
// vertices in graph)
struct Graph {
    int V;
    struct AdjList* array;
};
 
// A utility function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest_._ int weight)
{
    struct AdjListNode* newNode
        = (struct AdjListNode*)malloc(
            sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->weight = weight;
    newNode->next = NULL;
    return newNode;
}
 
// A utility function that creates a graph of V vertices
struct Graph* createGraph(int V)
{
    struct Graph* graph
        = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
 
    // Create an array of adjacency lists.  Size of array
    // will be V
    graph->array = (struct AdjList*)malloc(
        V * sizeof(struct AdjList));
 
    // Initialize each adjacency list as empty by making
    // head as NULL
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;
 
    return graph;
}
 
// Adds an edge to an undirected graph
void addEdge(struct Graph* graph_._ int src_._ int dest_._
             int weight)
{
    // Add an edge from src to dest.  A new node is added to
    // the adjacency list of src.  The node is added at the
    // beginning
    struct AdjListNode* newNode
        = newAdjListNode(dest_._ weight);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
 
    // Since graph is undirected_._ add an edge from dest to
    // src also
    newNode = newAdjListNode(src_._ weight);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}
 
// Structure to represent a min heap node
struct MinHeapNode {
    int v;
    int key;
};
 
// Structure to represent a min heap
struct MinHeap {
    int size; // Number of heap nodes present currently
    int capacity; // Capacity of min heap
    int* pos; // This is needed for decreaseKey()
    struct MinHeapNode** array;
};
 
// A utility function to create a new Min Heap Node
struct MinHeapNode* newMinHeapNode(int v_._ int key)
{
    struct MinHeapNode* minHeapNode
        = (struct MinHeapNode*)malloc(
            sizeof(struct MinHeapNode));
    minHeapNode->v = v;
    minHeapNode->key = key;
    return minHeapNode;
}
 
// A utility function to create a Min Heap
struct MinHeap* createMinHeap(int capacity)
{
    struct MinHeap* minHeap
        = (struct MinHeap*)malloc(sizeof(struct MinHeap));
    minHeap->pos = (int*)malloc(capacity * sizeof(int));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (struct MinHeapNode**)malloc(
        capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}
 
// A utility function to swap two nodes of min heap. Needed
// for min heapify
void swapMinHeapNode(struct MinHeapNode** a_._
                     struct MinHeapNode** b)
{
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}
 
// A standard function to heapify at given idx
// This function also updates position of nodes when they
// are swapped. Position is needed for decreaseKey()
void minHeapify(struct MinHeap* minHeap_._ int idx)
{
    int smallest_._ left_._ right;
    smallest = idx;
    left = 2 * idx + 1;
    right = 2 * idx + 2;
 
    if (left < minHeap->size
        && minHeap->array[left]->key
               < minHeap->array[smallest]->key)
        smallest = left;
 
    if (right < minHeap->size
        && minHeap->array[right]->key
               < minHeap->array[smallest]->key)
        smallest = right;
 
    if (smallest != idx) {
        // The nodes to be swapped in min heap
        MinHeapNode* smallestNode
            = minHeap->array[smallest];
        MinHeapNode* idxNode = minHeap->array[idx];
 
        // Swap positions
        minHeap->pos[smallestNode->v] = idx;
        minHeap->pos[idxNode->v] = smallest;
 
        // Swap nodes
        swapMinHeapNode(&minHeap->array[smallest]_._
                        &minHeap->array[idx]);
 
        minHeapify(minHeap_._ smallest);
    }
}
 
// A utility function to check if the given minHeap is empty
// or not
int isEmpty(struct MinHeap* minHeap)
{
    return minHeap->size == 0;
}
 
// Standard function to extract minimum node from heap
struct MinHeapNode* extractMin(struct MinHeap* minHeap)
{
    if (isEmpty(minHeap))
        return NULL;
 
    // Store the root node
    struct MinHeapNode* root = minHeap->array[0];
 
    // Replace root node with last node
    struct MinHeapNode* lastNode
        = minHeap->array[minHeap->size - 1];
    minHeap->array[0] = lastNode;
 
    // Update position of last node
    minHeap->pos[root->v] = minHeap->size - 1;
    minHeap->pos[lastNode->v] = 0;
 
    // Reduce heap size and heapify root
    --minHeap->size;
    minHeapify(minHeap_._ 0);
 
    return root;
}
 
// Function to decrease key value of a given vertex v. This
// function uses pos[] of min heap to get the current index
// of node in min heap
void decreaseKey(struct MinHeap* minHeap_._ int v_._ int key)
{
    // Get the index of v in  heap array
    int i = minHeap->pos[v];
 
    // Get the node and update its key value
    minHeap->array[i]->key = key;
 
    // Travel up while the complete tree is not heapified.
    // This is a O(Logn) loop
    while (i
           && minHeap->array[i]->key
                  < minHeap->array[(i - 1) / 2]->key) {
        // Swap this node with its parent
        minHeap->pos[minHeap->array[i]->v] = (i - 1) / 2;
        minHeap->pos[minHeap->array[(i - 1) / 2]->v] = i;
        swapMinHeapNode(&minHeap->array[i]_._
                        &minHeap->array[(i - 1) / 2]);
 
        // move to parent index
        i = (i - 1) / 2;
    }
}
 
// A utility function to check if a given vertex
// 'v' is in min heap or not
bool isInMinHeap(struct MinHeap* minHeap_._ int v)
{
    if (minHeap->pos[v] < minHeap->size)
        return true;
    return false;
}
 
// A utility function used to print the constructed MST
void printArr(int arr[]_._ int n)
{
    for (int i = 1; i < n; ++i)
        printf(""%d - %d\n""_._ arr[i]_._ i);
}
 
// The main function that constructs Minimum Spanning Tree
// (MST) using Prim's algorithm
void PrimMST(struct Graph* graph)
{
    int V = graph->V; // Get the number of vertices in graph
    int parent[V]; // Array to store constructed MST
    int key[V]; // Key values used to pick minimum weight
                // edge in cut
 
    // minHeap represents set E
    struct MinHeap* minHeap = createMinHeap(V);
 
    // Initialize min heap with all vertices. Key value of
    // all vertices (except 0th vertex) is initially
    // infinite
    for (int v = 1; v < V; ++v) {
        parent[v] = -1;
        key[v] = INT_MAX;
        minHeap->array[v] = newMinHeapNode(v_._ key[v]);
        minHeap->pos[v] = v;
    }
 
    // Make key value of 0th vertex as 0 so that it
    // is extracted first
    key[0] = 0;
    minHeap->array[0] = newMinHeapNode(0_._ key[0]);
    minHeap->pos[0] = 0;
 
    // Initially size of min heap is equal to V
    minHeap->size = V;
 
    // In the following loop_._ min heap contains all nodes
    // not yet added to MST.
    while (!isEmpty(minHeap)) {
        // Extract the vertex with minimum key value
        struct MinHeapNode* minHeapNode
            = extractMin(minHeap);
        int u
            = minHeapNode
                  ->v; // Store the extracted vertex number
 
        // Traverse through all adjacent vertices of u (the
        // extracted vertex) and update their key values
        struct AdjListNode* pCrawl = graph->array[u].head;
        while (pCrawl != NULL) {
            int v = pCrawl->dest;
 
            // If v is not yet included in MST and weight of
            // u-v is less than key value of v_._ then update
            // key value and parent of v
            if (isInMinHeap(minHeap_._ v)
                && pCrawl->weight < key[v]) {
                key[v] = pCrawl->weight;
                parent[v] = u;
                decreaseKey(minHeap_._ v_._ key[v]);
            }
            pCrawl = pCrawl->next;
        }
    }
 
    // print edges of MST
    printArr(parent_._ V);
}
 
// Driver program to test above functions
int main()
{
    // Let us create the graph given in above figure
    int V = 9;
    struct Graph* graph = createGraph(V);
    addEdge(graph_._ 0_._ 1_._ 4);
    addEdge(graph_._ 0_._ 7_._ 8);
    addEdge(graph_._ 1_._ 2_._ 8);
    addEdge(graph_._ 1_._ 7_._ 11);
    addEdge(graph_._ 2_._ 3_._ 7);
    addEdge(graph_._ 2_._ 8_._ 2);
    addEdge(graph_._ 2_._ 5_._ 4);
    addEdge(graph_._ 3_._ 4_._ 9);
    addEdge(graph_._ 3_._ 5_._ 14);
    addEdge(graph_._ 4_._ 5_._ 10);
    addEdge(graph_._ 5_._ 6_._ 2);
    addEdge(graph_._ 6_._ 7_._ 1);
    addEdge(graph_._ 6_._ 8_._ 6);
    addEdge(graph_._ 7_._ 8_._ 7);
 
    PrimMST(graph);
 
    return 0;
}"
585, C++ Program for Dijkstra’s shortest path algorithm,"#include <iostream>
using namespace std;
#include <limits.h>
 
// Number of vertices in the graph
#define V 9
 
// A utility function to find the vertex with minimum
// distance value_._ from the set of vertices not yet included
// in shortest path tree
int minDistance(int dist[]_._ bool sptSet[])
{
 
    // Initialize min value
    int min = INT_MAX_._ min_index;
 
    for (int v = 0; v < V; v++)
        if (sptSet[v] == false && dist[v] <= min)
            min = dist[v]_._ min_index = v;
 
    return min_index;
}
 
// A utility function to print the constructed distance
// array
void printSolution(int dist[])
{
    cout << ""Vertex \t Distance from Source"" << endl;
    for (int i = 0; i < V; i++)
        cout << i << "" \t\t\t\t"" << dist[i] << endl;
}
 
// Function that implements Dijkstra's single source
// shortest path algorithm for a graph represented using
// adjacency matrix representation
void dijkstra(int graph[V][V]_._ int src)
{
    int dist[V]; // The output array.  dist[i] will hold the
                 // shortest
    // distance from src to i
 
    bool sptSet[V]; // sptSet[i] will be true if vertex i is
                    // included in shortest
    // path tree or shortest distance from src to i is
    // finalized
 
    // Initialize all distances as INFINITE and stpSet[] as
    // false
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX_._ sptSet[i] = false;
 
    // Distance of source vertex from itself is always 0
    dist[src] = 0;
 
    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum distance vertex from the set of
        // vertices not yet processed. u is always equal to
        // src in the first iteration.
        int u = minDistance(dist_._ sptSet);
 
        // Mark the picked vertex as processed
        sptSet[u] = true;
 
        // Update dist value of the adjacent vertices of the
        // picked vertex.
        for (int v = 0; v < V; v++)
 
            // Update dist[v] only if is not in sptSet_._
            // there is an edge from u to v_._ and total
            // weight of path from src to  v through u is
            // smaller than current value of dist[v]
            if (!sptSet[v] && graph[u][v]
                && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }
 
    // print the constructed distance array
    printSolution(dist);
}
 
// driver's code
int main()
{
 
    /* Let us create the example graph discussed above */
    int graph[V][V] = { { 0_._ 4_._ 0_._ 0_._ 0_._ 0_._ 0_._ 8_._ 0 }_._
                        { 4_._ 0_._ 8_._ 0_._ 0_._ 0_._ 0_._ 11_._ 0 }_._
                        { 0_._ 8_._ 0_._ 7_._ 0_._ 4_._ 0_._ 0_._ 2 }_._
                        { 0_._ 0_._ 7_._ 0_._ 9_._ 14_._ 0_._ 0_._ 0 }_._
                        { 0_._ 0_._ 0_._ 9_._ 0_._ 10_._ 0_._ 0_._ 0 }_._
                        { 0_._ 0_._ 4_._ 14_._ 10_._ 0_._ 2_._ 0_._ 0 }_._
                        { 0_._ 0_._ 0_._ 0_._ 0_._ 2_._ 0_._ 1_._ 6 }_._
                        { 8_._ 11_._ 0_._ 0_._ 0_._ 0_._ 1_._ 0_._ 7 }_._
                        { 0_._ 0_._ 2_._ 0_._ 0_._ 0_._ 6_._ 7_._ 0 } };
 
    // Function call
    dijkstra(graph_._ 0);
 
    return 0;
}"
586, C++ Program for Dijkstra’s Algorithm for Adjacency List Representation,"#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
 
// A structure to represent a
// node in adjacency list
struct AdjListNode
{
    int dest;
    int weight;
    struct AdjListNode* next;
};
 
// A structure to represent
// an adjacency list
struct AdjList
{
     
   // Pointer to head node of list
   struct AdjListNode *head;
};
 
// A structure to represent a graph.
// A graph is an array of adjacency lists.
// Size of array will be V (number of
// vertices in graph)
struct Graph
{
    int V;
    struct AdjList* array;
};
 
// A utility function to create
// a new adjacency list node
struct AdjListNode* newAdjListNode(
                   int dest_._ int weight)
{
    struct AdjListNode* newNode =
            (struct AdjListNode*)
      malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->weight = weight;
    newNode->next = NULL;
    return newNode;
}
 
// A utility function that creates
// a graph of V vertices
struct Graph* createGraph(int V)
{
    struct Graph* graph = (struct Graph*)
            malloc(sizeof(struct Graph));
    graph->V = V;
 
    // Create an array of adjacency lists. 
    // Size of array will be V
    graph->array = (struct AdjList*)
       malloc(V * sizeof(struct AdjList));
 
    // Initialize each adjacency list
    // as empty by making head as NULL
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;
 
    return graph;
}
 
// Adds an edge to an undirected graph
void addEdge(struct Graph* graph_._ int src_._
                   int dest_._ int weight)
{
    // Add an edge from src to dest. 
    // A new node is added to the adjacency
    // list of src.  The node is
    // added at the beginning
    struct AdjListNode* newNode =
            newAdjListNode(dest_._ weight);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
 
    // Since graph is undirected_._
    // add an edge from dest to src also
    newNode = newAdjListNode(src_._ weight);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}
 
// Structure to represent a min heap node
struct MinHeapNode
{
    int  v;
    int dist;
};
 
// Structure to represent a min heap
struct MinHeap
{
     
    // Number of heap nodes present currently
    int size;    
   
    // Capacity of min heap
    int capacity; 
   
    // This is needed for decreaseKey()
    int *pos;   
    struct MinHeapNode **array;
};
 
// A utility function to create a
// new Min Heap Node
struct MinHeapNode* newMinHeapNode(int v_._
                                 int dist)
{
    struct MinHeapNode* minHeapNode =
           (struct MinHeapNode*)
      malloc(sizeof(struct MinHeapNode));
    minHeapNode->v = v;
    minHeapNode->dist = dist;
    return minHeapNode;
}
 
// A utility function to create a Min Heap
struct MinHeap* createMinHeap(int capacity)
{
    struct MinHeap* minHeap =
         (struct MinHeap*)
      malloc(sizeof(struct MinHeap));
    minHeap->pos = (int *)malloc(
            capacity * sizeof(int));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array =
         (struct MinHeapNode**)
                 malloc(capacity *
       sizeof(struct MinHeapNode*));
    return minHeap;
}
 
// A utility function to swap two
// nodes of min heap.
// Needed for min heapify
void swapMinHeapNode(struct MinHeapNode** a_._
                     struct MinHeapNode** b)
{
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}
 
// A standard function to
// heapify at given idx
// This function also updates
// position of nodes when they are swapped.
// Position is needed for decreaseKey()
void minHeapify(struct MinHeap* minHeap_._
                                  int idx)
{
    int smallest_._ left_._ right;
    smallest = idx;
    left = 2 * idx + 1;
    right = 2 * idx + 2;
 
    if (left < minHeap->size &&
        minHeap->array[left]->dist <
         minHeap->array[smallest]->dist )
      smallest = left;
 
    if (right < minHeap->size &&
        minHeap->array[right]->dist <
         minHeap->array[smallest]->dist )
      smallest = right;
 
    if (smallest != idx)
    {
        // The nodes to be swapped in min heap
        MinHeapNode *smallestNode =
             minHeap->array[smallest];
        MinHeapNode *idxNode =
                 minHeap->array[idx];
 
        // Swap positions
        minHeap->pos[smallestNode->v] = idx;
        minHeap->pos[idxNode->v] = smallest;
 
        // Swap nodes
        swapMinHeapNode(&minHeap->array[smallest]_._
                         &minHeap->array[idx]);
 
        minHeapify(minHeap_._ smallest);
    }
}
 
// A utility function to check if
// the given minHeap is empty or not
int isEmpty(struct MinHeap* minHeap)
{
    return minHeap->size == 0;
}
 
// Standard function to extract
// minimum node from heap
struct MinHeapNode* extractMin(struct MinHeap*
                                   minHeap)
{
    if (isEmpty(minHeap))
        return NULL;
 
    // Store the root node
    struct MinHeapNode* root =
                   minHeap->array[0];
 
    // Replace root node with last node
    struct MinHeapNode* lastNode =
         minHeap->array[minHeap->size - 1];
    minHeap->array[0] = lastNode;
 
    // Update position of last node
    minHeap->pos[root->v] = minHeap->size-1;
    minHeap->pos[lastNode->v] = 0;
 
    // Reduce heap size and heapify root
    --minHeap->size;
    minHeapify(minHeap_._ 0);
 
    return root;
}
 
// Function to decreasekey dist value
// of a given vertex v. This function
// uses pos[] of min heap to get the
// current index of node in min heap
void decreaseKey(struct MinHeap* minHeap_._
                         int v_._ int dist)
{
    // Get the index of v in  heap array
    int i = minHeap->pos[v];
 
    // Get the node and update its dist value
    minHeap->array[i]->dist = dist;
 
    // Travel up while the complete
    // tree is not heapified.
    // This is a O(Logn) loop
    while (i && minHeap->array[i]->dist <
           minHeap->array[(i - 1) / 2]->dist)
    {
        // Swap this node with its parent
        minHeap->pos[minHeap->array[i]->v] =
                                      (i-1)/2;
        minHeap->pos[minHeap->array[
                             (i-1)/2]->v] = i;
        swapMinHeapNode(&minHeap->array[i]_._ 
                 &minHeap->array[(i - 1) / 2]);
 
        // move to parent index
        i = (i - 1) / 2;
    }
}
 
// A utility function to check if a given vertex
// 'v' is in min heap or not
bool isInMinHeap(struct MinHeap *minHeap_._ int v)
{
   if (minHeap->pos[v] < minHeap->size)
     return true;
   return false;
}
 
// A utility function used to print the solution
void printArr(int dist[]_._ int n)
{
    printf(""Vertex   Distance from Source\n"");
    for (int i = 0; i < n; ++i)
        printf(""%d \t\t %d\n""_._ i_._ dist[i]);
}
 
// The main function that calculates
// distances of shortest paths from src to all
// vertices. It is a O(ELogV) function
void dijkstra(struct Graph* graph_._ int src)
{
     
    // Get the number of vertices in graph
    int V = graph->V;
   
    // dist values used to pick
    // minimum weight edge in cut
    int dist[V];    
 
    // minHeap represents set E
    struct MinHeap* minHeap = createMinHeap(V);
 
    // Initialize min heap with all
    // vertices. dist value of all vertices
    for (int v = 0; v < V; ++v)
    {
        dist[v] = INT_MAX;
        minHeap->array[v] = newMinHeapNode(v_._
                                      dist[v]);
        minHeap->pos[v] = v;
    }
 
    // Make dist value of src vertex
    // as 0 so that it is extracted first
    minHeap->array[src] =
          newMinHeapNode(src_._ dist[src]);
    minHeap->pos[src]   = src;
    dist[src] = 0;
    decreaseKey(minHeap_._ src_._ dist[src]);
 
    // Initially size of min heap is equal to V
    minHeap->size = V;
 
    // In the following loop_._
    // min heap contains all nodes
    // whose shortest distance
    // is not yet finalized.
    while (!isEmpty(minHeap))
    {
        // Extract the vertex with
        // minimum distance value
        struct MinHeapNode* minHeapNode =
                     extractMin(minHeap);
       
        // Store the extracted vertex number
        int u = minHeapNode->v;
 
        // Traverse through all adjacent
        // vertices of u (the extracted
        // vertex) and update
        // their distance values
        struct AdjListNode* pCrawl =
                     graph->array[u].head;
        while (pCrawl != NULL)
        {
            int v = pCrawl->dest;
 
            // If shortest distance to v is
            // not finalized yet_._ and distance to v
            // through u is less than its
            // previously calculated distance
            if (isInMinHeap(minHeap_._ v) &&
                      dist[u] != INT_MAX &&
              pCrawl->weight + dist[u] < dist[v])
            {
                dist[v] = dist[u] + pCrawl->weight;
 
                // update distance
                // value in min heap also
                decreaseKey(minHeap_._ v_._ dist[v]);
            }
            pCrawl = pCrawl->next;
        }
    }
 
    // print the calculated shortest distances
    printArr(dist_._ V);
}
 
 
// Driver program to test above functions
int main()
{
    // create the graph given in above figure
    int V = 9;
    struct Graph* graph = createGraph(V);
    addEdge(graph_._ 0_._ 1_._ 4);
    addEdge(graph_._ 0_._ 7_._ 8);
    addEdge(graph_._ 1_._ 2_._ 8);
    addEdge(graph_._ 1_._ 7_._ 11);
    addEdge(graph_._ 2_._ 3_._ 7);
    addEdge(graph_._ 2_._ 8_._ 2);
    addEdge(graph_._ 2_._ 5_._ 4);
    addEdge(graph_._ 3_._ 4_._ 9);
    addEdge(graph_._ 3_._ 5_._ 14);
    addEdge(graph_._ 4_._ 5_._ 10);
    addEdge(graph_._ 5_._ 6_._ 2);
    addEdge(graph_._ 6_._ 7_._ 1);
    addEdge(graph_._ 6_._ 8_._ 6);
    addEdge(graph_._ 7_._ 8_._ 7);
 
    dijkstra(graph_._ 0);
 
    return 0;
}"
587, C++ Program for Graph Coloring,"#include <iostream>
#include <list>
using namespace std;
  
// A class that represents an undirected graph
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // A dynamic array of adjacency lists
public:
    // Constructor and destructor
    Graph(int V)   { this->V = V; adj = new list<int>[V]; }
    ~Graph()       { delete [] adj; }
  
    // function to add an edge to graph
    void addEdge(int v_._ int w);
  
    // Prints greedy coloring of the vertices
    void greedyColoring();
};
  
void Graph::addEdge(int v_._ int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);  // Note: the graph is undirected
}
  
// Assigns colors (starting from 0) to all vertices and prints
// the assignment of colors
void Graph::greedyColoring()
{
    int result[V];
  
    // Assign the first color to first vertex
    result[0]  = 0;
  
    // Initialize remaining V-1 vertices as unassigned
    for (int u = 1; u < V; u++)
        result[u] = -1;  // no color is assigned to u
  
    // A temporary array to store the available colors. True
    // value of available[cr] would mean that the color cr is
    // assigned to one of its adjacent vertices
    bool available[V];
    for (int cr = 0; cr < V; cr++)
        available[cr] = false;
  
    // Assign colors to remaining V-1 vertices
    for (int u = 1; u < V; u++)
    {
        // Process all adjacent vertices and flag their colors
        // as unavailable
        list<int>::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
            if (result[*i] != -1)
                available[result[*i]] = true;
  
        // Find the first available color
        int cr;
        for (cr = 0; cr < V; cr++)
            if (available[cr] == false)
                break;
  
        result[u] = cr; // Assign the found color
  
        // Reset the values back to false for the next iteration
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
            if (result[*i] != -1)
                available[result[*i]] = false;
    }
  
    // print the result
    for (int u = 0; u < V; u++)
        cout << ""Vertex "" << u << "" --->  Color ""
             << result[u] << endl;
}
  
// Driver program to test above function
int main()
{
    Graph g1(5);
    g1.addEdge(0_._ 1);
    g1.addEdge(0_._ 2);
    g1.addEdge(1_._ 2);
    g1.addEdge(1_._ 3);
    g1.addEdge(2_._ 3);
    g1.addEdge(3_._ 4);
    cout << ""Coloring of graph 1 \n"";
    g1.greedyColoring();
  
    Graph g2(5);
    g2.addEdge(0_._ 1);
    g2.addEdge(0_._ 2);
    g2.addEdge(1_._ 2);
    g2.addEdge(1_._ 4);
    g2.addEdge(2_._ 4);
    g2.addEdge(4_._ 3);
    cout << ""\nColoring of graph 2 \n"";
    g2.greedyColoring();
  
    return 0;
}"
588, C++ Program for Rearrange a string so that all same characters become d distance away,"#include <bits/stdc++.h>
#include <iostream>
using namespace std;
typedef pair<char_._ int> PAIR;
 
// Comparator of priority_queue
struct cmp {
    bool operator()(const PAIR& a_._ const PAIR& b)
    {
        if(a.second < b.second) return true;
          else if(a.second > b.second) return false;
          else return a.first > b.first;
    }
};
 
void rearrange(char* str_._ int d)
{
    // Length of the string
    int n = strlen(str);
 
    // A structure to store a character and its frequency
    unordered_map<char_._ int> m;
 
    // Traverse the input string and store frequencies of
    // all characters.
    for (int i = 0; i < n; i++) {
        m[str[i]]++;
        str[i] = '\0';
    }
 
    // max-heap
    priority_queue<PAIR_._ vector<PAIR>_._ cmp> pq(m.begin()_._
                                               m.end());
 
    // Now one by one extract all distinct characters from
    // heap and put them back in str[] with the d
    // distance constraint
    while (pq.empty() == false) {
        char x = pq.top().first;
         
          // Find the first available position in str[]
          int p = 0;
        while (str[p] != '\0')
            p++;
           
          // Fill x at p_._ p+d_._ p+2d_._ .. p+(frequency-1)d
        for (int k = 0; k < pq.top().second; k++) {
           
              // If the index goes beyond size_._ then string
            // cannot be rearranged.
            if (p + d * k >= n) {
                cout << ""Cannot be rearranged"";
                exit(0);
            }
            str[p + d * k] = x;
        }
        pq.pop();
    }
}
 
// Driver Code
int main()
{
    char str[] = ""aabbcc"";
   
      // Function call
    rearrange(str_._ 3);
    cout << str;
}"
589,Say “Hello_._ World!” With C++ ,"#include <iostream>
#include <cstdio>
using namespace std;

int main() {
    cout << ""Hello_._ World!"" ;
    return 0;
}"
590,Input and Output in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
   int a_._b_._c;
   cin >> a >> b >> c ; 
   int sum = a+b+c;
   cout << sum ;
    return 0;
}"
591,Basic Data Types in C++ ,"#include <iostream>
#include <cstdio>
#include <iomanip> 
using namespace std;

int main() {
    
    int a;
    long b;
    char c;
    float d;
    double e;
    cin >> a >> b >> c >> d >> e;
    cout<< a << '\n' << b << '\n' << c << '\n';
    cout << std::fixed << std::setprecision(3) << d << '\n';
    cout << std::fixed << std::setprecision(9) << e << '\n';
    
    return 0;
}"
592,Conditional Statements in C++ ,"#include &lt;bits/stdc++.h&gt;
using namespace std;

int main()
{
    int n;
    cin &gt;&gt; n;
    cin.ignore(numeric_limits&lt;streamsize&gt;::max()_._ '\n');

    // Write Your Code Here
     string word[10] = {"""" _._ ""one"" _._ ""two"" _._ ""three"" _._ ""four"" _._ ""five"" _._ ""six"" _._""seven"" _._ ""eight"" _._ ""nine"" };
        
    if(n&gt;=1 &amp;&amp; n&lt;=9)
    {
        cout &lt;&lt; word[n];
    }
    else
        cout &lt;&lt; ""Greater than 9"";
    return 0;
}"
593,For Loop in C++ ,"#include &lt;iostream&gt;
#include &lt;cstdio&gt;
using namespace std;

int main() {
    // Complete the code.
     int a_._b;
    cin &gt;&gt; a &gt;&gt; b;
    for(int i = a ; i&lt;=b ; i++)
    {
        if((a&gt;=1 &amp;&amp; a&lt;=9))
        {
            string name[10]={""""_._""one""_._""two""_._""three""_._""four""_._""five""_._""six""_._""seven""_._""eight""_._""nine""};
            for(;a&lt;=b;a++)
            {
                if(a&lt;=9)
             cout &lt;&lt; name[a] &lt;&lt;""\n"";
             if(a&gt;9)
        {
            for(;a&lt;=b;a++)
            {
                if(a%2==0)
             cout &lt;&lt; ""even\n"" ;
               if(a%2==1)
              cout &lt;&lt; ""odd\n"";
            }
            }
        }
        
        }
    }
    
    return 0;
}"
594,Functions in C++ ,"#include <iostream>
#include <cstdio>
using namespace std;

/*
Add `int max_of_four(int a_._ int b_._ int c_._ int d)` here.
  
*/
  int max_of_four(int a_._ int b_._ int c_._ int d)
  {
      if(a>b && a>c && a>d)
      {
          return a;
      }
      else if(b>c && b>d)
      {
          return b;
      }
      else if(c>d)
      {
          return c;
      }
      else
         return d;
  }
int main() {
    int a_._ b_._ c_._ d;
    scanf(""%d %d %d %d""_._ &a_._ &b_._ &c_._ &d);
    int ans = max_of_four(a_._ b_._ c_._ d);
    printf(""%d""_._ ans);
    
    return 0;
}"
595,Pointer in C++ ,"#include <stdio.h>

void update(int *a_._int *b) {
    // Complete this function  
    int sum = *a+*b;
    int mult;
    if(*a>*b)
    {
         mult = *a-*b;
    }  
    else
    {
        mult = *b-*a;
    }
     *a = sum;
   *b = mult;
}

int main() {
    int a_._ b;
    int *pa = &a_._ *pb = &b;
    
    scanf(""%d %d""_._ &a_._ &b);
    update(pa_._ pb);
    printf(""%d\n%d""_._ a_._ b);

    return 0;
}"
596,Arrays Introduction in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n ;
    cin >> n;
    int a[n] ;
    for(int i =  0 ; i<n ;i++)
    {
        cin >> a[i];
    }
    for(int i=n-1 ; i>=0 ; i--)
    {
        cout << a[i] << "" "";
    }

    return 0;
}"
597,Variable Sized Arrays in C++ ,"#include <iostream>
#include <vector>

using namespace std;

int main() {
    // get length of array 'a' and number of queries
    int n_._ q;
    cin >> n >> q;

    // create vector of vectors
    vector<vector<int>> a(n);

    // fill each 2D vector i with k_i values
    for (int i = 0; i < n; i++) {
        // get the length k of the vector at a[i]
        int k;
        cin >> k;

        // fill the vector with k values
        a[i].resize(k);
        for (int j = 0; j < k; j++) {
            cin >> a[i][j];
        }
    }

    // run queries on a
    for (int q_num = 0; q_num < q; q_num++) {
        // get i_._ j as the 'query' to get a value from a
        int i_._ j;
        cin >> i >> j;
        cout << a[i][j] << endl;
    }

    return 0;
}"
598,Attribute Parser in C++ ,"#include <bits/stdc++.h>
using namespace std;

int main()
{
int n_._ q_._i;
cin>>n>>q;
string temp;
vector<string> hrml;
vector<string> quer;
cin.ignore();

for(i=0;i<n;i++)
{
    getline(cin_._temp);
    hrml.push_back(temp);
}
for(i=0;i<q;i++)
{
    getline(cin_._temp);
    quer.push_back(temp);
}

map<string_._ string> m;
vector<string> tag;

for(i=0;i<n;i++)
{
    temp=hrml[i];
    temp.erase(remove(temp.begin()_._ temp.end()_._ '\""' )_._temp.end());
    temp.erase(remove(temp.begin()_._ temp.end()_._ '>' )_._temp.end());

    if(temp.substr(0_._2)==""</"")
    {
        tag.pop_back();
    }
    else
    {
        stringstream ss;
        ss.str("""");
        ss<<temp;
        string t1_._p1_._v1;
        char ch;
        ss>>ch>>t1>>p1>>ch>>v1;
        string temp1="""";
        if(tag.size()>0)
        {
            temp1=*tag.rbegin();
            temp1=temp1+"".""+t1;
        }
        else
            temp1=t1;
        tag.push_back(temp1);
        m[*tag.rbegin()+""~""+p1]=v1;
        while(ss)
        {
            ss>>p1>>ch>>v1;
            m[*tag.rbegin()+""~""+p1]=v1;
        }
    }

}

for(i=0;i<q;i++){
    if (m.find(quer[i]) == m.end())
        cout << ""Not Found!\n"";
    else
        cout<<m[quer[i]]<<endl;
}
return 0;

}"
599,StringStream in C++ ,"#include <sstream>
#include <vector>
#include <iostream>
using namespace std;

vector<int> parseInts(string str) {
    // Complete this function
    stringstream ss(str);
    
char ch;
vector<int> ans;
int temp;
while(ss >> temp){
    ans.push_back(temp);
    ss >> ch;
}

return ans;
}

int main() {
    string str;
    cin >> str;
    vector<int> integers = parseInts(str);
    for(int i = 0; i < integers.size(); i++) {
        cout << integers[i] << ""\n"";
    }
    
    return 0;
}"
600,Strings in C++ ,"#include <iostream>
#include <string>
using namespace std;

int main() {
    // Complete the program
    string a_._b;
    cin >> a >> b ;
    int l_of_a = a.size();
    int l_of_b = b.size();
    cout << l_of_a <<"" ""<<l_of_b << endl;
    cout << a << b << endl;
    char c1 = a[0];
    char c2 = b[0];
    a[0] = c2;
    b[0] = c1;
    cout << a <<"" ""<<b;
    return 0;
}"
601,Structs in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

/*
    add code for struct here.
*/
struct Student
{
 int age; 
 string first_name;
 string last_name;
 int standard;
};

int main() {
    Student st;
    
    cin >> st.age >> st.first_name >> st.last_name >> st.standard;
    cout << st.age << "" "" << st.first_name << "" "" << st.last_name << "" "" << st.standard;
    
    return 0;
}"
602,Class in C++ ,"#include <iostream>
#include <sstream>
using namespace std;

/*
Enter code for the class Student here.
Read statement for specification.
*/
class Student{
    private:
         int age;
         string fname;
         string lname;
         int std;
    public:
          void set_age(int Age){
              age = Age;
          }
          int get_age(){
              return age;
          }
        void set_standard(int standard){
            std = standard;
        }
        int get_standard(){
            return std;
        }
        void set_first_name(string first_name){
            fname = first_name;
        }
        string get_first_name(){
            return fname;
        }
        void set_last_name(string last_name){
            lname = last_name;
        }
        string get_last_name(){
            return lname;
        }
        string to_string(){
            stringstream ss;
            char ch='_._';
            ss << age << ch << fname << ch << lname << ch << std ;
            return ss.str();
        }

};

int main() {
    int age_._ standard;
    string first_name_._ last_name;
    
    cin >> age >> first_name >> last_name >> standard;
    
    Student st;
    st.set_age(age);
    st.set_standard(standard);
    st.set_first_name(first_name);
    st.set_last_name(last_name);
    
    cout << st.get_age() << ""\n"";
    cout << st.get_last_name() << ""_._ "" << st.get_first_name() << ""\n"";
    cout << st.get_standard() << ""\n"";
    cout << ""\n"";
    cout << st.to_string();
    
    return 0;
}"
603,Classes and Objects in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;

// Write your Student class here
class Student{
    private:int scores[5];
    public:int sum=0;
    public:
       void input()
        {
            for(int i=0;i<5;i++)
            {
                cin >> scores[i];
                sum+=scores[i];
            }
        }
        int calculateTotalScore(){
            return sum;
        }

};

int main() {
    int n; // number of students
    cin >> n;
    Student *s = new Student[n]; // an array of n students
    
    for(int i = 0; i < n; i++){
        s[i].input();
    }

    // calculate kristen's score
    int kristen_score = s[0].calculateTotalScore();

    // determine how many students scored higher than kristen
    int count = 0; 
    for(int i = 1; i < n; i++){
        int total = s[i].calculateTotalScore();
        if(total > kristen_score){
            count++;
        }
    }

    // print result
    cout << count;
    
    return 0;
}"
604,Box It! in C++ ,"#include<bits/stdc++.h>

using namespace std;
//Implement the class Box  
//l_._b_._h are integers representing the dimensions of the box

// The class should have the following functions : 

// Constructors: 
// Box();
// Box(int_._int_._int);
// Box(Box);


// int getLength(); // Return box's length
// int getBreadth (); // Return box's breadth
// int getHeight ();  //Return box's height
// long long CalculateVolume(); // Return the volume of the box

//Overload operator < as specified
//bool operator<(Box& b)

//Overload operator << as specified
//ostream& operator<<(ostream& out_._ Box& B)
class Box{
    private :
            int l_._b_._h;
    public:
    Box(){l=b=h=0;}
    Box(int len_._int br_._int hg){
        l = len;
        b = br;
        h = hg;
    }
    Box(const Box& B){
        l = B.l;
        b = B.b;
        h = B.h;
    }
        int getLenght(){
        return l;
    }
    int getBreadth(){
        return b;
    }
    int getHeight(){
        return h;
    }
    long long CalculateVolume(){
        return (long long)l*b*h;
    }
    friend bool operator < ( Box&A_._Box& B){
        if( (A.l < B.l) || ((A.b < B.b) && (A.l == B.l)) || ((A.h < B.h) && (A.l == B.l) && (A.b == B.b)) ){
            return true;
        }else{
            return false;
        }
    };
    
    friend ostream& operator<< (ostream& output_._ const Box& B){
        output << B.l << "" "" << B.b << "" "" << B.h;
        return output;
    }
};


void check2()
{
    int n;
    cin>>n;
    Box temp;
    for(int i=0;i<n;i++)
    {
        int type;
        cin>>type;
        if(type ==1)
        {
            cout<<temp<<endl;
        }
        if(type == 2)
        {
            int l_._b_._h;
            cin>>l>>b>>h;
            Box NewBox(l_._b_._h);
            temp=NewBox;
            cout<<temp<<endl;
        }
        if(type==3)
        {
            int l_._b_._h;
            cin>>l>>b>>h;
            Box NewBox(l_._b_._h);
            if(NewBox<temp)
            {
                cout<<""Lesser\n"";
            }
            else
            {
                cout<<""Greater\n"";
            }
        }
        if(type==4)
        {
            cout<<temp.CalculateVolume()<<endl;
        }
        if(type==5)
        {
            Box NewBox(temp);
            cout<<NewBox<<endl;
        }

    }
}

int main()
{
    check2();
}"
605,Inherited Code in C++ ,"#include <iostream>
#include <string>
#include <sstream>
#include <exception>
using namespace std;

/* Define the exception here */
class BadLengthException {
    private: 
        int n;
    public:
        BadLengthException(int errornumber) {
            n = errornumber;
        }
    
        int what() {return n;}
};


bool checkUsername(string username) {
    bool isValid = true;
    int n = username.length();
    if(n < 5) {
        throw BadLengthException(n);
    }
    for(int i = 0; i < n-1; i++) {
        if(username[i] == 'w' && username[i+1] == 'w') {
            isValid = false;
        }
    }
    return isValid;
}

int main() {
    int T; cin >> T;
    while(T--) {
        string username;
        cin >> username;
        try {
            bool isValid = checkUsername(username);
            if(isValid) {
                cout << ""Valid"" << '\n';
            } else {
                cout << ""Invalid"" << '\n';
            }
        } catch (BadLengthException e) {
            cout << ""Too short: "" << e.what() << '\n';
        }
    }
    return 0;
}"
606,Exceptional Server in C++ ,"#include <iostream>
#include <exception>
#include <string>
#include <stdexcept>
#include <vector>
#include <cmath>
using namespace std;

class Server {
private:
    static int load;
public:
    static int compute(long long A_._ long long B) {
        load += 1;
        if(A < 0) {
            throw std::invalid_argument(""A is negative"");
        }
        vector<int> v(A_._ 0);
        int real = -1_._ cmplx = sqrt(-1);
        if(B == 0) throw 0;
        real = (A/B)*real;
        int ans = v.at(B);
        return real + A - B*ans;
    }
    static int getLoad() {
        return load;
    }
};
int Server::load = 0;

int main() {
    int T; cin >> T;
    while(T--) {
        long long A_._ B;
        cin >> A >> B;

        /* Enter your code here. */
       try {
            cout << Server::compute(A_._B) << endl;
        } 
        catch (bad_alloc& error) {
            cout << ""Not enough memory"" << endl;
        }
        catch (exception& error) {
            cout << ""Exception: "" << error.what() << endl;
        }
        catch (...) {
            cout << ""Other Exception"" << endl;
        }

    }
    cout << Server::getLoad() << endl;
    return 0;
}"
607,Virtual Functions in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
class Person {
public:
    string name;
    int age;
    virtual void getdata() {
        cin >> this->name >> this->age;
    }
    virtual void putdata() {
        cout << this->name << "" "" << this->age << endl;
    }
};

class Professor : public Person {
public:
    Professor() {
        this->cur_id = ++id;
    }
    int publications;
    static int id;
    int cur_id;
    void getdata() {
        cin >> this->name >> this->age >> this->publications;
    }
    void putdata() {
        cout << this->name << "" ""
            << this->age << "" ""
            << this->publications << "" ""
            << this->cur_id << endl;
    }
};
int Professor::id = 0;

class Student : public Person {
#define NUM_OF_MARKS 6
public:
    Student() {
        this->cur_id = ++id;
    }
    int marks[NUM_OF_MARKS];
    static int id;
    int cur_id;
    void getdata() {
        cin >> this->name >> this->age;
        for (int i=0; i<NUM_OF_MARKS; i++) {
            cin >> marks[i];
        }
    }
    void putdata() {
        int marksSum = 0;
        for (int i=0; i<NUM_OF_MARKS; i++) {
            marksSum += marks[i];
        }
        cout << this->name << "" ""
            << this->age << "" ""
            << marksSum << "" ""
            << this->cur_id << endl;
    }
};
int Student::id = 0;

int main(){

    int n_._ val;
    cin>>n; //The number of objects that is going to be created.
    Person *per[n];

    for(int i = 0;i < n;i++){

        cin>>val;
        if(val == 1){
            // If val is 1 current object is of type Professor
            per[i] = new Professor;

        }
        else per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.

    }

    for(int i=0;i<n;i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;

}"
608,Abstract Classes – Polymorphism in C++ ,"#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p_._ Node* n_._ int k_._ int val):prev(p)_._next(n)_._key(k)_._value(val){};
   Node(int k_._ int val):prev(NULL)_._next(NULL)_._key(k)_._value(val){};
};

class Cache{
   
   protected: 
   map<int_._Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int_._ int) = 0; //set function
   virtual int get(int) = 0; //get function

};

class LRUCache: public Cache
{
public:
    LRUCache(int c) 
    {
      cp = c;
    }

    void set(int k_._ int v) 
    {
        Node* N;

        if ( mp.empty() ) 
        {

            N = new Node(k_._v);
            tail = head = N;
            mp[k] = N;

            return;
        }
        auto it = mp.find(k);
        if ( it != mp.end() ) 
        {
            it->second->value = v;
            if ( head == it->second ) 
            {
                return;
            }
            it->second->prev->next = it->second->next;           
            if ( tail == it->second ) 
            {
                tail = tail->prev;
            }
            else 
            {               
                it->second->next->prev = it->second->prev;
            }           
            it->second->next = head;
            it->second->prev = nullptr;
            head->prev = it->second;
            head = it->second;
        }
        else 
        {
            N = new Node(head->prev_._ head_._ k_._ v);
            head->prev = N; 
            head = N;
            mp[k] = N;
            if ( mp.size() > cp ) 
            {
                tail = tail->prev;
                mp.erase(tail->next->key);
                delete tail->next; 
                tail->next = nullptr;
            }
        }
    }
    int get(int k) 
    {
        auto it = mp.find(k);
        if ( it != mp.end() ) 
        {
            return it->second->value;
        }
        
        return -1;
    }
};
int main() {
   int n_._ capacity_._i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == ""get"") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == ""set"") {
         int key_._ value;
         cin >> key >> value;
         l.set(key_._value);
      }
   }
   return 0;
}"
609,Vector-Sort in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n; cin >> n;
    vector<int> arr;
    int x;
    for(int i=0 ; i<n ;i++)
    {
        cin >> x;
        arr.push_back(x);
    }
   sort(arr.begin()_._arr.end());
    for(int i=0 ; i<arr.size();i++)
    {
        cout<< arr[i] <<' ';
    }
    return 0;
}"
610,Vector-Erase in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int n_._x_._y_._a_._b;
    vector<int> v;
     cin >> n;
    for(int i=0;i<n;i++)
    {
        cin>>x;
        v.push_back(x);
    }
    cin >> y >> a >> b;
    v.erase(v.begin()+y-1);
    v.erase(v.begin()+a-1_._v.begin()+b-1);
    cout << v.size() << '\n';
    for(int i=0 ; i<v.size() ;i++)
    {
        cout << v[i] << ' ';
    }
    return 0;
}"
611,Lower Bound-STL in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    int n_._q_._x;
    cin >> n;
    vector<int> v_._a ;
    for(int i=0 ; i<n ; i++)
    {
        cin >> x;
        v.push_back(x); 
    } 
        cin >> q;
    for(int i=0 ; i<q ;i++)
    {
        cin >> x;
        auto low = lower_bound(v.begin()_._v.end()_._x);
       if(v[low-v.begin()]==x){
           cout << ""Yes "" <<  low-v.begin()+1 << '\n';
       }
       else cout << ""No "" <<  low-v.begin()+1 << '\n';
    }

    return 0;
}"
612,Sets-STL in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <set>
#include <algorithm>
using namespace std;


int main() 
{
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */

    int n;
    set<int>s;
    for(int i=0;i<n;i++)
        {
        int a;
        cin>>a;
        s.insert(a);
        }
    cin>>n;
    for(int i=0;i<n;i++)
        {
        int q_._t;
        cin>>t>>q;
        switch(t)
            {
            case 1:
            {
                s.insert(q);
                break;
            }
            case 2:
            {
                s.erase(q);
                break;
            }
            case 3:
            {
                set<int>::iterator itr=s.find(q);
                if(itr==s.end())
                   cout<<""No""<<endl;
                else
                   cout<<""Yes""<<endl;
                break;
            }
            }
        }
    return 0;
}"
613,Maps-STL in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <set>
#include <map>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
     map<string_._int>s;

    int q;
    cin>>q;

        for(int i=0;i<q;i++)
        {
           int t_._n_._m;
            cin>>t;
            switch(t)
                {
                case 1:
                {
                    string name;
                    int marks;
                    cin>>name>>marks;
                    map<string_._int>::iterator itr=s.find(name);
                    if(itr==s.end())
                    s.insert(make_pair(name_._marks));
                    else
                    itr->second+=marks;
                    break;
                }
                case 2:
                {
                    string name;
                    cin>>name;
                    s.erase(name);
                    break;
                }
                case 3:
                {
                    string name;
                    cin>>name;
                    map<string_._int>::iterator itr=s.find(name);
                    if(itr==s.end())
                        cout<<""0""<<endl;
                    else
                        cout<<itr->second<<endl;
                    break;
                }
            }
        }
    return 0;
}"
614,Print Pretty in C++ ,"#include <iostream>
#include <iomanip> 
using namespace std;

int main() {
    int T; cin >> T;
    cout << setiosflags(ios::uppercase);
    cout << setw(0xf) << internal;
    while(T--) {
        double A; cin >> A;
        double B; cin >> B;
        double C; cin >> C;

        /* Enter your code here */
cout << resetiosflags(ios::uppercase|ios::scientific);
cout << std::setiosflags (ios::left|ios::fixed);
cout << setw(0) << std::hex;
cout << std::setiosflags (ios::showbase);
cout << (unsigned long)A << std::endl;

cout << resetiosflags(ios::showbase);
cout << setw(0xf) << setfill('_')<< std::dec ;
cout << setiosflags (ios::showpos) << setprecision(2);
cout  << B << endl;

cout << resetiosflags(ios::fixed|ios::showpos);
cout << setiosflags (ios::scientific | ios::uppercase) << setprecision(9);
cout << C << std::endl;
    }
    return 0;

}"
615,Deque-STL in C++ ,"#include <iostream>
#include <deque> 
using namespace std;

void printKMax(int arr[]_._ int n_._ int k){
    //Write your code here.
    std::deque<int>  dq(k);
    int i;
    for (i = 0; i < k; ++i) {
        while ( (!dq.empty()) && arr[i] >= arr[dq.back()])
            dq.pop_back();
 
        dq.push_back(i);
    }
 
    for ( ; i < n; ++i) {
        cout << arr[dq.front()] << "" "";
 
        while ( (!dq.empty()) && dq.front() <= i - k)
            dq.pop_front();
 
        while ( (!dq.empty()) && arr[i] >= arr[dq.back()])
            dq.pop_back();
 
        dq.push_back(i);
    }
 
    cout << arr[dq.front()] << endl;
}

int main(){
  
    int t;
    cin >> t;
    while(t>0) {
        int n_._k;
        cin >> n >> k;
        int i;
        int arr[n];
        for(i=0;i<n;i++)
              cin >> arr[i];
        printKMax(arr_._ n_._ k);
        t--;
      }
      return 0;
}"
616,Inheritance Introduction in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


class Triangle{
    public:
        void triangle(){
             cout<<""I am a triangle\n"";
        }
};

class Isosceles : public Triangle{
    public:
        void isosceles(){
            cout<<""I am an isosceles triangle\n"";
        }
          //Write your code here.
          void description()
  {
          cout<<""In an isosceles triangle two sides are equal\n"";
        }
};

int main(){
    Isosceles isc;
    isc.isosceles();
      isc.description();
    isc.triangle();
    return 0;
}"
617,Hotel Prices in C++ ,"#include <iostream>
#include <vector>

using namespace std;

class HotelRoom {
public:
    HotelRoom(int bedrooms_._ int bathrooms) 
    : bedrooms_(bedrooms)_._ bathrooms_(bathrooms) {}
    
    int get_price() {
        return 50*bedrooms_ + 100*bathrooms_;
    }
private:
    int bedrooms_;
    int bathrooms_;
};

class HotelApartment : public HotelRoom {
public:
    HotelApartment(int bedrooms_._ int bathrooms) 
    : HotelRoom(bedrooms + 2_._ bathrooms) {}

    int get_price() {
        return HotelRoom::get_price() + 100;
    }
};

int main() {
    int n;
    cin >> n;
    vector<HotelRoom*> rooms;
    for (int i = 0; i < n; ++i) {
        string room_type;
        int bedrooms;
        int bathrooms;
        cin >> room_type >> bedrooms >> bathrooms;
        if (room_type == ""standard"") {
            rooms.push_back(new HotelRoom(bedrooms_._ bathrooms));
        } else {
            rooms.push_back(new HotelApartment(bedrooms_._ bathrooms));
        }
    }

    int total_profit = 0;
    for (auto room : rooms) {
        total_profit += room->get_price();
    }
    cout << total_profit << endl;

    for (auto room : rooms) {
        delete room;
    }
    rooms.clear();

    return 0;
}"
618,Cpp exception handling in C++ ,"#include <iostream>
#include <stdexcept>

using namespace std;

int largest_proper_divisor(int n) {
    if (n == 0) {
        throw invalid_argument(""largest proper divisor is not defined for n=0"");
    }
    if (n == 1) {
        throw invalid_argument(""largest proper divisor is not defined for n=1"");
    }
    for (int i = n/2; i >= 1; --i) {
        if (n % i == 0) {
            return i;
        }
    }
    return -1; // will never happen
}

void process_input(int n) {
    try {
        int d = largest_proper_divisor(n);
        cout << ""result="" << d << endl;        
    }
    catch(invalid_argument e){
        cout << e.what() << endl;
    }
    cout << ""returning control flow to caller"" << endl;
}



int main() {
    int n;
    cin >> n;
    process_input(n);
    return 0;
}"
619,Rectangle Area ,"#include <iostream>

using namespace std;
/*
 * Create classes Rectangle and RectangleArea
 */
class Rectangle
{
  protected:
  int width;
  int height;
    public:
    void read_input()
    {
        cin>>width>>height;
    }
     void display()
    {
    cout<<width<<"" ""<<height<<""\n"";
    } 
};
class RectangleArea :public Rectangle
{
    public:
      void display()
    {
      cout<<width * height;
    }
}; 


int main()
{
    /*
     * Declare a RectangleArea object
     */
    RectangleArea r_area;
    
    /*
     * Read the width and height
     */
    r_area.read_input();
    
    /*
     * Print the width and height
     */
    r_area.Rectangle::display();
    
    /*
     * Print the area
     */
    r_area.display();
    
    return 0;
}"
620,Multi Level Inheritance ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class Triangle{
    public:
        void triangle(){
            cout<<""I am a triangle\n"";
        }
};

class Isosceles : public Triangle{
      public:
          void isosceles(){
            cout<<""I am an isosceles triangle\n"";
          }
};

//Write your code here.
class Equilateral:public Isosceles
{
public:
void equilateral()
{
cout<<""I am an equilateral triangle\n"";
}
};

int main(){
  
    Equilateral eqr;
    eqr.equilateral();
    eqr.isosceles();
    eqr.triangle();
    return 0;
}"
621,Overloading Ostream Operator ,"#include <iostream>

using namespace std;

class Person {
public:
    Person(const string& first_name_._ const string& last_name) : first_name_(first_name)_._ last_name_(last_name) {}
    const string& get_first_name() const {
      return first_name_;
    }
    const string& get_last_name() const {
      return last_name_;
    }
private:
    string first_name_;
    string last_name_;
};
// Enter your code here.
ostream& operator<<(ostream& os_._ const Person& p) {
    os << ""first_name="" << p.get_first_name() << ""_._last_name="" << p.get_last_name();
    return os;
}"
622,Messages Order ,"#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

class Message {
private:
    string text;
    static int id;
    int current_id;
public:
    Message() { current_id = ++id; }
    Message(string t){ current_id = ++id; text=t; }
    const string& get_text() {
        return text;
    }
    // overloaded < operator
    bool operator < (const Message& M2) {
        if(current_id < M2.current_id)
            return true;
        else
            return false;
    }
};
int Message::id = 0;

class MessageFactory {
public:
    MessageFactory() {}
    Message create_message(const string& text) {
        Message m = Message(text);
        return m;
    }
};

class Recipient {
public:
    Recipient() {}
    void receive(const Message& msg) {
        messages_.push_back(msg);
    }
    void print_messages() {
        fix_order();
        for (auto& msg : messages_) {
            cout << msg.get_text() << endl;
        }
        messages_.clear();
    }
private:
    void fix_order() {
        sort(messages_.begin()_._ messages_.end());
    }
    vector<Message> messages_;
};

class Network {
public:
    static void send_messages(vector<Message> messages_._ Recipient& recipient) {
    // simulates the unpredictable network_._ where sent messages might arrive in unspecified order
        random_shuffle(messages.begin()_._ messages.end());         
        for (auto msg : messages) {
            recipient.receive(msg);
        }
    }
};



int main() {
    MessageFactory message_factory;
    Recipient recipient;
    vector<Message> messages;
    string text;
    while (getline(cin_._ text)) {
        messages.push_back(message_factory.create_message(text));
    }
    Network::send_messages(messages_._ recipient);
    recipient.print_messages();
}"
623,Accessing Inherited Functions ,"#include<iostream>

using namespace std;

class A
{
    public:
        A(){
            callA = 0;
        }
    private:
        int callA;
        void inc(){
            callA++;
        }

    protected:
        void func(int & a)
        {
            a = a * 2;
            inc();
        }
    public:
        int getA(){
            return callA;
        }
};

class B
{
    public:
        B(){
            callB = 0;
        }
    private:
        int callB;
        void inc(){
            callB++;
        }
    protected:
        void func(int & a)
        {
            a = a * 3;
            inc();
        }
    public:
        int getB(){
            return callB;
        }
};

class C
{
    public:
        C(){
            callC = 0;
        }
    private:
        int callC;
        void inc(){
            callC++;
        }
    protected:
        void func(int & a)
        {
            a = a * 5;
            inc();
        }
    public:
        int getC(){
            return callC;
        }
};

class D : public A_._B_._C
{

    int val;
    public:
    //Initially val is 1
    D()
    {
        val = 1;
    }
    //Implement this function
    void update_val(int new_val)
    {
             int a = new_val;
             while(new_val!=0)
             {
                 if(val==a)
                    break;
                 if(new_val%2==0)
                 {
                     A::func(val);
                     new_val/=2;
                 }
                 else if(new_val%3==0)
                 {
                     B::func(val);
                     new_val/=3;
                 }
                 else if(new_val%5==0)
                 {
                     C::func(val);
                     new_val/=5;
                 }
             }
            
    }
    //For Checking Purpose
    void check(int); //Do not delete this line.
};



void D::check(int new_val)
{
    update_val(new_val);
    cout << ""Value = "" << val << endl << ""A's func called "" << getA() << "" times "" << endl << ""B's func called "" << getB() << "" times"" << endl << ""C's func called "" << getC() << "" times"" << endl;
}


int main()
{
    D d;
    int new_val;
    cin >> new_val;
    d.check(new_val);

}"
624,Magic Spells ,"#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Spell { 
    private:
        string scrollName;
    public:
        Spell(): scrollName("""") { }
        Spell(string name): scrollName(name) { }
        virtual ~Spell() { }
        string revealScrollName() {
            return scrollName;
        }
};

class Fireball : public Spell { 
    private: int power;
    public:
        Fireball(int power): power(power) { }
        void revealFirepower(){
            cout << ""Fireball: "" << power << endl;
        }
};

class Frostbite : public Spell {
    private: int power;
    public:
        Frostbite(int power): power(power) { }
        void revealFrostpower(){
            cout << ""Frostbite: "" << power << endl;
        }
};

class Thunderstorm : public Spell { 
    private: int power;
    public:
        Thunderstorm(int power): power(power) { }
        void revealThunderpower(){
            cout << ""Thunderstorm: "" << power << endl;
        }
};

class Waterbolt : public Spell { 
    private: int power;
    public:
        Waterbolt(int power): power(power) { }
        void revealWaterpower(){
            cout << ""Waterbolt: "" << power << endl;
        }
};

class SpellJournal {
    public:
        static string journal;
        static string read() {
            return journal;
        }
}; 
string SpellJournal::journal = """";

void counterspell(Spell *spell) {

/* Enter your code here. Read input from STDIN. Print output to STDOUT */
if (Fireball *s = dynamic_cast<Fireball *>(spell)) 
    {
        s->revealFirepower();
    } 
    else if (Frostbite *s = dynamic_cast<Frostbite *>(spell)) 
    {
        s->revealFrostpower();
    } 
    else if (Thunderstorm *s = dynamic_cast<Thunderstorm *>(spell)) 
    {
        s->revealThunderpower();
    } 
    else if (Waterbolt *s = dynamic_cast<Waterbolt *>(spell)) 
    {
        s->revealWaterpower();
    } 
    else 
    {
        string scroll_name = spell->revealScrollName();
        string journal = SpellJournal::read();
        size_t s_size = scroll_name.size();
        size_t j_size = journal.size();

        if (s_size == 1 && j_size == 1 && scroll_name == journal) 
        {
            cout << 1 << endl;
        } 
        else 
        {
            vector<vector<size_t>> lcs_table(s_size + 1_._ vector<size_t>(j_size + 1));

            for (size_t i = 1; i <= s_size; ++i) 
            {
                for (size_t j = 1; j <= j_size; ++j) 
                {
                    if (scroll_name[i - 1] == journal[j - 1]) 
                    {
                        lcs_table[i][j] = lcs_table[i - 1][j - 1] + 1;
                    } 
                    else 
                    {
                        lcs_table[i][j] = max(lcs_table[i][j - 1]_._ lcs_table[i - 1][j]);
                    } 
                }
            }
          cout << lcs_table[s_size][j_size] << endl;
        }
    }
}

class Wizard {
    public:
        Spell *cast() {
            Spell *spell;
            string s; cin >> s;
            int power; cin >> power;
            if(s == ""fire"") {
                spell = new Fireball(power);
            }
            else if(s == ""frost"") {
                spell = new Frostbite(power);
            }
            else if(s == ""water"") {
                spell = new Waterbolt(power);
            }
            else if(s == ""thunder"") {
                spell = new Thunderstorm(power);
            } 
            else {
                spell = new Spell(s);
                cin >> SpellJournal::journal;
            }
            return spell;
        }
};

int main() {
    int T;
    cin >> T;
    Wizard Arawn;
    while(T--) {
        Spell *spell = Arawn.cast();
        counterspell(spell);
    }
    return 0;
}"
625,C++ Class Template ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;
#define cin ios_base::sync_with_stdio(false);cin.tie(NULL); cin
template <class T>
class AddElements{
    T x;
    public:
        AddElements(T a){x=a;}
        T add(T b){return x+b;}
};

template<>
class AddElements<string>{
    string x;
    public:
        AddElements(string a){x=a;}
        string concatenate(string b){return x+b;}
};
int main () {
  int n_._i;
  cin >> n;
  for(i=0;i<n;i++) {
    string type;
    cin >> type;
    if(type==""float"") {
        double element1_._element2;
        cin >> element1 >> element2;
        AddElements<double> myfloat (element1);
        cout << myfloat.add(element2) << endl;
    }
    else if(type == ""int"") {
        int element1_._ element2;
        cin >> element1 >> element2;
        AddElements<int> myint (element1);
        cout << myint.add(element2) << endl;
    }
    else if(type == ""string"") {
        string element1_._ element2;
        cin >> element1 >> element2;
        AddElements<string> mystring (element1);
        cout << mystring.concatenate(element2) << endl;
    }
  }
  return 0;
}"
626,Preprocessor Solution in C++ ,"/* Enter your macros here */
#define toStr(x) #x
#define io(v) cin >> v
#define INF 100000000
#define foreach(v_._ i) for(int i = 0; i < v.size(); i++)
#define FUNCTION(name_._ op) void name(int& a_._ int b) { if (b op a) a = b; }

#include <iostream>
#include <vector>
using namespace std;

#if !defined toStr || !defined io || !defined FUNCTION || !defined INF
#error Missing preprocessor definitions
#endif 

FUNCTION(minimum_._ <)
FUNCTION(maximum_._ >)

int main(){
    int n; cin >> n;
    vector<int> v(n);
    foreach(v_._ i) {
        io(v)[i];
    }
    int mn = INF;
    int mx = -INF;
    foreach(v_._ i) {
        minimum(mn_._ v[i]);
        maximum(mx_._ v[i]);
    }
    int ans = mx - mn;
    cout << toStr(Result =) <<' '<< ans;
    return 0;

}"
627,Operator Overloading in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
class Matrix
{
public:
vector<vector<int> > a;

Matrix & operator + (const Matrix &y)
{
for (int m=0; m<y.a.size(); ++m)
{
for (int n=0; n<y.a[0].size(); ++n)
{
this->a[m][n] = this->a[m][n] + y.a[m][n];
}
}
return *this;
}

};

int main () {
   int cases_._k;
   cin >> cases;
   for(k=0;k<cases;k++) {
      Matrix x;
      Matrix y;
      Matrix result;
      int n_._m_._i_._j;
      cin >> n >> m;
      for(i=0;i<n;i++) {
         vector<int> b;
         int num;
         for(j=0;j<m;j++) {
            cin >> num;
            b.push_back(num);
         }
         x.a.push_back(b);
      }
      for(i=0;i<n;i++) {
         vector<int> b;
         int num;
         for(j=0;j<m;j++) {
            cin >> num;
            b.push_back(num);
         }
         y.a.push_back(b);
      }
      result = x+y;
      for(i=0;i<n;i++) {
         for(j=0;j<m;j++) {
            cout << result.a[i][j] << "" "";
         }
         cout << endl;
      }
   }  
   return 0;
}"
628,Overload Operators in C++ ,"//Operator Overloading

#include<iostream>

using namespace std;

class Complex
{
public:
    int a_._b;
    void input(string s)
    {
        int v1=0;
        int i=0;
        while(s[i]!='+')
        {
            v1=v1*10+s[i]-'0';
            i++;
        }
        while(s[i]==' ' || s[i]=='+'||s[i]=='i')
        {
            i++;
        }
        int v2=0;
        while(i<s.length())
        {
            v2=v2*10+s[i]-'0';
            i++;
        }
        a=v1;
        b=v2;
    }
};

//Overload operators + and << for the class complex
//+ should add two complex numbers as (a+ib) + (c+id) = (a+c) + i(b+d)
//<< should print a complex number in the format ""a+ib""

Complex operator+(const Complex & X_._ const Complex & Y) {
    Complex Z {X.a + Y.a_._ X.b + Y.b};
    return Z;
}

ostream & operator<< (ostream & out_._ const Complex & X) {
    if (X.b < 0) {
        out << X.a << ""-i"" << -X.b;
    } else if(X.b > 0) {
        out << X.a << ""+i"" << X.b;
    } else {
        out << X.a;
    }
    return out;
}

int main()
{
    Complex x_._y;
    string s1_._s2;
    cin>>s1;
    cin>>s2;
    x.input(s1);
    y.input(s2);
    Complex z=x+y;
    cout<<z<<endl;
}"
629,Attending Workshops in C++ ,"#include<bits/stdc++.h>

using namespace std;

//Define the structs Workshops and Available_Workshops.
//Implement the functions initialize and CalculateMaxWorkshops
struct Workshops{
    friend ostream &operator<<(ostream &os_._ const Workshops &obj);
    int start_time;
    int end_time;
    int duration;

    bool operator<(const Workshops &rhs){
    return (this->end_time < rhs.end_time);
    }
};

ostream &operator<<(ostream &os_._ const Workshops &obj){
    os << obj.start_time << "": "" << obj.end_time << "": ""
    << obj.duration << ""\n"";
    return os;
}

struct Available_Workshops{
    int n;
    vector<Workshops> vec;
};

Available_Workshops* initialize(int start_time[]_._ int duration[]_._ int num)
{
    Available_Workshops *avail = new Available_Workshops;
    avail->n = num;
    Workshops test;
    for(int i{0}; i < num; i++){
        test.start_time = start_time[i];
        test.duration = duration[i];
        test.end_time = start_time[i] + duration[i];
        avail->vec.push_back(test);
    }
    sort(avail->vec.begin()_._ avail->vec.end());
    return avail;
}

int CalculateMaxWorkshops(Available_Workshops *test){
    int w_count = 1;
    int test_end_time = test->vec.at(0).end_time;
    for(int i{1}; i < test->n; i++){
        if(test_end_time <= test->vec.at(i).start_time){
            w_count++;
            test_end_time = test->vec.at(i).end_time;
        }
    }
    return w_count;
}


int main(int argc_._ char *argv[]) {
    int n; // number of workshops
    cin >> n;
    // create arrays of unknown size n
    int* start_time = new int[n];
    int* duration = new int[n];

    for(int i=0; i < n; i++){
        cin >> start_time[i];
    }
    for(int i = 0; i < n; i++){
        cin >> duration[i];
    }

    Available_Workshops * ptr;
    ptr = initialize(start_time_._duration_._ n);
    cout << CalculateMaxWorkshops(ptr) << endl;
    return 0;
}"
630,C++ Class Template Specialization in C++ ,"#include <iostream>
using namespace std;
enum class Fruit { apple_._ orange_._ pear };
enum class Color { red_._ green_._ orange };

template <typename T> struct Traits;

// Define specializations for the Traits class template here.
template <> 
struct Traits<Fruit>{
    static string name(int index){
        switch(index){
                case 0:return ""apple"";
                case 1: return ""orange"" ;
                case 2: return ""pear"";
        }  
        return ""unknown"";
    } 
};
template <> 
struct Traits<Color>{
    static string name(int index){
        switch(index){
                case 0:return ""red"";
                case 1: return ""green"" ;
                case 2: return ""orange"";           
        }
        return ""unknown"";  
    } 
};



int main()
{
    int t = 0; std::cin >> t;

    for (int i=0; i!=t; ++i) {
        int index1; std::cin >> index1;
        int index2; std::cin >> index2;
        cout << Traits<Color>::name(index1) << "" "";
        cout << Traits<Fruit>::name(index2) << ""\n"";
    }
}"
631,C++ Variadics in C++ ,"#include <iostream>
using namespace std;

// Enter your code for reversed_binary_value<bool...>()
template<bool... digits>
uint64_t reversed_binary_value()
{
    uint64_t pos = 1;
    uint64_t result = 0;
    auto _ = { (result += digits * pos_._ pos <<= 1)... };
    return result;
}


template <int n_._ bool...digits>
struct CheckValues {
      static void check(int x_._ int y)
      {
        CheckValues<n-1_._ 0_._ digits...>::check(x_._ y);
        CheckValues<n-1_._ 1_._ digits...>::check(x_._ y);
      }
};

template <bool...digits>
struct CheckValues<0_._ digits...> {
      static void check(int x_._ int y)
      {
        int z = reversed_binary_value<digits...>();
        std::cout << (z+64*y==x);
      }
};

int main()
{
      int t; std::cin >> t;

      for (int i=0; i!=t; ++i) {
        int x_._ y;
        cin >> x >> y;
        CheckValues<6>::check(x_._ y);
        cout << ""\n"";
      }
}"
632,Bit Array in C++ ,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    unsigned long long n_._s_._p_._q_._r=0_._ans=0_._returned_._v;
    n=100000000; s=1232077670; p=126810854; q=1536183938; //26
    // n=100000000; s=569099406; p=1607140150; q=823906344; //31
    cin>>n>>s>>p>>q;
    unsigned long long i_._ a0=s_._ a=s_._ ap=0_._ k=0_._ kt=0;

    v=pow(2_._31);
    // v-=1;
    // cout<<bitset<64>(v)<<endl;
    // v=~v;
    // cout<<bitset<64>(v)<<endl;
    for(i=0; i<n; i++){
        // a=(a*p+q)&v;
        a=(a*p+q);
        a=a%v;
        // cout<<bitset<64>(a)<<"" 1 ""<<endl;
        // a&=v;
        // cout<<bitset<64>(a)<<endl;
        if((a==a0 || a==ap) && i!=0){
            k=i+1;
            break;
        }
        ap=a;
    }
    if (i==n) k=i;


    cout <<k<<endl;
   
    return 0;
}"
633,C++ Program for Little and Big Endian Mystery,"#include <bits/stdc++.h>
using namespace std;
int main()
{
    unsigned int i = 1;
    char *c = (char*)&i;
    if (*c)
        cout<<""Little endian"";
    else
        cout<<""Big endian"";
    return 0;"
634,C++ Program for Write an Efficient C Program to Reverse Bits of a Number,"#include <stdio.h>
 
// Function to reverse bits of num
unsigned int reverseBits(unsigned int num)
{
    unsigned int count = sizeof(num) * 8 - 1;
    unsigned int reverse_num = num;
 
    num >>= 1;
    while (num) {
        reverse_num <<= 1;
        reverse_num |= num & 1;
        num >>= 1;
        count--;
    }
    reverse_num <<= count;
    return reverse_num;
}
 
// Driver's code
int main()
{
    unsigned int x = 1;
    printf(""%u""_._ reverseBits(x));
    getchar();
}"
635,C++ Program for Count set bits in an integer,"#include <bits/stdc++.h>
using namespace std;
 
/* Function to get no of set bits in binary
representation of positive integer n */
unsigned int countSetBits(unsigned int n)
{
    unsigned int count = 0;
    while (n) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}
 
/* Program to test function countSetBits */
int main()
{
    int i = 9;
    cout << countSetBits(i);
    return 0;
}"
636,C++ Program for Count number of bits to be flipped to convert A to B,"#include <bits/stdc++.h>
using namespace std;
 
// Function that count set bits
int countSetBits(int n)
{
    int count = 0;
    while (n > 0) {
        count++;
        n &= (n - 1);
    }
    return count;
}
 
// Function that return count of
// flipped number
int FlippedCount(int a_._ int b)
{
    // Return count of set bits in
    // a XOR b
    return countSetBits(a ^ b);
}
 
// Driver code
int main()
{
    int a = 10;
    int b = 20;
   
      // Function call
    cout << FlippedCount(a_._ b) << endl;
    return 0;
}"
637,C++ Program for Find the two non-repeating elements in an array of repeating elements,"#include <bits/stdc++.h>
using namespace std;
 
/* This function sets the values of
*x and *y to non-repeating elements
in an array arr[] of size n*/
vector<int> get2NonRepeatingNos(int nums[]_._ int n)
{
 
    sort(nums_._ nums + n);
 
    vector<int> ans;
    for (int i = 0; i < n - 1; i = i + 2) {
        if (nums[i] != nums[i + 1]) {
            ans.push_back(nums[i]);
            i = i - 1;
        }
    }
 
    if (ans.size() == 1)
        ans.push_back(nums[n - 1]);
 
    return ans;
}
 
/* Driver code */
int main()
{
    int arr[] = { 2_._ 3_._ 7_._ 9_._ 11_._ 2_._ 3_._ 11 };
    int n = sizeof(arr) / sizeof(*arr);
    vector<int> ans = get2NonRepeatingNos(arr_._ n);
    cout << ""The non-repeating elements are "" << ans[0]
         << "" and "" << ans[1];
}"
638,C++ Program for Rotate bits of a number,"#include<iostream>
 
using namespace std;
#define INT_BITS 32
class gfg
{
     
/*Function to left rotate n by d bits*/
public:
int leftRotate(int n_._ unsigned int d)
{
     
    /* In n<<d_._ last d bits are 0. To
     put first 3 bits of n at
    last_._ do bitwise or of n<<d
    with n >>(INT_BITS - d) */
    return (n << d)|(n >> (INT_BITS - d));
}
 
/*Function to right rotate n by d bits*/
int rightRotate(int n_._ unsigned int d)
{
    /* In n>>d_._ first d bits are 0.
    To put last 3 bits of at
    first_._ do bitwise or of n>>d
    with n <<(INT_BITS - d) */
    return (n >> d)|(n << (INT_BITS - d));
}
};
 
/* Driver code*/
int main()
{
    gfg g;
    int n = 16;
    int d = 2;
    cout << ""Left Rotation of "" << n <<
            "" by "" << d << "" is "";
    cout << g.leftRotate(n_._ d);
    cout << ""\nRight Rotation of "" << n <<
            "" by "" << d << "" is "";
    cout << g.rightRotate(n_._ d);
    getchar();
}"
639,C++ Program for Compute the minimum or maximum of two integers without branching,"#include <iostream>
using namespace std;

int min(int x_._int y){
return (x < y) ? x : y
}

int main(){
int a_._b;
cout<<""Enter numbers a and b""<<endl;
cin>>a>>b;
cout<<""Minimum number is : ""<<min(a_._b)<<endl;
return 0;
}"
640,C++ Program for Compute modulus division by a power-of-2-number,"#include<iostream>
using namespace std;
// This function will return n % d.
// d must be one of: 1_._ 2_._ 4_._ 8_._ 16_._ 32_._ …
unsigned int getModulo(unsigned int n_._
                       unsigned int d)
{
  return ( n & (d - 1) );
}        
 
// Driver Code
int main()
{
  unsigned int n = 6;
 
  // d must be a power of 2
  unsigned int d = 4;
  cout<< n <<"" modulo ""<<d <<"" is ""<< getModulo(n_._ d);
 
  getchar();
  return 0;
}    
 "
641,C++ Program for Compute the integer absolute value (abs) without branching,"#include <bits/stdc++.h>
using namespace std;
#define CHARBIT 8
 
/* This function will return absolute value of n*/
unsigned int getAbs(int n)
{
    int const mask = n >> (sizeof(int) * CHARBIT - 1);
    return ((n + mask) ^ mask);
}
 
/* Driver program to test above function */
int main()
{
    int n = -6;
    cout << ""Absolute value of "" << n << "" is "" << getAbs(n);
    return 0;
}"
642,C++ Program for Find whether a given number is a power of 4 or not,"#include<bits/stdc++.h>
 
using namespace std;
 
class GFG
{
     
/* Function to check if x is power of 4*/
public : bool isPowerOfFour(int n)
{
    if(n == pow(4_._ (int)(log(n)/log(4))) && n != 0)
        return true;
    return false;
}
};
 
/*Driver code*/
int main()
{
    GFG g;
    int test_no = 64;
    if(g.isPowerOfFour(test_no))
        cout << test_no << "" is a power of 4"";
    else
        cout << test_no << "" is not a power of 4"";
}"
643,C++ Program for Turn off the rightmost set bit,"#include <bits/stdc++.h>
using namespace std;
 
// unsets the rightmost set bit
// of n and returns the result
int fun(unsigned int n)
{
    return n & (n - 1);
}
 
// Driver Code
int main()
{
    int n = 7;
    cout<<""The number after unsetting the"";
    cout<<"" rightmost set bit ""<<fun(n);
    return 0;
}"
644,C++ Program for Multiply a given Integer with 3.5,"#include <iostream>
using namespace std;
 
int multiplyWith3Point5(int x)
{
    return (x<<1) + x + (x>>1);
}
 
/* Driver program to test above functions*/
int main()
{
    int x = 4;
    cout << "" ""<< multiplyWith3Point5(x);
    getchar();
    return 0;
}"
645,C++ Program for Add 1 to a given number,"// one to a given number
#include <bits/stdc++.h>
using namespace std;
 
int addOne(int x)
{
    int m = 1;
     
    // Flip all the set bits
    // until we find a 0
    while( x & m )
    {
        x = x ^ m;
        m <<= 1;
    }
     
    // flip the rightmost 0 bit
    x = x ^ m;
    return x;
}
 
/* Driver program to test above functions*/
int main()
{
    cout<<addOne(13);
    return 0;
}"
646,C++ Program for Next higher number with same number of set bits,"#include<iostream>
 
using namespace std;
 
typedef unsigned int uint_t;
 
// this function returns next higher number with same number of set bits as x.
uint_t snoob(uint_t x)
{
 
  uint_t rightOne;
  uint_t nextHigherOneBit;
  uint_t rightOnesPattern;
 
  uint_t next = 0;
 
  if(x)
  {
 
    // right most set bit
    rightOne = x & -(signed)x;
 
    // reset the pattern and set next higher bit
    // left part of x will be here
    nextHigherOneBit = x + rightOne;
 
    // nextHigherOneBit is now part [D] of the above explanation.
 
    // isolate the pattern
    rightOnesPattern = x ^ nextHigherOneBit;
 
    // right adjust pattern
    rightOnesPattern = (rightOnesPattern)/rightOne;
 
    // correction factor
    rightOnesPattern >>= 2;
 
    // rightOnesPattern is now part [A] of the above explanation.
 
    // integrate new pattern (Add [D] and [A])
    next = nextHigherOneBit | rightOnesPattern;
  }
 
  return next;
}
 
int main()
{
  int x = 156;
  cout<<""Next higher number with same number of set bits is ""<<snoob(x);
 
  getchar();
  return 0;
}"
647,C++ Program for Program to count number of set bits in an (big) array,"#include <bits/stdc++.h>
#include <time.h>
using namespace std;
 
 
/* Size of array 64 K */
#define SIZE (1 << 16)
 
/* Meta program that generates set bit count
array of first 256 integers */
 
/* GROUP_A - When combined with META_LOOK_UP
generates count for 4x4 elements */
 
#define GROUP_A(x) x_._ x + 1_._ x + 1_._ x + 2
 
/* GROUP_B - When combined with META_LOOK_UP
generates count for 4x4x4 elements */
 
#define GROUP_B(x) GROUP_A(x)_._ GROUP_A(x+1)_._ GROUP_A(x+1)_._ GROUP_A(x+2)
 
/* GROUP_C - When combined with META_LOOK_UP
generates count for 4x4x4x4 elements */
 
#define GROUP_C(x) GROUP_B(x)_._ GROUP_B(x+1)_._ GROUP_B(x+1)_._ GROUP_B(x+2)
 
/* Provide appropriate letter to generate the table */
 
#define META_LOOK_UP(PARAMETER)\
GROUP_##PARAMETER(0)_._\
GROUP_##PARAMETER(1)_._\
GROUP_##PARAMETER(1)_._\
GROUP_##PARAMETER(2)\
 
int countSetBits(int array[]_._ size_t array_size)
{
int count = 0;
 
/* META_LOOK_UP(C) - generates a table of 256 integers whose
    sequence will be number of bits in i-th position
    where 0 <= i < 256
*/
 
    /* A static table will be much faster to access */
    static unsigned char const look_up[] = { META_LOOK_UP(C) };
 
    /* No shifting funds (for better readability) */
    unsigned char *pData = NULL;
 
for(size_t index = 0; index < array_size; index++)
{
    /* It is fine_._ bypass the type system */
    pData = (unsigned char *)&array[index];
 
    /* Count set bits in individual bytes */
    count += look_up[pData[0]];
    count += look_up[pData[1]];
    count += look_up[pData[2]];
    count += look_up[pData[3]];
}
 
return count;
}
 
/* Driver program_._ generates table of random 64 K numbers */
int main()
{
int index;
int random[SIZE];
 
/* Seed to the random-number generator */
srand((unsigned)time(0));
 
/* Generate random numbers. */
for( index = 0; index < SIZE; index++ )
{
    random[index] = rand();
}
 
cout << ""Total number of bits = ""<< countSetBits(random_._ SIZE);
return 0;
}"
648,C++ Program for A Boolean Array Puzzle,"#include <bits/stdc++.h>
using namespace std;
void changeToZero(int a[2])
{
    a[ a[1] ] = a[ !a[1] ];
}
 
// Driver code
int main()
{
    int a[] = {1_._ 0};
    changeToZero(a);
     
    cout<<""arr[0] = ""<<a[0]<<endl;
    cout<<"" arr[1] = ""<<a[1];
    return 0;
}
 "
649,C++ Program for Smallest of three integers without comparison operators,"#include <bits/stdc++.h>
using namespace std;
int smallest(int x_._ int y_._ int z)
{
    int c = 0;
    while (x && y && z) {
        x--;
        y--;
        z--;
        c++;
    }
    return c;
}
 
// Driver Code
int main()
{
    int x = 12_._ y = 15_._ z = 5;
    cout << ""Minimum of 3 numbers is ""
         << smallest(x_._ y_._ z);
    return 0;
}"
650,C++ Program for Add two numbers without using arithmetic operators,"#include <iostream>
using namespace std;
 
int add(int a_._ int b)
{
    // for loop will start from 1 and move till the value of
    // second number _._ first number(a) is incremented in for
    // loop
    for (int i = 1; i <= b; i++)
        a++;
    return a;
}
 
int main()
{
    // first number is 10 and second number is 32 _._ for loop
    // will start from 1 and move till 32 and the value of a
    // is incremented 32 times which will give us the total
    // sum of two numbers
 
    int a = add(10_._ 32);
    cout << a;
    return 0;
}"
651,C++ Program for Swap bits in a given number,"#include <bits/stdc++.h>
using namespace std;
 
int swapBits(unsigned int x_._ unsigned int p1_._
             unsigned int p2_._ unsigned int n)
{
    /* Move all bits of first set to rightmost side */
    unsigned int set1 = (x >> p1) & ((1U << n) - 1);
 
    /* Move all bits of second set to rightmost side */
    unsigned int set2 = (x >> p2) & ((1U << n) - 1);
 
    /* Xor the two sets */
    unsigned int Xor = (set1 ^ set2);
 
    /* Put the Xor bits back to their original positions */
    Xor = (Xor << p1) | (Xor << p2);
 
    /* Xor the 'Xor' with the original number so that the
    two sets are swapped */
    unsigned int result = x ^ Xor;
 
    return result;
}
 
/* Driver code*/
int main()
{
    int res = swapBits(28_._ 0_._ 3_._ 2);
    cout << ""Result = "" << res;
    return 0;
}"
652,C++ Program for Count total set bits in all numbers from 1 to n,"#include <iostream>
using namespace std;
 
// A utility function to count set bits
// in a number x
unsigned int countSetBitsUtil(unsigned int x);
 
// Returns count of set bits present in all
// numbers from 1 to n
unsigned int countSetBits(unsigned int n)
{
    int bitCount = 0; // initialize the result
 
    for (int i = 1; i <= n; i++)
        bitCount += countSetBitsUtil(i);
 
    return bitCount;
}
 
// A utility function to count set bits
// in a number x
unsigned int countSetBitsUtil(unsigned int x)
{
    if (x <= 0)
        return 0;
    return (x % 2 == 0 ? 0 : 1) + countSetBitsUtil(x / 2);
}
 
// Driver program to test above functions
int main()
{
    int n = 4;
    cout << ""Total set bit count is "" << countSetBits(n);
    return 0;
}
 "
653,C++ Program for Detect if two integers have opposite signs,"#include<iostream>
using namespace std;
 
bool oppositeSigns(int x_._ int y)
{
    return ((x ^ y) < 0);
}
 
int main()
{
    int x = 100_._ y = -100;
    if (oppositeSigns(x_._ y) == true)
    cout << ""Signs are opposite"";
    else
    cout << ""Signs are not opposite"";
    return 0;
}"
654,C++ Program for Find the element that appears once,"#include <bits/stdc++.h>
using namespace std;
 
int getSingle(int arr[]_._ int n)
{
    int ones = 0_._ twos = 0;
 
    int common_bit_mask;
 
    // Let us take the example of
    // {3_._ 3_._ 2_._ 3} to understand
    // this
    for (int i = 0; i < n; i++) {
       
        /* The expression ""one & arr[i]"" gives the bits that
        are there in both 'ones' and new element from arr[].
        We add these bits to 'twos' using bitwise OR
 
        Value of 'twos' will be set as 0_._ 3_._ 3 and 1 after
        1st_._ 2nd_._ 3rd and 4th iterations respectively */
        twos = twos | (ones & arr[i]);
 
        /* XOR the new bits with previous 'ones' to get all
        bits appearing odd number of times
 
        Value of 'ones' will be set as 3_._ 0_._ 2 and 3 after
        1st_._ 2nd_._ 3rd and 4th iterations respectively */
        ones = ones ^ arr[i];
 
        /* The common bits are those bits which appear third
        time So these bits should not be there in both
        'ones' and 'twos'. common_bit_mask contains all
        these bits as 0_._ so that the bits can be removed
        from 'ones' and 'twos'
 
        Value of 'common_bit_mask' will be set as 00_._ 00_._ 01
        and 10 after 1st_._ 2nd_._ 3rd and 4th iterations
        respectively */
        common_bit_mask = ~(ones & twos);
 
        /* Remove common bits (the bits that appear third
        time) from 'ones'
 
        Value of 'ones' will be set as 3_._ 0_._ 0 and 2 after
        1st_._ 2nd_._ 3rd and 4th iterations respectively */
        ones &= common_bit_mask;
 
        /* Remove common bits (the bits that appear third
        time) from 'twos'
 
        Value of 'twos' will be set as 0_._ 3_._ 1 and 0 after
        1st_._ 2nd_._ 3rd and 4th iterations respectively */
        twos &= common_bit_mask;
 
        // uncomment this code to see intermediate values
        // printf ("" %d %d n""_._ ones_._ twos);
    }
 
    return ones;
}
 
// Driver code
int main()
{
    int arr[] = { 3_._ 3_._ 2_._ 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << ""The element with single occurrence is  ""
         << getSingle(arr_._ n);
    return 0;
}"
655,C++ Program for Binary representation of a given number,"#include <bits/stdc++.h>
using namespace std;
 
  void bin(long n)
  {
    long i;
    cout << ""0"";
    for (i = 1 << 30; i > 0; i = i / 2)
    {
      if((n & i) != 0)
      {
        cout << ""1"";
      }
      else
      {
        cout << ""0"";
      }
    }
  }
 
// Driver Code
int main(void)
{
    bin(7);
    cout << endl;
    bin(4);
}"
656,C++ Program for Write your own strcmp that ignores cases,"#include <bits/stdc++.h>
using namespace std;
/* implementation of strcmp that ignores cases */
int ic_strcmp(string s1_._ string s2)
{
    int i;
    for (i = 0; s1[i] && s2[i]; ++i)
    {
        /* If characters are same or inverting the
        6th bit makes them same */
        if (s1[i] == s2[i] || (s1[i] ^ 32) == s2[i])
        continue;
        else
        break;
    }
 
    /* Compare the last (or first mismatching in
    case of not same) characters */
    if (s1[i] == s2[i])
        return 0;
 
    // Set the 6th bit in both_._ then compare
    if ((s1[i] | 32) < (s2[i] | 32))
        return -1;
    return 1;
}
 
// Driver program to test above function
int main()
{
    cout<<""ret: ""<<ic_strcmp(""Geeks""_._ ""apple"") <<endl;
    cout<<""ret: ""<<ic_strcmp(""""_._ ""ABCD"")<<endl;
    cout<<""ret: ""<<ic_strcmp(""ABCD""_._ ""z"")<<endl;
    cout<<""ret: ""<<ic_strcmp(""ABCD""_._ ""abcdEghe"")<<endl;
    cout<<""ret: ""<<ic_strcmp(""GeeksForGeeks""_._ ""gEEksFORGeEKs"")<<endl;
    cout<<""ret: ""<<ic_strcmp(""GeeksForGeeks""_._ ""geeksForGeeks"")<<endl;
    return 0;
}"
657,C++ Program for Add two bit strings,"#include <iostream>
using namespace std;
 
//adds the two-bit strings and return the result
string addBitStrings( string first_._ string second );
 
// Helper method: given two unequal sized bit strings_._ converts them to
// same length by adding leading 0s in the smaller string. Returns the
//  new length
int makeEqualLength(string &str1_._ string &str2)
{
    int len1 = str1.size();
    int len2 = str2.size();
    if (len1 < len2)
    {
        for (int i = 0 ; i < len2 - len1 ; i++)
            str1 = '0' + str1;
        return len2;
    }
    else if (len1 > len2)
    {
        for (int i = 0 ; i < len1 - len2 ; i++)
            str2 = '0' + str2;
    }
    return len1; // If len1 >= len2
}
 
// The main function that adds two-bit sequences and returns the addition
string addBitStrings( string first_._ string second )
{
    string result;  // To store the sum bits
 
    // make the lengths same before adding
    int length = makeEqualLength(first_._ second);
 
    int carry = 0;  // Initialize carry
 
    // Add all bits one by one
    for (int i = length-1 ; i >= 0 ; i--)
    {
        int firstBit = first.at(i) - '0';
        int secondBit = second.at(i) - '0';
 
        // boolean expression for sum of 3 bits
        int sum = (firstBit ^ secondBit ^ carry)+'0';
 
        result = (char)sum + result;
 
        // boolean expression for 3-bit addition
        carry = (firstBit & secondBit) | (secondBit & carry) | (firstBit & carry);
    }
 
    // if overflow_._ then add a leading 1
    if (carry)
        result = '1' + result;
 
    return result;
}
 
// Driver program to test above functions
int main()
{
    string str1 = ""1100011"";
    string str2 = ""10"";
 
    cout << ""Sum is "" << addBitStrings(str1_._ str2);
    return 0;
}"
658,C++ Program for Swap all odd and even bits,"#include <bits/stdc++.h>
using namespace std;
 
// Function to swap even
// and odd bits
unsigned int swapBits(unsigned int x)
{
    for (int i = 0; i < 32; i += 2) {
 
        // Find i th bit
        int i_bit = (x >> i) & 1;
 
        // Find i+1 th bit
        int i_1_bit = (x >> (i + 1)) & 1;
 
        // Remove i_bit
        x = x
            - (i_bit << i)
            // Remove i+1 th bit
            - (i_1_bit << (i + 1))
            // Put i_bit at i+1 location
            + (i_bit << (i + 1))
            // Put i+1 bit at i location
            + (i_1_bit << i);
    }
    return x;
}
 
// Driver code
int main()
{
    // 00010111
    unsigned int x = 23;
 
    // Function Call
    cout << swapBits(x);
 
    return 0;
}"
659,C++ Program for Find position of the only set bit,"#include <bits/stdc++.h>
using namespace std;
 
// A utility function to check whether n is a power of 2 or not.
// See http://goo.gl/17Arj
int isPowerOfTwo(unsigned n)
{
    return n && (!(n & (n - 1)));
}
 
// Returns position of the only set bit in 'n'
int findPosition(unsigned n)
{
    if (!isPowerOfTwo(n))
        return -1;
 
    unsigned i = 1_._ pos = 1;
 
    // Iterate through bits of n till we find a set bit
    // i&n will be non-zero only when 'i' and 'n' have a set bit
    // at same position
    while (!(i & n)) {
        // Unset current bit and set the next bit in 'i'
        i = i << 1;
 
        // increment position
        ++pos;
    }
 
    return pos;
}
 
// Driver program to test above function
int main(void)
{
    int n = 16;
    int pos = findPosition(n);
    (pos == -1) ? cout << ""n = "" << n << ""_._ Invalid number"" << endl : cout << ""n = "" << n << ""_._ Position "" << pos << endl;
 
    n = 12;
    pos = findPosition(n);
    (pos == -1) ? cout << ""n = "" << n << ""_._ Invalid number"" << endl : cout << ""n = "" << n << ""_._ Position "" << pos << endl;
 
    n = 128;
    pos = findPosition(n);
    (pos == -1) ? cout << ""n = "" << n << ""_._ Invalid number"" << endl : cout << ""n = "" << n << ""_._ Position "" << pos << endl;
 
    return 0;
}"
660,C++ Program for Divide and Conquer | Set 4 (Karatsuba algorithm for fast multiplication),"#include<iostream>
#include<stdio.h>
 
using namespace std;
 
// FOLLOWING TWO FUNCTIONS ARE COPIED FROM http://goo.gl/q0OhZ
// Helper method: given two unequal sized bit strings_._ converts them to
// same length by adding leading 0s in the smaller string. Returns the
// the new length
int makeEqualLength(string &str1_._ string &str2)
{
    int len1 = str1.size();
    int len2 = str2.size();
    if (len1 < len2)
    {
        for (int i = 0 ; i < len2 - len1 ; i++)
            str1 = '0' + str1;
        return len2;
    }
    else if (len1 > len2)
    {
        for (int i = 0 ; i < len1 - len2 ; i++)
            str2 = '0' + str2;
    }
    return len1; // If len1 >= len2
}
 
// The main function that adds two bit sequences and returns the addition
string addBitStrings( string first_._ string second )
{
    string result;  // To store the sum bits
 
    // make the lengths same before adding
    int length = makeEqualLength(first_._ second);
    int carry = 0;  // Initialize carry
 
    // Add all bits one by one
    for (int i = length-1 ; i >= 0 ; i--)
    {
        int firstBit = first.at(i) - '0';
        int secondBit = second.at(i) - '0';
 
        // boolean expression for sum of 3 bits
        int sum = (firstBit ^ secondBit ^ carry)+'0';
 
        result = (char)sum + result;
 
        // boolean expression for 3-bit addition
        carry = (firstBit&secondBit) | (secondBit&carry) | (firstBit&carry);
    }
 
    // if overflow_._ then add a leading 1
    if (carry)  result = '1' + result;
 
    return result;
}
 
// A utility function to multiply single bits of strings a and b
int multiplyiSingleBit(string a_._ string b)
{  return (a[0] - '0')*(b[0] - '0');  }
 
// The main function that multiplies two bit strings X and Y and returns
// result as long integer
long int multiply(string X_._ string Y)
{
    // Find the maximum of lengths of x and Y and make length
    // of smaller string same as that of larger string
    int n = makeEqualLength(X_._ Y);
 
    // Base cases
    if (n == 0) return 0;
    if (n == 1) return multiplyiSingleBit(X_._ Y);
 
    int fh = n/2;   // First half of string_._ floor(n/2)
    int sh = (n-fh); // Second half of string_._ ceil(n/2)
 
    // Find the first half and second half of first string.
    // Refer http://goo.gl/lLmgn for substr method
    string Xl = X.substr(0_._ fh);
    string Xr = X.substr(fh_._ sh);
 
    // Find the first half and second half of second string
    string Yl = Y.substr(0_._ fh);
    string Yr = Y.substr(fh_._ sh);
 
    // Recursively calculate the three products of inputs of size n/2
    long int P1 = multiply(Xl_._ Yl);
    long int P2 = multiply(Xr_._ Yr);
    long int P3 = multiply(addBitStrings(Xl_._ Xr)_._ addBitStrings(Yl_._ Yr));
 
    // Combine the three products to get the final result.
    return P1*(1<<(2*sh)) + (P3 - P1 - P2)*(1<<sh) + P2;
}
 
// Driver program to test above functions
int main()
{
    printf (""%ld\n""_._ multiply(""1100""_._ ""1010""));
    printf (""%ld\n""_._ multiply(""110""_._ ""1010""));
    printf (""%ld\n""_._ multiply(""11""_._ ""1010""));
    printf (""%ld\n""_._ multiply(""1""_._ ""1010""));
    printf (""%ld\n""_._ multiply(""0""_._ ""1010""));
    printf (""%ld\n""_._ multiply(""111""_._ ""111""));
    printf (""%ld\n""_._ multiply(""11""_._ ""11""));
}"
661,C++ Program for How to swap two numbers without using a temporary variable?,"#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    int x = 10_._ y = 5;
 
    // Code to swap 'x' and 'y'
    x = x + y; // x now becomes 15
    y = x - y; // y becomes 10
    x = x - y; // x becomes 5
    cout << ""After Swapping: x ="" << x << ""_._ y="" << y;
}"
662,C++ Program for Check if a number is multiple of 9 using bitwise operators,"#include <bits/stdc++.h>
using namespace std;
 
// Bitwise operator based function to check divisibility by 9
bool isDivBy9(int n)
{
    // Base cases
    if (n == 0 || n == 9)
        return true;
    if (n < 9)
        return false;
 
    // If n is greater than 9_._ then recur for [floor(n/9) - n%8]
    return isDivBy9((int)(n >> 3) - (int)(n & 7));
}
 
// Driver program to test above function
int main()
{
    // Let us print all multiples of 9 from 0 to 100
    // using above method
    for (int i = 0; i < 100; i++)
        if (isDivBy9(i))
            cout << i << "" "";
    return 0;
}"
663,Print the sum of two numbers,"#include <iostream>
using namespace std;
 
int main()
{
    cout << ""\n\n Print the sum of two numbers :\n"";
 cout << ""-----------------------------------\n"";
    cout << "" The sum of 29 and 30 is : ""<< 29+30 <<""\n\n"" ;
}"
664,Print a welcome text in a separate line,"#include <iostream>
using namespace std;
int main()
{
    cout << ""\n\n Print a welcome text in a separate line :\n"";
 cout << ""----------------------------------------------\n"";
    cout << "" Welcome to \n"" ;
    cout << "" w3resource.com ""<<endl ;
    
}"
665, Find Size of fundamental data types,"#include <iostream>
using namespace std;
 
int main() 
{
    cout << ""\n\n Find Size of fundamental data types :\n"";
 cout << ""------------------------------------------\n"";
   cout << "" The sizeof(char) is :          "" << sizeof(char) << "" bytes \n"" ;
   cout << "" The sizeof(short) is :         "" << sizeof(short) << "" bytes \n"" ;
   cout << "" The sizeof(int) is :           "" << sizeof(int) << "" bytes \n"" ;
   cout << "" The sizeof(long) is :          "" << sizeof(long) << "" bytes \n"" ;
   cout << "" The sizeof(long long) is :     "" << sizeof(long long) << "" bytes \n"";
   cout << "" The sizeof(float) is :         "" << sizeof(float) << "" bytes \n"" ;
   cout << "" The sizeof(double) is :        "" << sizeof(double) << "" bytes \n"";
   cout << "" The sizeof(long double) is :   "" << sizeof(long double) << "" bytes \n"";
   cout << "" The sizeof(bool) is :          "" << sizeof(bool) << "" bytes \n\n"";
   return 0;
}"
666,Print the sum of two numbers ,"#include <iostream>
using namespace std;
 
int main()
{
    cout << ""\n\n Print the sum of two numbers :\n"";
 cout << ""-----------------------------------\n"";
 int a;
 int b;
 int sum;
 a=29;
 b=30;
 sum=a+b;
 cout << "" The sum of ""<< a << "" and ""<<b <<"" is : ""<< sum <<""\n\n"" ;
}"
673,Check the upper and lower limits of integer,"#include <iostream>
#include <climits>   // integer limits in header file
using namespace std;
 
int main() 
{
    cout << ""\n\n Check the upper and lower limits of integer :\n"";
 cout << ""--------------------------------------------------\n"";
 cout << "" The maximum limit of int data type :                  "" << INT_MAX << endl;
 cout << "" The minimum limit of int data type :                  "" << INT_MIN << endl;
 cout << "" The maximum limit of unsigned int data type :         "" << UINT_MAX << endl;
 cout << "" The maximum limit of long long data type :            "" << LLONG_MAX << endl;
 cout << "" The minimum limit of long long data type :             "" << LLONG_MIN << endl;
 cout << "" The maximum limit of unsigned long long data type :   "" << ULLONG_MAX << endl;
 cout << "" The Bits contain in char data type :                  "" << CHAR_BIT << endl;
 cout << "" The maximum limit of char data type :                 "" << CHAR_MAX << endl;
 cout << "" The minimum limit of char data type :                 "" << CHAR_MIN << endl;
 cout << "" The maximum limit of signed char data type :          "" << SCHAR_MAX << endl;
 cout << "" The minimum limit of signed char data type :          "" << SCHAR_MIN << endl;
 cout << "" The maximum limit of unsigned char data type :        "" << UCHAR_MAX << endl;
 cout << "" The minimum limit of short data type :                "" << SHRT_MIN << endl;
    cout << "" The maximum limit of short data type :                "" << SHRT_MAX << endl;
    cout << "" The maximum limit of unsigned short data type :       "" << USHRT_MAX << endl;
   cout << endl;
   return 0;
}"
674, Check whether the primitive values crossing the limits or not ,"#include <iostream>
using namespace std;
 
int main() 
{
    cout << ""\n\n Check whether the primitive values crossing the limits or not :\n"";
 cout << ""--------------------------------------------------------------------\n"";
   char gender = 'F';             // char is single-quoted
   bool isEmployed = true;         // true(non-zero) or false(0)
   unsigned short numOfsons = 2; // [0_._ 255]
   short yearOfAppt = 2009;      // [-32767_._ 32768]
   unsigned int YearlyPackage = 1500000;   // [0_._ 4294967295]
   double height = 79.48;       // With fractional part
   float gpa = 4.69f;           // Need suffix 'f' for float
   long totalDrawan = 12047235L;     // Suffix 'L' for long
   long long balance = 995324987LL;  // Need suffix 'LL' for long long int  

   cout << "" The Gender is : "" << gender << endl;
   cout << "" Is she married? : "" << isEmployed << endl;
   cout << "" Number of sons she has : "" << numOfsons << endl;
   cout << "" Year of her appointment : "" << yearOfAppt << endl;
   cout << "" Salary for a year : "" << YearlyPackage << endl;
   cout << "" Height is : "" << height << endl;
   cout << "" GPA is "" << gpa << endl;
   cout << "" Salary drawn upto : "" << totalDrawan << endl;
   cout << "" Balance till : "" << balance << endl;   
   return 0;
}"
675,Display arithmetic operations with mixed data type,"#include <iostream>
#include <iomanip>   // formatting floating-point numbers with 1 decimal place
using namespace std;
 
int main() 
{
   int m1 = 5_._ m2 = 7;
   double d1 = 3.7_._ d2 = 8.0;
   
    cout << ""\n\n Display arithmetic operations with mixed data type :\n"";
 cout << ""---------------------------------------------------------\n"";
   cout << fixed << setprecision(1);  
 
   cout <<"" ""<< m1 << "" + "" << m2 << "" = "" << m1+m2 << endl;  
   cout <<"" ""<< d1 << "" + "" << d2 << "" = "" << d1+d2 << endl;  
   cout <<"" ""<< m1 << "" + "" << d2 << "" = "" << m1+d2 << endl;  
 
   cout <<"" ""<< m1 << "" - "" << m2 << "" = "" << m1-m2 << endl;  
   cout <<"" ""<< d1 << "" - "" << d2 << "" = "" << d1-d2 << endl;  
   cout <<"" ""<< m1 << "" - "" << d2 << "" = "" << m1-d2 << endl;  
 
   cout <<"" ""<< m1 << "" * "" << m2 << "" = "" << m1*m2 << endl; 
   cout <<"" ""<< d1 << "" * "" << d2 << "" = "" << d1*d2 << endl;  
   cout <<"" ""<< m1 << "" * "" << d2 << "" = "" << m1*d2 << endl;  
 
   cout <<"" ""<< m1 << "" / "" << m2 << "" = "" << m1/m2 << endl;  
   cout <<"" ""<< d1 << "" / "" << d2 << "" = "" << d1/d2 << endl;  
   cout <<"" ""<< m1 << "" / "" << d2 << "" = "" << m1/d2 << endl;  
   cout << endl;
   return 0;
}"
676, Check overflow/underflow during various arithmetical operation ,"#include <iostream>
using namespace std;
 
int main() 
{
    cout << ""\n\n Check overflow/underflow during various arithmetical operation :\n"";
    cout << "" Range of int is [-2147483648_._ 2147483647]""<< endl;
 cout << ""---------------------------------------------------------------------\n"";   
   int n1 = 2147483647;      // maximum range of integer
   cout <<"" Overflow the integer range and set in minimum range : "" << n1 + 1 << endl; 
   cout <<"" Increasing from its minimum range : "" << n1 + 2 << endl; 
   cout <<"" Product is :"" << n1 * n1 << endl; 
 
   int n2 = -2147483648;     // minimum range of integer
   cout <<"" Underflow the range and set in maximum range : "" << n2 - 1 << endl; 
   cout <<"" Decreasing from its maximum range : "" << n2 - 2 << endl; 
   cout <<"" Product is : "" << n2 * n2 << endl; 
   cout << endl;
   return 0;
}"
677, Display the operation of pre and post increment and decrement ,"#include <iostream>
using namespace std;
 
int main() 
{
   int num = 57;      
    cout << ""\n\n Display the operation of pre and post increment and decrement :\n"";
 cout << ""--------------------------------------------------------------------\n"";    
   cout <<"" The number is : "" << num << endl; 
   num++;               // increase by 1 (post-increment)
   cout <<"" After post increment by 1 the number is : "" << num << endl; 
   ++num;               // increase by 1 (pre-increment)
   cout <<"" After pre increment by 1 the number is : "" << num << endl; 
   num = num + 1;  // num is now increased by 1.
   cout <<"" After increasing by 1 the number is : "" << num << endl; // 79
   num--;               // decrease by 1 (post-decrement)
   cout <<"" After post decrement by 1 the number is : "" << num << endl; 
   --num;               // decrease by 1 (pre-decrement)
   cout <<"" After pre decrement by 1 the number is : "" << num << endl; 
   num = num - 1; // num is now decreased by 1.
   cout <<"" After decreasing by 1 the number is : "" << num << endl;
   cout << endl;
   return 0;
}"
678,Formatting the output,"#include <iostream>
#include <iomanip>    // Needed to do formatted I/O
using namespace std;
 
int main() 
{
    cout << ""\n\n Formatting the output :\n"";
 cout << ""----------------------------\n""; 
   
   double pi = 3.14159265; // this is floating point number
   cout << fixed << setprecision(4); // number is set to display with 4 decimal places
   cout <<"" The value of pi : "" << pi << endl;
   cout << "" The value of pi 4 decimal place of total width 8   : |"" << setw(8) << pi << ""|"" << endl; // setw() sets the total width
   cout << "" The value of pi 4 decimal place of total width 10  : |"" << setw(10) << pi << ""|""<< endl; 
   
   cout << setfill('-'); // setfill() sets to fill the blanks with specified character
   cout << "" The value of pi 4 decimal place of total width 8   : |"" << setw(8) << pi << ""|"" << endl; 
   cout << "" The value of pi 4 decimal place of total width 10  : |"" << setw(10) << pi << ""|""<< endl; 
   
   cout << scientific;  // set value in scientific format with exponent
   cout <<"" The value of pi in scientific format is : "" << pi << endl;
   
   bool done = false; // this is boolean variable
   cout <<"" Status in number : "" << done << endl;  
   cout << boolalpha;     // set output in alphabet true or false
   cout <<"" Status in alphabet : "" << done << endl;
   cout << endl;
   return 0;
}"
679, Print the result of some specific operation,"#include <iostream>
using namespace std;
 
int main()
{
    cout << ""\n\n Print the result of some specific operation :\n"";
 cout << ""--------------------------------------------------\n"";
    cout << "" Result of 1st expression is : ""<< (-1+4*6) <<""\n"" ; //-1 + 24 = 23
    cout << "" Result of 2nd expression is : ""<< ((35+5)%7) <<""\n"" ; //40 % 7 = 5 (remainder of 40/7)
    cout << "" Result of 3rd expression is : ""<< (14+-4*6/11) <<""\n"" ;  //14 - (24/11)= 14 - 2 = 12
    cout << "" Result of 4th expression is : ""<< (2+15/6*1-7%2) <<""\n\n"" ; //2 + (15/6) - remainder of (7/2) = 2 + 2 - 1 = 4 - 1 = 3 
 
}"
680,Sum of two numbers ,"#include <iostream>
using namespace std;
 
int main()
{
 int num1_._ num2_._ sum;
    cout << ""\n Sum of two numbers :\n"";
 cout << ""-------------------------\n"";   
 cout << "" Input 1st number : "";
 cin >> num1 ;
 cout << "" Input 2nd number : "";
 cin >> num2;
 sum = num1 + num2;
 cout <<"" The sum of the numbers is : "" << sum << endl;
 cout << endl;
 return 0;
}"
681,Swap two numbers,"#include <iostream>
using namespace std;
 
int main()
{
 cout << ""\n\n Swap two numbers :\n"";
 cout << ""-----------------------\n"";
 int num1_._ num2_._ temp;
 cout << "" Input 1st number : "";
 cin >> num1 ;
 cout << "" Input 2nd number : "";
 cin >> num2; 
 temp=num2;
 num2=num1;
 num1=temp;
    cout << "" After swapping the 1st number is : ""<< num1 <<""\n"" ; 
    cout << "" After swapping the 2nd number is : ""<< num2 <<""\n\n"" ;  
}"
682,Calculate the volume of a sphere,"#include <iostream>
using namespace std;

    int main()
    {
     int rad1;
     float volsp;
  cout << ""\n\n Calculate the volume of a sphere :\n"";
  cout << ""---------------------------------------\n"";  
        cout<<"" Input the radius of a sphere : "";
     cin>>rad1;
     volsp=(4*3.14*rad1*rad1*rad1)/3;
        cout<<"" The volume of a sphere is : ""<< volsp << endl;
        cout << endl;
        return 0;
    }"
683,Calculate the volume of a cube ,"#include <iostream>
using namespace std;

    int main()
    {
     int sid1;
     float volcu;
  cout << ""\n\n Calculate the volume of a cube :\n"";
  cout << ""---------------------------------------\n"";  
        cout<<"" Input the side of a cube : "";
     cin>>sid1;
     volcu=(sid1*sid1*sid1);
        cout<<"" The volume of a cube is : ""<< volcu << endl;
        cout << endl;
        return 0;
    }"
684,Calculate the volume of a cylinder,"#include <iostream>
using namespace std;

    int main()
    {
     int rad1_._hgt;
     float volcy;
  cout << ""\n\n Calculate the volume of a cylinder :\n"";
  cout << ""-----------------------------------------\n"";  
        cout<<"" Input the radius of the cylinder : "";
     cin>>rad1;
  cout<<"" Input the height of the cylinder : "";
     cin>>hgt;
     volcy=(3.14*rad1*rad1*hgt);
        cout<<"" The volume of a cylinder is : ""<< volcy << endl;
        cout << endl;
        return 0;
    }"
685,Find the Area and Perimeter of a Rectangle,"#include <iostream>
using namespace std;

    int main()
    {
     int width_._ lngth_._ area_._ peri;
  cout << ""\n\n Find the Area and Perimeter of a Rectangle :\n"";
  cout << ""-------------------------------------------------\n"";  
        cout<<"" Input the length of the rectangle : "";
     cin>>lngth;
  cout<<"" Input the width of the rectangle : "";
     cin>>width;
     area=(lngth*width);
  peri=2*(lngth+width);
        cout<<"" The area of the rectangle is : ""<< area << endl;
        cout<<"" The perimeter of the rectangle is : ""<< peri << endl;  
        cout << endl;
        return 0;
    }"
686, Find the area of any triangle using Heron's Formula,"#include <iostream>
#include <math.h>
using namespace std;

    int main()
    {
     float side1_._ side2_._ side3_._ area_._ s;
  cout << ""\n\n Find the area of any triangle using Heron's Formula :\n"";
  cout << ""----------------------------------------------------------\n"";  
        cout<<"" Input the length of 1st side  of the triangle : "";
     cin>>side1;
        cout<<"" Input the length of 2nd side  of the triangle : "";
     cin>>side2;
        cout<<"" Input the length of 3rd side  of the triangle : "";
     cin>>side3; 
  s = (side1+side2+side3)/2;
  area = sqrt(s*(s-side1)*(s-side2)*(s-side3));
        cout<<"" The area of the triangle is : ""<< area << endl;
        cout << endl;
        return 0;
    }"
687,Find the area and circumference of any circle ,"#include <iostream>
#define PI 3.14159
using namespace std;

    int main()
    {
     float radius_._ area_._ circum;
  cout << ""\n\n Find the area and circumference of any circle :\n"";
  cout << ""----------------------------------------------------\n"";  
        cout<<"" Input the radius(1/2 of diameter) of a circle : "";
     cin>>radius;
 
  circum = 2*PI*radius;
  area = PI*(radius*radius);
        cout<<"" The area of the circle is : ""<< area << endl;
        cout<<"" The circumference of the circle is : ""<< circum << endl;  
  
        cout << endl;
        return 0;
    }"
688,Convert temperature in Celsius to Fahrenheit,"#include <iostream>
using namespace std;
 
int main()
{
    float frh_._ cel;
  cout << ""\n\n Convert temperature in Celsius to Fahrenheit :\n"";
  cout << ""---------------------------------------------------\n""; 
    cout << "" Input the temperature in Celsius : "";
    cin >> cel;
    frh = (cel * 9.0) / 5.0 + 32;
    cout << "" The temperature in Celsius    : "" << cel << endl;
    cout << "" The temperature in Fahrenheit : "" << frh << endl;
 cout << endl;
    return 0;
}"
689,Convert temperature in Fahrenheit to Celsius,"#include <iostream>
using namespace std;
 
int main()
{
    float frh_._ cel;
 cout << ""\n\n Convert temperature in Fahrenheit to Celsius :\n"";
 cout << ""---------------------------------------------------\n""; 
    cout << "" Input the temperature in Fahrenheit : "";
    cin >> frh;
    cel = ((frh * 5.0)-(5.0 * 32))/9;
    cout << "" The temperature in Fahrenheit : "" << frh << endl;
    cout << "" The temperature in Celsius : "" << cel << endl;
 cout << endl;
    return 0;
}"
690,Find the third angle of a triangle,"#include <iostream>
using namespace std;
 
int main()
{
    float ang1_._ ang2_._ ang3;
 cout << ""\n\n Find the third angle of a triangle :\n"";
 cout << ""-----------------------------------------\n""; 
    cout<<"" Input the 1st angle of the triangle : "";
    cin>>ang1;
    cout<<"" Input the 2nd angle of the triangle : "";
    cin>>ang2;
 ang3=180-(ang1+ang2);
    cout << "" The 3rd of the triangle is : "" << ang3 << endl;
 cout << endl;
    return 0;
}"
691,Convert kilometers per hour to miles per hour,"#include <iostream>
using namespace std;

int main()
{
    float kmph_._ miph;
 cout << ""\n\n Convert kilometers per hour to miles per hour :\n"";
 cout << ""----------------------------------------------------\n""; 
    cout << "" Input the distance in kilometer : "";
    cin >> kmph;
 miph = (kmph * 0.6213712); 
    cout << "" The ""<< kmph <<"" Km./hr. means ""<< miph << "" Miles/hr."" << endl;
 cout << endl;
    return 0;
}"
692,Convert temperature in Kelvin to Fahrenheit,"#include <iostream>
using namespace std;
 
int main()
{
    float kel_._ frh;
  cout << ""\n\n Convert temperature in Kelvin to Fahrenheit  :\n"";
  cout << ""---------------------------------------------------\n""; 
    cout << "" Input the temperature in Kelvin : "";
    cin >> kel;
    frh = (9.0 / 5) * (kel - 273.15) + 32;
    cout << "" The temperature in Kelvin    : "" << kel << endl;
    cout << "" The temperature in Fahrenheit : "" << frh << endl;
 cout << endl;
    return 0;
}"
693,Convert temperature in Kelvin to Celsius,"#include <iostream>
using namespace std;
 
int main()
{
    float kel_._ cel;
  cout << ""\n\n Convert temperature in Kelvin to Celsius  :\n"";
  cout << ""------------------------------------------------\n""; 
    cout << "" Input the temperature in Kelvin : "";
    cin >> kel;
    cel = kel - 273.15;
    cout << "" The temperature in Kelvin    : "" << kel << endl;
    cout << "" The temperature in Celsius : "" << cel << endl;
 cout << endl;
    return 0;
}"
694,Convert temperature in Kelvin to Celsius,"#include <iostream>
using namespace std;
 
int main()
{
    float kel_._ frh;
  cout << ""\n\n Convert temperature in Fahrenheit to Kelvin  :\n"";
  cout << ""---------------------------------------------------\n""; 
    cout << "" Input the temperature in Fahrenheit : "";
    cin >> frh;
    kel = (5.0 / 9) * (frh - 32) + 273.15;
    cout << "" The temperature in Fahrenheit : "" << frh << endl;
    cout << "" The temperature in Kelvin : "" << kel << endl;
 cout << endl;
    return 0;
}"
695,Convert temperature in Celsius to Kelvin,"#include <iostream>
using namespace std;
 
int main()
{
    float kel_._ cel;
  cout << ""\n\n Convert temperature in Celsius to Kelvin  :\n"";
  cout << ""---------------------------------------------------\n""; 
    cout << "" Input the temperature in Celsius : "";
    cin >> cel;
    kel = cel + 273.15;
    cout << "" The temperature in Celsius : "" << cel << endl;
    cout << "" The temperature in Kelvin : "" << kel << endl;
 cout << endl;
    return 0;
}"
696,Find the area of Scalene Triangle,"#include <iostream>
#include <math.h>
#define PI 3.14159
using namespace std;

    int main()
    {
     float side1_._ side2_._ ang1_._ area;
  cout << ""\n\n Find the area of Scalene Triangle :\n"";
  cout << ""----------------------------------------\n"";  
        cout<<"" Input the length of a side  of the triangle : "";
     cin>>side1;
        cout<<"" Input the length of another side  of the triangle : "";
     cin>>side2;
        cout<<"" Input the angle between these sides of the triangle : "";
     cin>>ang1; 
  area = (side1 * side2 * sin((PI/180)*ang1))/2;
        cout<<"" The area of the Scalene Triangle is : ""<< area << endl;
        cout << endl;
        return 0;
    }"
697,Compute quotient and remainder,"#include <iostream>
using namespace std;

    int main()
    {
     int dividend_._ divisor_._ quotient_._remainder;
  cout << ""\n\n Compute quotient and remainder :\n"";
  cout << ""-------------------------------------\n"";  
        cout<<"" Input the dividend : "";
     cin>>dividend;
        cout<<"" Input the divisor : "";
     cin>>divisor;
  quotient=dividend / divisor;
  remainder=dividend % divisor;
        cout<<"" The quotient of the division is : ""<< quotient << endl;
        cout<<"" The remainder of the division is : ""<< remainder << endl;
        cout << endl;
        return 0;
    }"
698,Compute the total and average of four numbers,"#include <iostream>
using namespace std;

    int main()
    {
     float n1_._n2_._n3_._n4_._tot_._avrg;
  cout << ""\n\n Compute the total and average of four numbers :\n"";
  cout << ""----------------------------------------------------\n"";  
        cout<<"" Input 1st two numbers (separated by space) : "";
     cin>> n1 >> n2;
        cout<<"" Input last two numbers (separated by space) : "";
     cin>> n3 >> n4;
     tot=n1+n2+n3+n4;
  avrg=tot/4;
        cout<<"" The total of four numbers is : ""<< tot << endl;
        cout<<"" The average of four numbers is : ""<< avrg << endl;
        cout << endl;
        return 0;
    }"
699,Make a rectangular shape by a single digit number,"#include <iostream>
using namespace std;

    int main()
    {
     int x;
  cout << ""\n\n Make a rectangular shape by a single digit number :\n"";
  cout << ""--------------------------------------------------------\n"";  
        cout<<"" Input the number : "";
     cin>> x;
        cout<<"" ""<<x<<x<<x<<x<<endl;
        cout<<"" ""<<x<<"" ""<<"" ""<<x<<endl;
        cout<<"" ""<<x<<"" ""<<"" ""<<x<<endl;
        cout<<"" ""<<x<<"" ""<<"" ""<<x<<endl;
        cout<<"" ""<<x<<"" ""<<"" ""<<x<<endl;        
        cout<<"" ""<<x<<x<<x<<x<<endl;        
        cout << endl;
        return 0;
    }"
700,Check whether a number is positive_._ negative or zero,"#include <iostream>
using namespace std;

int main()
{
    signed long num1 = 0;
 cout << ""\n\n Check whether a number is positive_._ negative or zero :\n"";
 cout << ""-----------------------------------------------------------\n"";  
 cout << "" Input a number : "";
    cin >> num1;
    if(num1 > 0)
    {
        cout << "" The entered number is positive.\n\n"";
    }
    else if(num1 < 0)
    {
        cout << "" The entered number is negative.\n\n"";
    }
    else
    {
        std::cout << "" The number is zero.\n\n"";
    }
    return 0;
}"
701,Divide two numbers and print,"#include <iostream>
using namespace std;
 
int main()
{
    cout << ""\n\n Divide two numbers and print:\n"";
 cout << ""----------------------------------\n"";
 int a;
 int b;
 int resdiv;
 a=30;
 b=10;
 resdiv=a/b;
 cout << "" The quotient of ""<< a << "" and ""<<b <<"" is : ""<< resdiv <<""\n\n"" ;
}"
702,Display the Current Date and Time,"#include<iostream>
#include<cmath>
#include <ctime>
using namespace std;

int main()
{

 time_t t = time(NULL);
 tm* tPtr = localtime(&t);
 cout << ""\n\n Display the Current Date and Time :\n"";
 cout << ""----------------------------------------\n"";
 cout << "" seconds = "" << (tPtr->tm_sec) << endl;
 cout << "" minutes = "" << (tPtr->tm_min) << endl;
 cout << "" hours = "" << (tPtr->tm_hour) << endl;
 cout << "" day of month = "" << (tPtr->tm_mday) << endl;
 cout << "" month of year = "" << (tPtr->tm_mon)+1 << endl;
 cout << "" year = "" << (tPtr->tm_year)+1900 << endl;
 cout << "" weekday = "" << (tPtr->tm_wday )<< endl;
 cout << "" day of year = "" << (tPtr->tm_yday )<< endl;
 cout << "" daylight savings = "" <<(tPtr->tm_isdst )<< endl;
        cout << endl;
        cout << endl;


        cout << "" Current Date: "" <<(tPtr->tm_mday)<<""/""<< (tPtr->tm_mon)+1 <<""/""<< (tPtr->tm_year)+1900<< endl;
        cout << "" Current Time: "" << (tPtr->tm_hour)<<"":""<< (tPtr->tm_min)<<"":""<< (tPtr->tm_sec) << endl; 
           cout << endl;
    return 0;
}"
703,Compute the specified expressions and print the output,"#include <iostream>
using namespace std;
 
int main()
{
    cout << ""\n\n Compute the specified expressions and print the output:\n"";
 cout << ""------------------------------------------------------------\n"";
    cout << "" Result of the expression ""<<""(25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5) is : ""<< (25.5 * 3.5 - 3.5 * 3.5) / (40.5 - 4.5) <<""\n"" ; 
}"
704,Formatting the output using type casting,"#include <iostream>
#include <iomanip>
using namespace std;
 
int main() 
{

    cout << ""\n\n Formatting the output using type casting:\n"";
 cout << ""----------------------------------------------\n""; 
 cout<<""Print floating-point number in fixed format with 1 decimal place: "";
   cout << fixed << setprecision(1);
 cout<<""\nTest explicit type casting :\n"";
   int i1 = 4_._ i2 = 8;
   cout << i1 / i2 << endl;    
   cout << (double)i1 / i2 << endl; 
   cout << i1 / (double)i2 << endl;  
   cout << (double)(i1 / i2) << endl;
 
   double d1 = 5.5_._ d2 = 6.6;
cout<<""\nTest implicit type casting :\n"" ;  
   cout << (int)d1 / i2 << endl;    
   cout << (int)(d1 / i2) << endl;   
    cout <<""\nint implicitly casts to double: \n"";
   d1 = i1;    
   cout << d1 << endl;  // 4.0
    cout<<""double truncates to int!: \n"";
   i2 = d2;            
   cout << i2 << endl;  // 6
}"
705,To display hexadecimal integer literals and decimal integer literals.,"#include <iostream>
using namespace std;
int main()
{
// cout outputs integers as decimal integers:
cout << ""Value of 0xFF = "" << 0xFF << "" decimal""
<< endl; // Output: 255 decimal
// The manipulator hex changes output to hexadecimal
// format (dec changes to decimal format):
cout << ""Value of 27 = "" << hex << 27 <<"" hexadecimal""
<< endl; // Output: 1b hexadecimal
return 0;
}"
706,A program with some functions and comments,"#include <iostream>
using namespace std;
void line()_._ message(); // Prototypes
int main()
{
cout << ""Hello! The program starts in main().""
<< endl;
line();
message();
line();
cout << ""At the end of main()."" << endl;
return 0;
}
void line() // To draw a line.
{
cout << ""--------------------------------"" << endl;
}
void message() // To display a message.
{
cout << ""In function message()."" << endl;
}"
707,"Write a C++ program that outputs the following text on screen:
Oh what
a happy day!
Oh yes_._
what a happy day!","#include <iostream>
using namespace std;
int main()
{
cout << "" Oh what "" << endl;
cout << "" a happy day! "" << endl;
cout << "" Oh yes_._ "" << endl;
cout << "" what a happy day! "" << endl;
return 0;
}"
708,display escape sequences use,"#include <iostream>
using namespace std;
int main()
{
cout << ""\nThis is\t a string\n\t\t""
"" with \""many\"" escape sequences!\n"";
return 0;
}"
709, Definition and use of variables,"
#include <iostream>
using namespace std;
int gVar1; // Global variables_._
int gVar2 = 2; // explicit initialization
int main()
{
char ch('A'); // Local variable being initialized
// or: char ch = 'A';
cout << ""Value of gVar1: "" << gVar1 << endl;
cout << ""Value of gVar2: "" << gVar2 << endl;
cout << ""Character in ch: "" << ch << endl;
int sum_._ number = 3; // Local variables with
// and without initialization
sum = number + 5;
cout << ""Value of sum: "" << sum << endl;
return 0;
}"
710, Circumference and area of a circle with radius 2.5,"#include <iostream>
using namespace std;
const double pi = 3.141593;
int main()
{
double area_._ circuit_._ radius = 1.5;
area = pi * radius * radius;
circuit = 2 * pi * radius;
cout << ""\nTo Evaluate a Circle\n"" << endl;
cout << ""Radius: "" << radius << endl
<< ""Circumference: "" << circuit << endl
<< ""Area: "" << area << endl;
return 0;
}"
711, Calculating powers with the standard function pow(),"#include <iostream> // Declaration of cout
#include <cmath> // Prototype of pow()_._ thus:
// double pow( double_._ double);
using namespace std;
int main()
{
double x = 2.5_._ y;
// By means of a prototype_._ the compiler generates
// the correct call or an error message!
// Computes x raised to the power 3:
y = pow(""x""_._ 3.0); // Error! String is not a number
y = pow(x + 3.0); // Error! Just one argument
y = pow(x_._ 3.0); // ok!
y = pow(x_._ 3); // ok! The compiler converts the
// int value 3 to double.
cout << ""2.5 raised to 3 yields: ""
<< y << endl;
// Calculating with pow() is possible:
cout << ""2 + (5 raised to the power 2.5) yields: ""
<< 2.0 + pow(5.0_._ x) << endl;
return 0;
}"
712, Outputs three random numbers,"#include <iostream> // Declaration of cin and cout
#include <cstdlib> // Prototypes of srand()_._ rand():
// void srand( unsigned int seed );
// int rand( void );
using namespace std;
int main()
{
unsigned int seed;
int z1_._ z2_._ z3;
cout << "" --- Random Numbers --- \n"" << endl;
cout << ""To initialize the random number generator_._ ""
<< ""\n please enter an integer value: "";
cin >> seed; // Input an integer
srand( seed); // and use it as argument for a
// new sequence of random numbers.
z1 = rand(); // Compute three random numbers.
z2 = rand();
z3 = rand();
cout << ""\nThree random numbers: ""
<< z1 << "" "" << z2 << "" "" << z3 << endl;
return 0;
}"
713,To use strings.,"#include <iostream> // Declaration of cin_._ cout
#include <string> // Declaration of class string
using namespace std;
int main()
{
// Defines four strings:
string prompt(""What is your name: "")_._
name_._ // An empty
line( 40_._ '-')_._ // string with 40 '-'
total = ""Hello ""; // is possible!
cout << prompt; // Request for input.
getline( cin_._ name); // Inputs a name in one line
total = total + name; // Concatenates and
// assigns strings.
cout << line << endl // Outputs line and name
<< total << endl;
cout << "" Your name is "" // Outputs length
<< name.length() << "" characters long!"" << endl;
cout << line << endl;
return 0;
}"
714,Reads integral decimal values and generates octal_._ decimal_._ and hexadecimal output,"#include <iostream> // Declarations of cin_._ cout and
using namespace std; // manipulators oct_._ hex_._ ...
int main()
{
int number;
cout << ""Please enter an integer: "";
cin >> number;
cout << uppercase // for hex-digits
<< "" octal \t decimal \t hexadecimal\n ""
<< oct << number << "" \t ""
<< dec << number << "" \t ""
<< hex << number << endl;
return 0;
}"
715,Manipulators formatting floating-point numbers,"#include <iostream>
using namespace std;
int main()
{
double x = 12.0;
cout.precision(2); // Precision 2
cout << "" By default: "" << x << endl;
cout << "" showpoint: "" << showpoint << x << endl;
cout << "" fixed: "" << fixed << x << endl;
cout << "" scientific: "" << scientific << x << endl;
return 0;
}"
716,Enters a character and outputs its octal_._ decimal_._ and hexadecimal code,"#include <iostream> // Declaration of cin_._ cout
#include <iomanip> // For manipulators being called
// with arguments.
#include <string>
using namespace std;
int main()
{
int number = ' ';
cout << ""The white space code is as follows: ""
<< number << endl;
char ch;
string prompt =
""\nPlease enter a character followed by ""
"" <return>: "";
cout << prompt;
cin >> ch; // Read a character
number = ch;
cout << ""The character "" << ch
<< "" has code"" << number << endl;
cout << uppercase // For hex-digits
<< "" octal decimal hexadecimal\n ""
<< oct << setw(8) << number
<< dec << setw(8) << number
<< hex << setw(8) << number << endl;
return 0;
}"
717,Inputs an article label and a price,"#include <iostream> // Declarations of cin_._ cout_._...
#include <iomanip> // Manipulator setw()
#include <string>
using namespace std;
int main()
{
string label;
double price;
cout << ""\nPlease enter an article label: "";
// Input the label (15 characters maximum):
cin >> setw(16); // or: cin.width(16);
cin >> label;
cin.sync(); // Clears the buffer and resets
cin.clear(); // any error flags that may be set
cout << ""\nEnter the price of the article: "";
cin >> price; // Input the price
// Controlling output:
cout << fixed << setprecision(2)
<< ""\nArticle:""
<< ""\n Label: "" << label
<< ""\n Price: "" << price << endl;
// ... The program to be continued
return 0;
}"
718, Enter hexadecimal digits and a floating-point number,"#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
int number = 0;
cout << ""\nEnter a hexadecimal number: ""
<< endl;
cin >> hex >> number; // Input hex-number
cout << ""Your decimal input: "" << number << endl;
// If an invalid input occurred:
cin.sync(); // Clears the buffer
cin.clear(); // Reset error flags
double x1 = 0.0_._ x2 = 0.0;
cout << ""\nNow enter two floating-point values: ""
<< endl;
cout << ""1. number: "";
cin >> x1; // Read first number
cout << ""2. number: "";
cin >> x2; // Read second number
cout << fixed << setprecision(2)
<< ""\nThe sum of both numbers: ""
<< setw(10) << x1 + x2 << endl;
cout << ""\nThe product of both numbers: ""
<< setw(10) << x1 * x2 << endl;
return 0;
}"
719,Reads a text with the operator >> and the function getline(),"#include <iostream>
#include <string>
using namespace std;
string header =
"" --- Demonstrates Unformatted Input ---"";
int main()
{
string word_._ rest;
cout << header
<< ""\n\nPress <return> to go on"" << endl;
cin.get(); // Read the new line
// without saving.
cout << ""\nPlease enter a sentence with several words!""
<< ""\nEnd with <!> and <return>.""
<< endl;
cin >> word; // Read the first word
getline( cin_._ rest_._ '!'); // and the remaining text
// up to the character !
cout << ""\nThe first word: "" << word
<< ""\nRemaining text: "" << rest << endl;
return 0;
}"
720,The average of the two numbers,"#include <iostream>
using namespace std;
int main()
{
double x_._ y;
cout << ""\nEnter two floating-point values: "";
cin >> x >> y;
cout << ""The average of the two numbers is: ""
<< (x + y)/2.0 << endl;
return 0;
}"
721,Demonstration of compound assignments,"#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
float x_._ y;
cout << ""\n Please enter a starting value: "";
cin >> x;
cout << ""\n Please enter the increment value: "";
cin >> y;
x += y;
cout << ""\n And now multiplication! "";
cout << ""\n Please enter a factor: "";
cin >> y;
x *= y;
cout << ""\n Finally division."";
cout << ""\n Please supply a divisor: "";
cin >> y;
x /= y;
cout << ""\n And this is ""
<< ""your current lucky number: ""
// without digits after
// the decimal point:
<< fixed << setprecision(0)
<< x << endl;
return 0;
}"
722,Computing the average of numbers,"#include <iostream>
using namespace std;
int main()
{
int x_._ count = 0;
float sum = 0.0;
cout << ""Please enter some integers:\n""
""(Break with any letter)""
<< endl;
while( cin >> x )
{
sum += x;
++count;
}
cout << ""The average of the numbers: ""
<< sum / count << endl;
return 0;
}"
723,One Euro to Dollar Exchange,"#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
double rate = 1.15; // Exchange rate:
// one Euro to one Dollar
cout << fixed << setprecision(2);
cout << ""\tEuro \tDollar\n"";
for( int euro = 1; euro <= 5; ++euro)
cout << ""\t "" << euro
<< ""\t "" << euro*rate << endl;
return 0;
}"
724, Outputs a table of exchange: Euro and US-$,"#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
long euro_._ maxEuro; // Amount in Euros
double rate; // Exchange rate Euro <-> $
cout << ""\n* * * TABLE OF EXCHANGE ""
<< "" Euro – US-$ * * *\n\n"";
cout << ""\nPlease give the rate of exchange: ""
"" one Euro in US-$: "";
cin >> rate;
cout << ""\nPlease enter the maximum euro: "";
cin >> maxEuro;
// --- Outputs the table ---
// Titles of columns:
cout << '\n'
<< setw(12) << ""Euro"" << setw(20) << ""US-$""
<< ""\t\tRate: "" << rate << endl;
// Formatting US-$:
cout << fixed << setprecision(2) << endl;
long lower_._ upper_._ // Lower and upper limit
step; // Step width
// The outer loop determines the actual
// lower limit and the step width:
for( lower=1_._ step=1; lower <= maxEuro;
step*= 10_._ lower = 2*step)
// The inner loop outputs a ""block"":
for( euro = lower_._ upper = step*10;
euro <= upper && euro <= maxEuro; euro+=step)
cout << setw(12) << euro
<< setw(20) << euro*rate << endl;
return 0;
}"
725,How often should the tone be output?,"#include <iostream>
using namespace std;
const long delay = 10000000L;
int main()
{
int tic;
cout << ""\nHow often should the tone be output? "";
cin >> tic;
do
{
for( long i = 0; i < delay; ++i )
;
cout << ""Now the tone!\a"" << endl;
}
while( --tic > 0 );
cout << ""End of the acoustic interlude!\n"";
return 0;
}"
726,Demonstrates the use of if-else statements,"#include <iostream>
using namespace std;
int main()
{
float x_._ y_._ min;
cout << ""Enter two different numbers:\n"";
if( cin >> x && cin >> y) // If both inputs are
{ // valid_._ compute
if( x < y ) // the lesser.
min = x;
else
min = y;
cout << ""\nThe smaller number is: "" << min << endl;
}
else
cout << ""\nInvalid Input!"" << endl;
return 0;
}"
727,Output the fine for driving too fast,"#include <iostream>
using namespace std;
int main()
{
float limit_._ speed_._ toofast;
cout << ""\nSpeed limit: "";
cin >> limit;
cout << ""\nSpeed: "";
cin >> speed;
if( (toofast = speed – limit ) < 10)
cout << ""You were lucky!"" << endl;
else if( toofast < 20)
cout << ""Fine payable: 40_._-. Dollars"" << endl;
else if( toofast < 30)
cout << ""Fine payable: 80_._-. Dollars"" << endl;
else
cout << ""Hand over your driver's license!"" << endl;
return 0;
}"
728,Greater value of the two numbers,"#include <iostream>
using namespace std;
int main()
{
float x_._ y;
cout << ""Type two different numbers:\n"";
if( !(cin >> x && cin >> y) ) // If the input was
{ // invalid.
cout << ""\nInvalid input!"" << endl;
}
else
{
cout << ""\nThe greater value is: ""
<< (x > y ? x : y) << endl;
}
return 0;
}"
729,Sample program containing a break statement,"#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
int ac = 32; // To begin with ASCII Code 32
// without control characters.
while(true)
{ cout << ""\nCharacter Decimal Hexadecimal\n\n"";
int upper;
for( upper =ac + 20; ac < upper && ac < 256; ++ac)
cout << "" "" << (char)ac // as character
<< setw(10) << dec << ac
<< setw(10) << hex << ac << endl;
if( upper >= 256) break;
cout <<""\nGo on -> <return>_._Stop -> <q>+<return>"";
char answer;
cin.get(answer);
if( answer == 'q' || answer == 'Q' )
break;
cin.sync(); // Clear input buffer
}
return 0;
}"
730,Creates a sine function table,"#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
#define PI 3.1415926536
#define START 0.0 // Lower limit
#define END (2.0 * PI) // Upper limit
#define STEP (PI / 8.0) // Step width
#define HEADER (cout << \
"" ***** Sine Function Table *****\n\n"")
int main()
{
HEADER; // Title
// Table Head:
cout << setw(16) << ""x"" << setw(20) << ""sin(x)\n""
<< "" -----------------------------------------""
<< fixed << endl;
double x;
for( x = START; x < END + STEP/2; x += STEP)
cout << setw(20) << x << setw(16) << sin(x)
<< endl;
cout << endl << endl;
return 0;
}"
731,Simulates a bouncing ball MACROS WITH PARAMETERS,"#include <iostream>
#include <string>
using namespace std;
#define DELAY 10000000L // Output delay
#define CLS (cout << ""\033[2J"") // Clear screen
#define LOCATE(z_._s) (cout <<""\033[""<< z <<';'<< s <<'H')
// Position the cursor in row z and column s
void main()
{
int x = 2_._ y = 3_._ dx = 1_._ speed = 0;
string floor(79_._ '-')_._
header = ""**** JUMPING BALL ****"";
CLS;
LOCATE(1_._25); cout << header;
LOCATE(25_._1); cout << floor;
while(true) // Let the ball ""always"" bounce
{ // Terminate by interrupt key (^C)
LOCATE(y_._x); cout << 'o' << endl; // Show the ball
for( long wait = 0; wait < DELAY; ++wait)
;
if(x == 1 || x == 79) dx = -dx; // Bounce off
// a wall?
if( y == 24 ) // On the floor?
{
speed = - speed;
if( speed == 0 ) speed = -7; // Restart
}
speed += 1; // Acceleration = 1
LOCATE(y_._x); cout << ' '; // Clear output
y += speed; x += dx; // New Position
} }"
732, A filter that converts to capitals,"#include <iostream>
#include <cctype>
using namespace std;
int main()
{
char c;
long nChar = 0_._ // Counts all characters
nConv = 0; // and converted characters
while ( cin.get(c) ) // As long as a character
{ ++nChar; // can be read_._ to increment.
if( islower(c)) // Lowercase letter?
{ c = toupper(c); // Converts the character
++nConv; // and counts it.
}
cout.put(c); // Outputs the character.
}
clog << ""\nTotal of characters: "" << nChar
<< ""\nTotal of converted characters: "" << nConv
<< endl;
return 0;
}"
733, REDIRECTING STANDARD INPUT AND OUTPUT:   A filter that numbers lines.,"#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
int main()
{
string line;
int number = 0;
while( getline( cin_._ line)) // As long as a line
{ // can be read.
cout << setw(5) << ++number << "": ""
<< line << endl;
}
return 0;
}"
734,The program draws an ellipse. The points (x_._y) on an ellipse with center (0_._0) and axes A and B satisfy: x = A*cos(t)_._ y = B*sint(t) for 0 <= t <= 2*PI ,"#include <iostream>
#include <cmath> // Prototypes of sin() and cos()
using namespace std;
#define CLS (cout << ""\033[2J"")
#define LOCATE(z_._s) (cout <<""\033[""<<(z)<<';'<<(s)<<'H')
#define DOT(x_._y) (LOCATE(y_._x) << '*')
#define PI 3.1416
#define Mx 40 // The point (Mx_._ My) is the
#define My 12 // center of the ellipse.
#define A 25 // Length of main axis
#define B 10 // Length of subsidiary axis
int main()
{
int x_._ y; // Screen coordinates.
CLS;
// 0 <= t <= PI/2 is a 1/4-circle:
for( double t = 0.0 ; t <= PI/2 ; t += 0.03)
{
x = (int) (A * cos(t) + 0.5);
y = (int) (B * sin(t) + 0.5);
DOT( x+Mx_._ y+My);
DOT( x+Mx_._-y+My);
DOT(-x+Mx_._ y+My);
DOT(-x+Mx_._-y+My);
}
LOCATE(24_._0);
return 0;
}"
735,C++ program to demonstrate Use of strings,"#include <iostream>
#include <string>
using namespace std;
string prompt(""Enter a line of text: "")_._ // Global
line( 50_._ '*'); // strings
int main()
{
string text; // Empty string
cout << line << endl << prompt << endl;
getline( cin_._ text); // Reads a line of text
cout << line << endl
<< ""Your text is "" << text.size()
<< "" characters long!"" << endl;
// Two new strings:
string copy(text)_._ // a copy and the
start(text_._0_._10); // first 10 characters
// starting with
// position 0.
cout << ""Your text:\n"" << copy << endl;
text = ""1234567890""; // Assignment
cout << line << endl
<< ""The first 10 characters:\n"" << start << endl
<< text << endl;
return 0;
}"
736, Reads several lines of text and outputs in reverse order,"#include <iostream>
#include <string>
using namespace std;
string prompt(""Please enter some text!\n"")_._
line( 50_._ '-');
int main()
{
prompt+=""Terminate the input with an empty line.\n "";
cout << line << '\n' << prompt << line << endl;
string text_._ line; // Empty strings
while( true)
{
getline( cin_._ line); // Reads a line of text
if( line.length() == 0) // Empty line?
break; // Yes ->end of the loop
text = line + '\n' + text; // Inserts a new
// line at the beginning.
}
// Output:
cout << line << '\n'
<< ""Your lines of text in reverse order:""
<< '\n' << line << endl;
cout << text << endl;
return 0;
}"
737,Inputs and compares lines of text,"#include <iostream>
#include <string>
using namespace std;
string prompt = ""Please enter two lines of text!\n""_._
line( 30_._ '-');
int main()
{
string line1_._ line2_._ key = ""y"";
while( key == ""y"" || key == ""Y"")
{
cout << line << '\n' << prompt << line << endl;
getline( cin_._ line1); // Read the first
getline( cin_._ line2); // and second line.
if( line1 == line2)
cout << "" Both lines are the same!"" << endl;
else
{
cout << ""The smaller line is:\n\t"";
cout << (line1 < line2 ? line1 : line2)
<< endl;
int len1 = line1.length()_._
len2 = line2.length();
if( len1 == len2)
cout << ""Both lines have the same length! \n"";
else
{ cout << ""The shorter line is:\n\t"";
cout << (len1 < len2 ? line1 : line2)
<< endl;
} }
cout << ""\nRepeat? (y/n) "";
do
getline( cin_._ key);
while( key != ""y"" && key != ""Y""
&& key != ""n"" && key != ""N"");
}
return 0;
}"
738,The program counts words and white space characters. (A word is the maximum sequence of characters containing no white space characters.),"#include <iostream>
#include <string>
#include <cctype> // Macro isspace()
using namespace std;
int main()
{
string header("" **** Counts words ****\n"")_._
prompt(""Enter a text and terminate""
"" with a period and return:"")_._
line( 60_._ '-')_._
text; // Empty string
cout << header << endl << prompt << endl
<< line << endl;
getline( cin_._ text_._ '.'); // Reads a text up to
// the first '.'
// Counts words and white space characters
int i_._ // Index
nSpace = 0_._ // Number of white spaces
nWord = 0; // Number of words
bool fSpace = true; // Flag for white space
for( i = 0; i < text.length(); ++i)
{
if( isspace( text[i]) ) // white space?
{
++nSpace; fSpace = true;
}
else if( fSpace) // At the beginning of a word?
{
++nWord; fSpace = false;
} }
cout << line // Outputs the result.
<< ""\nYour text contains (without periods)""
<< ""\n characters: "" << text.length()
<< ""\n words: "" << nWord
<< ""\n white spaces: "" << nSpace
<< endl;
return 0;
}"
739,To generate and output random numbers.,"#include <iostream>
#include <iomanip>
#include <cstdlib> // For rand()_._ srand()
#include <ctime> // For time()
using namespace std;
bool setrand = false;
inline void init_random() // Initializes the random
{ // number generator with the
// present time.
if( !setrand )
{ srand((unsigned int)time(NULL));
setrand = true;
} }
inline double myRandom() // Returns random number x
{ // with 0.0 <= x <= 1.0
init_random();
return (double)rand() / (double)RAND_MAX;
}
inline int myRandom(int start_._ int end) // Returns the
{ // random number n with
init_random(); // start <= n <= end
return (rand() % (end+1 - start) + start);
}
// Testing myRandom() and myRandom(int_._int):
int main()
{
int i;
cout << ""5 random numbers between 0.0 and 1.0 :""
<< endl;
for( i = 0; i < 5; ++i)
cout << setw(10) << myRandom();
cout << endl;
cout << ""\nAnd now 5 integer random numbers ""
""between -100 and +100 :"" << endl;
for( i = 0; i < 5; ++i)
cout << setw(10) << myRandom(-100_._ +100);
cout << endl;
return 0;
}"
740,Demonstrates the use of using-declarations and using-directives.,"#include <iostream> // Namespace std
void message() // Global function ::message()
{
std::cout << ""Within function ::message()\n"";
}
namespace A
{
using namespace std; // Names of std are visible here
void message() // Function A::message()
{
cout << ""Within function A::message()\n"";
} }
namespace B
{
using std::cout; // Declaring cout of std.
void message(void); // Function B::message()
}
void B::message(void) // Defining B::message()
{
cout << ""Within function B::message()\n"";
}
int main()
{
using namespace std; // Names of namespace std
using B::message; // Function name without
// braces!
cout << ""Testing namespaces!\n"";
cout << ""\nCall of A::message()"" << endl;
A::message();
cout << ""\nCall of B::message()"" << endl;
message(); // ::message() is hidden because
// of the using-declaration.
cout << ""\nCall of::message()"" << endl;
::message(); // Global function
return 0;
}"
741,Demonstrates the definition and use of references.,"#include <iostream>
#include <string>
using namespace std;
float x = 10.7F; // Global
int main()
{
float &rx = x; // Local reference to x
// double &ref = x; // Error: different type!
rx *= 2;
cout << "" x = "" << x << endl // x = 21.4
<< "" rx = "" << rx << endl; // rx = 21.4
const float& cref = x; // Read-only reference
cout << ""cref = "" << cref << endl; // ok!
// ++cref; // Error: read-only!
const string str = ""I am a constant string!"";
// str = ""That doesn't work!""; // Error: str constant!
// string& text = str; // Error: str constant!
const string& text = str; // ok!
cout << text << endl; // ok! Just reading.
return 0;
}"
742, Demonstrating functions with parameters of reference type.,"#include <iostream>
#include <string>
using namespace std;
// Prototypes:
bool getClient( string& name_._ long& nr);
void putClient( const string& name_._ const long& nr);
int main()
{
string clientName;
long clientNr;
cout << ""\nTo input and output client data \n""
<< endl;
if( getClient( clientName_._ clientNr)) // Calls
putClient( clientName_._ clientNr);
else
cout << ""Invalid input!"" << endl;
return 0;
}
bool getClient( string& name_._ long& nr) // Definition
{
cout << ""\nTo input client data!\n""
<< "" Name: "";
if( !getline( cin_._ name)) return false;
cout << "" Number: "";
if( !( cin >> nr)) return false;
return true;
}
// Definition
void putClient( const string& name_._ const long& nr)
{ // name and nr can only be read!
cout << ""\n-------- Client Data ---------\n""
<< ""\n Name: ""; cout << name
<< ""\n Number: ""; cout << nr << endl;
}"
743, Demonstrates the use of return values with reference type.,"#include <iostream>
#include <string>
using namespace std;
// Returns a
double& refMin( double&_._ double&); // reference to
// the minimum.
int main()
{
double x1 = 1.1_._ x2 = x1 + 0.5_._ y;
y = refMin( x1_._ x2); // Assigns the minimum to y.
cout << ""x1 = "" << x1 << "" ""
<< ""x2 = "" << x2 << endl;
cout << ""Minimum: "" << y << endl;
++refMin( x1_._ x2); // ++x1_._ as x1 is minimal
cout << ""x1 = "" << x1 << "" "" // x1 = 2.1
<< ""x2 = "" << x2 << endl; // x2 = 1.6
++refMin( x1_._ x2); // ++x2_._ because x2 is
// the minimum.
cout << ""x1 = "" << x1 << "" "" // x1 = 2.1
<< ""x2 = "" << x2 << endl; // x2 = 2.6
refMin( x1_._ x2) = 10.1; // x1 = 10.1_._ because
// x1 is the minimum.
cout << ""x1 = "" << x1 << "" "" // x1 = 10.1
<< ""x2 = "" << x2 << endl; // x2 = 2.6
refMin( x1_._ x2) += 5.0; // x2 += 5.0_._ because
// x2 is the minimum.
cout << ""x1 = "" << x1 << "" "" // x1 = 10.1
<< ""x2 = "" << x2 << endl; // x2 = 7.6
return 0;
}
double& refMin( double& a_._ double& b) // Returns a
{ // reference to
return a <= b ? a : b; // the minimum.
}"
744, Prints the values and addresses of variables,"#include <iostream>
using namespace std;
int var_._ *ptr; // Definition of variables var and ptr
int main() // Outputs the values and addresses
{ // of the variables var and ptr.
var = 100;
ptr = &var;
cout << "" Value of var: "" << var
<< "" Address of var: "" << &var
<< endl;
cout << "" Value of ptr: "" << ptr
<< "" Address of ptr: "" << &ptr
<< endl;
return 0;
}"
745, Uses objects of class Account,"#include ""Account.h""
int main()
{
Account current1_._ current2;
current1.init(""Cheers_._ Mary""_._ 1234567_._ -1200.99);
current1.display();
// current1.balance += 100; // Error: private member
current2 = current1; // ok: Assignment of
// objects is possible.
current2.display(); // ok
// New values for current2
current2.init(""Jones_._ Tom""_._ 3512347_._ 199.40);
current2.display();
// To use a reference:
Account& mtr = current1; // mtr is an alias name
// for object current1.
mtr.display(); // mtr can be used just
// as object current1.
return 0;
}"
746,Defines and uses a struct.,"#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
struct Representative // Defining struct Representative
{
string name; // Name of a representative.
double sales; // Sales per month.
};
inline void print( const Representative& v) {
cout << fixed << setprecision(2)
<< left << setw(20) << v.name
<< right << setw(10) << v.sales << endl;
}
int main()
{
Representative rita_._ john;
rita.name = ""Strom_._ Rita"";
rita.sales = 37000.37;
john.name = ""Quick_._ John"";
john.sales = 23001.23;
rita.sales += 1700.11; // More Sales
cout << "" Representative Sales\n""
<< ""-------------------------------"" << endl;
print( rita);
print( john);
cout << ""\nTotal of sales: ""
<< rita.sales + john.sales << endl;
Representative *ptr = &john; // Pointer ptr.
// Who gets the
if( john.sales < rita.sales) // most sales?
ptr = &rita;
cout << ""\nSalesman of the month: ""
<< ptr->name << endl; // Representative's name
// pointed to by ptr.
return 0;
}"
747, Using the constructors of class Account,"#include ""account.h""
int main()
{
Account giro(""Cheers_._ Mary""_._ 1234567_._ -1200.99 )_._
save(""Lucky_._ Luke"");
Account depot; // Error: no default constructor
// defined.
giro.display(); // To output
save.display();
Account temp(""Funny_._ Susy""_._ 7777777_._ 1000000.0);
save = temp; // ok: Assignment of
// objects possible.
save.display();
// Or by the presently available method init():
save.init(""Lucky_._ Luke""_._ 7654321_._ 1000000.0);
save.display();
return 0;
}"
748,Outputs constructor and destructor calls.,"#include <iostream>
#include <string>
using namespace std;
int count = 0; // Number of objects.
class Demo
{
private: string name;
public: Demo( const string& ); // Constructor
~Demo(); // Destructor
};
Demo::Demo( const string& str)
{
++count; name = str;
cout << ""I am the constructor of ""<< name << '\n'
<< ""This is the "" << count << "". object!\n""
}
Demo:: ~Demo() // Defining the destructor
{
cout << ""I am the destructor of "" << name << '\n'
<< ""The "" << count << "". object ""
<< ""will be destroyed "" << endl;
--count;
}
// -- To initialize and destroy objects of class Demo --
Demo globalObject(""the global object"");
int main()
{
cout << ""The first statement in main()."" << endl;
Demo firstLocalObject(""the 1. local object"");
{
Demo secLocalObject(""the 2. local object"");
static Demo staticObject(""the static object"");
cout << ""\nLast statement within the inner block""
<< endl;
}
cout << ""Last statement in main()."" << endl;
return 0;
}"
749,Using standard methods.,"#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
class CD
{ private:
string interpret_._ title;
long seconds; // Time duration of a song
public:
CD( const string& i=""""_._ const string& t=""""_._ long s = 0L)
{
interpret = i; title = t; seconds = s;
}
const string& getInterpret() const{ return interpret; }
const string& getTitle() const { return title; }
long getSeconds() const { return seconds; }
};
// Generate objects of class CD and output it in tabular form
void printLine( CD cd) ; // A row of the table
int main()
{
CD cd1( ""Mister X""_._ ""Let's dance""_._ 30*60 + 41)_._
cd2( ""New Guitars""_._ ""Flamenco Collection""_._ 2772 )_._
cd3 = cd1_._ // Copy constructor!
cd4; // Default constructor.
cd4 = cd2; // Assignment!
string line( 70_._'-'); line += '\n';
cout << line << left
<< setw(20) << ""Interpreter"" << setw(30) << ""Title""
<< ""Length (Min:Sec)\n"" << line << endl;
printLine(cd3); // Call by value ==>
printLine(cd4); // Copy constructor!
return 0;
}
void printLine( CD cd)
{ cout << left << setw(20) << cd.getInterpret()
<< setw(30) << cd.getTitle()
<< right << setw(5) << cd.getSeconds() / 60
<< ':' << setw(2) << cd.getSeconds() % 60 << endl;
}"
750,Global function currentTime(),"#include ""DayTime.h""
#include <ctime> // Functions time()_._ localtime()
using namespace std;
const DayTime& currentTime() // Returns the
{ // present time.
static DayTime curTime;
time_t sec; time(&sec); // Gets the present time.
// Initializes the struct
struct tm *time = localtime(&sec); // tm with it.
curTime.setTime( time->tm_hour_._ time->tm_min_._
time->tm_sec );
return curTime;
}"
751, Tests class DayTime and function currentTime(),"#include ""DayTime.h"" // Class definition
#include <iostream>
using namespace std;
const DayTime& currentTime(); // The current time.
int main()
{
DayTime cinema( 20_._30);
cout << ""\nThe movie starts at "";
cinema.print();
DayTime now(currentTime()); // Copy constructor
cout << ""\nThe current time is "";
now.print();
cout << ""\nThe movie has "";
if( cinema.isLess( now) )
cout << ""already begun!\n"" << endl;
else
cout << ""not yet begun!\n"" << endl;
return 0;
}"
752, Tests constructors of class Result,"#include ""Result.h""
#include <iostream>
using namespace std;
int main() // Some air temperature measurements
{
DayTime morning(6_._30);
Result t1_._ // Default constructor
t2( 12.5_._ morning)_._
t3( 18.2_._ 12_._0_._0)_._
t4(17.7); // at current time
cout << ""Default values: ""; t1.print();
cout << ""\n Temperature Time \n""
<< ""-------------------------"" << endl;
t2.print();
t3.print();
t4.print();
cout << endl;
return 0;
}"
753,Uses enumeration-constants within a class.,"#include <iostream>
using namespace std;
class Lights
{
public: // Enumeration for class Lights
enum State { off_._ red_._ green_._ amber };
private:
State state;
public:
Lights( State s = off) : state(s) {}
State getState() const { return state; }
void setState( State s)
{ switch(s)
{ case off: cout << "" OFF ""; break;
case red: cout << "" RED ""; break;
case green: cout << "" GREEN ""; break;
case amber: cout << "" AMBER ""; break;
default: return;
}
state = s;
}
};
int main()
{
cout << ""Some statements with objects ""
<< ""of type Lights!\n""
Lights A1_._ A2(Lights::red);
Lights::State as;
as = A2.getState();
if( as == Lights::red) {
A1.setState( Lights::red);
A2.setState( Lights::amber);
}
cout << endl;
return 0;
}"
754,To input numbers into an array and output after,"#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
const int MAXCNT = 10; // Constant
float arr[MAXCNT]_._ x; // Array_._ temp. variable
int i_._ cnt; // Index_._ quantity
cout << ""Enter up to 10 numbers \n""
<< ""(Quit with a letter):"" << endl;
for( i = 0; i < MAXCNT && cin >> x; ++i)
arr[i] = x;
cnt = i;
cout << ""The given numbers:\n"" << endl;
for( i = 0; i < cnt; ++i)
cout << setw(10) << arr[i];
cout << endl;
return 0;
}"
755, The program computes the first 20 Fibonacci numbers and the corresponding Fibonacci quotients.,"#include <iostream>
#include <iomanip>
#include <cmath> // Prototype of sqrt()
#include <string>
using namespace std;
#define COUNT 20
long fib[COUNT + 1] = { 0_._ 1 };
string header =
"" Index Fibonacci number Fibonacci quotient Deviation""
""\n of limit ""
""\n---------------------------------------------------"";
int main()
{
int i;
double q_._ lim;
for( i=1; i < COUNT; ++i ) // Computing the
fib[i+1] = fib[i] + fib[i-1]; // Fibonacci numbers
lim = ( 1.0 + sqrt(5.0)) / 2.0; // Limit
// Title and the first two Fibonacci numbers:
cout << header << endl;
cout << setw(5) << 0 << setw(15) << fib[0] << endl;
cout << setw(5) << 1 << setw(15) << fib[1] << endl;
// Rest of the table:
for( i=2; i <= COUNT; i++ )
{ // Quotient:
q = (double)fib[i] / (double)fib[i-1];
cout << setw(5) << i << setw(15) << fib[i]
<< setw(20) << fixed << setprecision(10) << q
<< setw(20) << scientific << setprecision(3)
<< lim - q << endl;
}
return 0;
}"
756,An array containing objects of class Account.,"#include ""account.h"" // Definition of class Account
#include <iostream>
using namespace std;
Account giro(""Lucky_._ Peter""_._ 1234567_._ -1200.99 );
Account accountTab[] =
{
Account(""Tang_._ Sarah""_._ 123000_._ 2500.0)_._
Account(""Smith_._ John""_._ 543001)_._
Account()_._ // Default constructor
""Li_._ Zhang""_._ // Account(""Li_._ Zhang"")_._
giro // Account(giro)
};
int cnt = sizeof(accountTab) / sizeof(Account);
int main()
{
// To set some values:
accountTab[1].setState( 10000.00);
// Assignment ok:
accountTab[2] = Account(""Pit_._ Dave""_._ 727003_._ 200.00);
cout << ""The accounts in the table:"" << endl;
for( int i = 0; i < cnt; ++i)
{
accountTab[i].display();
if( i % 3 == 2)
{
cout << ""Press return to go on!\n"";
cin.get();
} }
cout << endl;
return 0;
}"
757, Demonstrates multidimensional arrays.,"#include <iostream>
#include <iomanip>
using namespace std;
char representative[2][20] = {""Armstrong_._ Wendy""_._
""Beauty_._ Eve""};
// Each representative has five different
// articles available_._ having sold the following:
int articleCount[2][5] = { { 20_._ 51_._ 30_._ 17_._ 44}_._
{150_._ 120_._ 90_._ 110_._ 88}
};
int main()
{
for( int i=0; i < 2; i++ )
{
cout <<""\nRepresentative: "" << representative[i];
cout << ""\nNumber of items sold: "";
for( int j = 0; j < 5; j++ )
cout << setw(6) << articleCount[i][j];
cout << endl;
}
return 0;
}"
758,Using arrays of char and pointers to char,"#include <iostream>
using namespace std;
int main()
{
cout << ""Demonstrating arrays of char ""
<< ""and pointers to char.\n""
<< endl;
char text[] = ""Good morning!""_._
name[] = ""Bill!"";
char *cPtr = ""Hello ""; // Let cPtr point
// to ""Hello "".
cout << cPtr << name << '\n'
<< text << endl;
cout << ""The text \"""" << text
<< ""\"" starts at address "" << (void*)text
<< endl;
cout << text + 6 // What happens now?
<< endl;
cPtr = name; // Let cPtr point to name_._ i.e. *cPtr
// is equivalent to name[0]
cout << ""This is the "" << *cPtr << "" of "" << cPtr
<< endl;
*cPtr = 'k';
cout << ""Bill can not "" << cPtr << ""!\n"" << endl;
return 0;
}"
759, Outputs addresses and values of array elements.,"#include <iostream>
using namespace std;
int arr[4] = { 0_._ 10_._ 20_._ 30 };
int main()
{
cout << ""\nAddress and value of array elements:\n""
<< endl;
for( int i = 0; i < 4; i++ )
cout << ""Address: "" << (void*)(arr+i) // &arr[i]
<< "" Value: "" << *(arr+i) // arr[i]
<< endl;
return 0;
}"
760, Defines and calls the function reverse(). reverse() copies a C string into another C string and reverses the order of characters,"#include <iostream>
using namespace std;
#include <string.h> // Header-File for Cstrings_._
// here for strlen().
void reverse( char str[]_._ char umstr[]); // Prototype
int main() // Read a word and
{ // output in reversed order.
const int CNT = 81;
char word[CNT]_._ revword[CNT];
cout << ""Enter a word: "";
cin.width(CNT); // maximal CNT-1 characters
cin >> word;
reverse( word_._ revword); // Call
cout << ""\nThe \""reversed\"" word: "" << revword
<< endl ;
return 0;
}
void reverse( char s1[]_._ char s2[]) // Copies the
{ // reversed C string s1 to s2
int j = 0;
for( int i = strlen(s1)-1; i >= 0; i--_._ j++)
s2[j] = s1[i];
s2[j] = '\0'; // Terminating character
}"
761,Defines and calls a function_._ which outputs a list of overdrawn accounts.,"#include ""account.h"" // Definition of class Account.
Account accountTab[] = // Table with Account-objects.
{ Account(""Twain_._ Mark""_._ 1234567_._ -3434.30)_._
Account(""Crusoe_._ Robinson""_._ 200000_._ 0.00)_._
Account(""Temple_._ Shirley""_._ 543001_._ +777.70)_._
Account(""Valentin_._ Carl""_._ 543002_._ -1111.10)_._
};
int cnt = sizeof(accountTab) / sizeof(Account);
// Prototype:
int displayOverdraw( const Account *aTab_._ int cnt_._
double limit);
int main()
{
double limit = 0.0;
cout << ""Output the overdrawn accounts!\n""
<< ""These are the accounts_._ which fell below \n""
<< ""the limit_._ ex. -1000.00.\n"" << endl;
cout << ""What is the limit? "";
cin >> limit;
cout << ""Listing the overdrawn accounts:\n"" << endl;
if( displayOverdraw( accountTab_._ cnt_._ limit) == 0)
cout << ""\nNo account found!""
<< endl;
return 0;
}
int displayOverdraw( const Account *aTab_._ int cnt_._
double limit)
{ int count = 0;
const Account* aPtr;
for( aPtr = aTab; aPtr < aTab + cnt; ++aPtr)
if( aPtr->getState() < limit ) // Below the limit?
{
aPtr->display(); // Yes -> display.
++count;
}
return count;
}"
762, A filter to output all lines containing a given pattern. The function strstr() is called.Call: search1 [ < text.dat ],"#include <iostream>
using namespace std;
#define MAXL 200 // Maximum length of line
namespace MyScope
{ // Self-defined version of function strstr():
char *strstr( const char *str_._ const char *patt);
}
char line[500]_._ // For a line of text.
patt[] = ""is""; // The search pattern.
int main()
{ int lineNr = 0; // As long as a line is left over:
while( cin.getline( line_._ MAXL))
{
++lineNr;
if( MyScope::strstr( line_._ patt) != NULL)
{ // If the pattern is found:
cout.width(3);
cout << lineNr << "": "" // Output the line
<< line << endl; // number and the line
} }
return 0;
}"
763,Demonstrates the command line arguments.,"#include <iostream>
using namespace std;
int main( int argc_._ char *argv[])
{
if( argc != 3 )
{
cerr << ""Use: hello name1 name2"" << endl;
return 1;
}
cout << ""Hello "" << argv[1] << '!' << endl;
cout << ""Best wishes \n""
<< ""\tyours "" << argv[2] << endl;
return 0;
}"
764, Reads a text file and outputs it in pages_._i.e. 20 lines per page.,"#include <iostream>
#include <fstream>
using namespace std;
int main( int argc_._ char *argv[])
{
if( argc != 2 ) // File declared?
{
cerr << ""Use: showfile filename"" << endl;
return 1;
}
ifstream file( argv[1]); // Create a file stream
// and open for reading.
if( !file ) // Get status.
{
cerr << ""An error occurred when opening the file ""
<< argv[1] << endl;
return 2;
}
char line[80];
int cnt = 0;
while( file.getline( line_._ 80)) // Copy the file
{ // to standard
cout << line << endl; // output.
if( ++cnt == 20)
{
cnt = 0;
cout << ""\n\t ---- <return> to continue ---- ""
<< endl;
cin.sync(); cin.get();
} }
if( !file.eof() ) // End-of-file occurred?
{
cerr << ""Error reading the file ""
<< argv[1] << endl;
return 3;
}
return 0;
}"
765, Copies files.,"#include <iostream>
#include <fstream>
using namespace std;
inline void openerror( const char *file)
{
cerr << ""Error on opening the file "" << file << endl;
exit(1); // Ends program closing
} // all opened files.
void copy( istream& is_._ ostream& os); // Prototype
int main(int argc_._ char *argv[])
{
if( argc < 2 || argc > 3)
{ cerr << ""Call: fcopy1 source [ destination ]""
<< endl;
return 1; // or: exit(1);
}
ifstream infile(argv[1]); // Open 1st file
if( !infile.is_open())
openerror( argv[1]);
if( argc == 2) // Just one sourcefile.
copy( infile_._ cout);
else // Source and destination
{
ofstream outfile(argv[2]); // Open 2nd file
if( !outfile.is_open() )
openerror( argv[2]);
copy( infile_._ outfile);
outfile.close(); // Unnecessary.
}
infile.close(); // Unnecessary.
return 0;
}
void copy( istream& is_._ ostream& os) // Copy it to os.
{
char c;
while( is.get(c) )
os.put(c); // or: os << c ;
}"
766,Demonstrating output of records block by block.,"#include <iostream>
#include <fstream>
using namespace std;
char header[] =
"" * * * P I Z Z A P R O N T O * * *\n\n"";
// Record structure:
struct Pizza { char name[32]; float price; };
const int MAXCNT = 10;
Pizza pizzaMenu[MAXCNT] =
{
{ ""Pepperoni""_._ 9.90F }_._ { ""White Pizza""_._ 15.90F }_._
{ ""Ham Pizza""_._ 12.50F }_._ { ""Calzone""_._ 14.90F } };
int cnt = 4;
char pizzaFile[256] = ""pizza.fle"";
int main() // To write records.
{
cout << header << endl;
// To write data into the file:
int exitCode = 0;
ofstream outFile( pizzaFile_._ ios::out|ios::binary );
if( !outFile)
{
cerr << ""Error opening the file!"" << endl;
exitCode = 1;
}
else
{
for( int i = 0; i < cnt; ++i)
if( !outFile.write( (char*)&pizzaMenu[i]_._
sizeof(Pizza)) )
{ cerr << ""Error writing!"" << endl;
exitCode = 2;
} }
if( exitCode == 0)
cout << ""\nData has been added to file ""
<< pizzaFile << ""\n"" << endl;
return exitCode;
}"
767,Tests the operators of class Euro using overloaded operators,"#include ""Euro1.h"" // Definition of the class
#include <iostream>
using namespace std;
int main()
{
cout << ""* * * Testing the class Euro * * *\n"" << endl;
Euro wholesale( 20_._50)_._ retail;
retail = wholesale; // Standard assignment
retail += 9.49; // += (Euro)9.49
cout << ""Wholesale price: ""; wholesale.print(cout);
cout << ""Retail price: ""; retail.print(cout);
Euro discount( 2.10); // double-constructor
retail -= discount;
cout << ""\nRetail price including discount: "";
retail.print(cout);
wholesale = 34.10;
cout << ""\nNew wholesale price: "";
wholesale.print(cout);
Euro profit( retail - wholesale); // Subtraction and
// copy constructor
cout << ""\nThe profit: "";
profit.print(cout); // Negative!
return 0;
}"
768,Dynamic Storage Allocation  The operators new and delete for classes.,"#include ""account.h""
#include <iostream>
using namespace std;
Account *clone( const Account* pK); // Create a copy
// dynamically.
int main()
{
cout << ""Dynamically created objects.\n"" << endl;
// To allocate storage:
Account *ptrA1_._ *ptrA2_._ *ptrA3;
ptrA1 = new Account; // With default constructor
ptrA1->display(); // Show default values.
ptrA1->setNr(302010); // Set the other
ptrA1->setName(""Tang_._ Ming""); // values by access
ptrA1->setStand(2345.87); // methods.
ptrA1->display(); // Show new values.
// Use the constructor with three arguments:
ptrA2 = new Account(""Xiang_._ Zhang""_._ 7531357_._ 999.99);
ptrA2->display(); // Display new account.
ptrA3 = clone( ptrA1); // Pointer to a dyna-
// mically created copy.
cout << ""Copy of the first account: "" << endl;
ptrA3->display(); // Display the copy.
delete ptrA1; // Release memory
delete ptrA2;
delete ptrA3;
return 0;
}
Account *clone( const Account* pK) // Create a copy
{ // dynamically.
return new Account(*pK); }"
769,Dynamic Storage Allocation  for arrays,"#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
cout << ""Using a dynamic array.\n"" << endl;
int size = 0_._ cnt = 0_._ step = 10_._
i;
float x_._ *pArr = NULL;
cout << ""Enter some numbers!\n""
""End with q or another character "" << endl;
while( cin >> x)
{
if( cnt >= size) // Array too small?
{ // => enlarge it.
float *p = new float[size+step];
// Copy the numbers:
for( i = 0; i < size; ++i)
p[i] = pArr[i];
delete [] pArr; // Release old array:
pArr = p; size += step;
}
pArr[cnt++] = x;
}
// Work with the numbers:
if( cnt == 0)
cout << ""No invalid input!"" << endl;
else
{
float sum = 0.0;
cout << ""Your input: "" << endl;
for( i = 0; i < cnt; i++) // To output and
{ // add.
cout << setw(10) << pArr[i];
sum += pArr[i];
}
cout << ""\nThe average: "" << sum/cnt << endl;
}
delete [] pArr; // To free the storage
return 0;
}"
770,objects of derived classes Testing the base class Car and the derived class PassCar,"#include ""car.h""
int main()
{
const PassCar beetle(""Beetle""_._ false_._ 3421_._ ""VW"");
beetle.display();
cout << ""\nAnd the passenger car number again: ""
<< beetle.getNr() << endl;
PassCar cabrio(""Carrera""_._ true);
cabrio.setNr(1000);
cabrio.setProd(""Porsche"");
cabrio.display();
cout << ""\nOnly data of the base class: "";
cabrio.Car::display();
return 0;
}"
771,Base class with a virtual destructor.,"#include <iostream>
#include <cstring> // For strcpy()
using namespace std;
class Base
{
public:
Base()
{ cout << ""Constructor of class Base\n""; }
virtual ~Base()
{ cout << ""Destructor of class Base\n""; }
};
class Data
{
private:
char *name;
public:
Data( const char *n)
{ cout << ""Constructor of class Data\n"";
name = new char[strlen(n)+1]; strcpy(name_._ n);
}
~Data()
{ cout << ""Destructor of class Data for ""
<< ""object: "" << name << endl;
delete [] name;
}
};
class Derived : public Base
{
private:
Data data;
public:
Derived( const char *n) : data(n)
{ cout << ""Constructor of class Derived\n""; }
~Derived() // implicit virtual
{ cout << ""Destructor of class Derived\n""; }
};
int main()
{
Base *bPtr = new Derived(""DEMO"");
cout << ""\nCall to the virtual Destructor!\n"";
delete bPtr;
return 0;
}"
772,Testing a stack,"#include <iostream>
#include <iomanip>
using namespace std;
#include ""stack.h""
typedef Stack<unsigned> USTACK; // Stack for elements
// of type unsigned.
void fill( USTACK& stk );
void clear( USTACK& stk );
int main()
{
USTACK ustk(256); // Create and fill
fill( ustk); // the original stack.
USTACK ostk(ustk); // Copy.
cout << ""The copy: "" << endl;
clear( ostk); // Output and clear the copy.
cout << ""The original: "" << endl;
clear( ustk ); // Output_._ clear the original.
return 0;
}
void fill( USTACK& stk )
{
unsigned x;
cout << ""Enter positive integers (quit with 0):\n"";
while( cin >> x && x != 0 )
if( !stk.push(x) )
{
cerr << ""Stack is full!""; break;
} }
void clear( USTACK& stk )
{
if(stk.empty())
cerr << ""Stack is empty!"" << endl;
else
{
unsigned x;
while( stk.pop(x))
cout << setw(8) << x << "" "";
cout << endl;
} }"
773, Passing arguments to function templates,"#include <iostream>
using namespace std;
template <class T>
T min( T x_._ T y)
{
return( (x < y) ? x : y);
}
int main()
{
short x = 10_._ y = 2;
cout << ""x = "" << x << "" y = "" << y << endl;
cout << ""The smaller value is: ""
<< min(x_._ y) << endl; // Call is ok.
double z1 = 2.2;
float z2 = 1.1F;
cout << ""\nThe smaller value is: ""
<< min(z1_._ z2) << endl; // Not ok!
double z3 = 1.1;
cout << ""\nz1 = "" << z1
<< "" z3 = "" << z3 << endl;
cout << ""The smaller value is: ""
<< min(z1_._ z3) << endl; // Call is ok.
return 0;
}"
774,Tests explicit instantiation,"#include <iostream>
#include <iomanip>
using namespace std;
#include ""quadMat.h""
// Explicit Instantiation:
template class QuadMatrix<long double_._ 5>;
int main()
{
QuadMatrix<long double_._ 5> m;
try
{
for(int k=0; k < m.dim(); k++)
{
for( int l = 0; l < m.dim(); l++)
{
m[k][l] = k*l;
cout << setw(2) << m[k][l] << "" "";
}
cout << endl;
} }
catch(out_of_range& err )
{
cerr << err.what() << endl;
}
return 0;
}"
775,Tests list operations,"#include <list>
#include <cstdlib>
#include <iostream>
using namespace std;
typedef list<int> INTLIST;
int display( const INTLIST& c);
int main()
{
INTLIST ls_._ sls;
int i;
for( i = 1; i <= 3; i++)
ls.push_back( rand()%10 ); // ex. 1 7 4
ls.push_back(ls.front()); // 1 7 4 1
ls.reverse(); // 1 4 7 1
ls.sort(); // 1 1 4 7
for( i = 1; i <= 3; i++)
sls.push_back( rand()%10 ); // ex. 0 9 4
// Insert first object of sls before the last in ls:
INTLIST::iterator pos = ls.end();
ls.splice(--pos_._ sls_._ sls.begin()); // 1 1 4 0 7
display(sls); // 9 4
ls.sort(); // 0 1 1 4 7
sls.sort(); // 4 9
ls.merge(sls); // 0 1 1 4 4 7 9
ls.unique(); // 0 1 4 7 9
return 0;
}"
776," program to print out ""Hello World""","#include <iostream.h> 
int main() 
{ 
 cout << ""Hello World\n""; 
 return (0); 
}"
777,variables and expressions,"#include <iostream.h> 
int term; // term used in two expressions 
main() 
{ 
 term = 3 * 5; 
 cout << ""Twice << term << "" is ""<< 2*term << ""\n""; 
 cout << ""Three times "" << term << "" is "" << 3*term << ""\n""; 
 return (0); 
}"
778,Program for floating numbers,"int integer; // an integer 
float floating; // a floating point number 
main() 
{ 
 floating = 1.0 / 2.0; // assign floating 0.5 
 integer = 1 / 3; // assign integer 0 
 floating = (1 / 2) + (1 / 2); // assign floating 0.0 
 floating = 3.0 / 2.0; // assign floating 1.5 
 integer = floating; // assign integer 1 
 return (0); 
}"
779,Program demonstrating result of divide in float,"#include <iostream.h> 
float answer; // the result of the divide 
main () 
{
 answer = 1/3; 
 cout << ""The value of 1/3 is "" << answer << ""\n""; 
 return (0); 
}"
780,Reverses three characters,"#include <iostream.h> 
char char1; // first character 
char char2; // second character 
char char3; // third character 
main() 
{ 
 charl = 'A'; 
 char2 = 'B'; 
 char3 = 'C'; 
 cout << charl << char2 << char3 << "" reversed is ""<< 
 char3 << char2 << charl << ""\n""; 
 return (0); 
}"
781,computes the total and average of five numbers.,"#include <iostream.h> 
float data[5]; // data to average and total 
float total; // the total of the data items 
float average; // average of the items 
main () 
{ 
 data[0] = 34.0; 
 data[1] = 27.0; 
 data[2] = 46.5; 
 data[3] = 82.0; 
 data[4] = 22.0; 
 
 total = data[0] + data[1] + data[2] + data[3] + data[4]; 
 average = total / 5.0; 
 cout << ""Total ""<< total << "" Average "" << average << '\n'; 
 return (0); 
}"
782,c++ program to illustrates how strcpy is used.,"#include <iostream.h> 
#include <string.h> 
char name[30]; // First name of someone 
main() 
{ 
 strcpy(name_._ ""Sam""); 
 cout << ""The name is "" << name << '\n'; 
 return (0); 
}"
783,print name of a person,"#include <string.h> 
#include <iostream.h> 
char first[100]; // first name 
char last[100]; // last name 
char full_name[100]; // full version of first and last name 
main () 
{ 
 strcpy(first_._ ""Steve""); // Initialize first name 
 strcpy(last_._ ""Oualline""); // Initialize last name 
 
 strcpy(full_name_._ first); // full = ""Steve"" 
 // Note: strcat not strcpy 
 strcat(full_name_._ "" ""); // full = ""Steve"" 
 strcat(full_name_._ last);cout << ""The full name is "" << full_name << '\n'; 
 return (0); 
}"
784,we use cin to get a number from the user and then we double it:,"#include <iostream.h> 
char line[100]; // input line from console 
int value; // a value to double 
main () 
{ 
 cout << ""Enter a value: ""; 
 cin >> value; 
 cout << ""Twice "" << value << "" is "" << value * 2 << '\n'; 
 return (0); 
}"
785,area of rectangle,"#include <iostream.h> 
int height; /* the height of the triangle 
int width; /* the width of the triangle */ 
int area; /* area of the triangle (computed) */ 
main() 
{ 
 cout << ""Enter width height? ""; 
 cin >> width >> height; 
 area = (width * height) / 2; 
 cout << ""The area is "" << area << '\n'; 
 return (0); 
}"
786, reads a line from the keyboard and reports the line's length.,"#include <string.h> 
#include <iostream.h> 
char line[100]; // A line of data 
main() 
{
 cout << ""Enter a line:""; 
 cin.getline(line_._ sizeof(line)); 
 
 cout << ""The length of the line is: "" << strlen(line) << '\n'; 
 return (0); 
 
}"
787, how to write out a very short integer as a number,"#include <iostream.h> 
signed char ch; // Very short integer 
 // Range is -128 to 127 
 
int main() 
{
 ch = 37; 
 cout << ""The number is "" << int(ch) << '\n'; 
 return (0); 
}"
788,Fibonacci series,"#include <iostream.h> 
int old_number; // previous Fibonacci number 
int current_number; // current Fibonacci number 
int next_number; // next number in the series 
main() 
{ 
 // start things out 
 old_number = 1; 
 current_number = 1; 
 
 cout << ""l\n""; // Print first number 
 
 while (current_number < 100) { 
 
 cout << current_number << '\n'; 
 next_number = current_number + old_number; 
 
 old_number = current_number; 
 current_number = next_number; 
 }
 return (0); 
}"
789,infinite loop exit through break statement,"#include <iostream.h> 
int total; // Running total of all numbers so far 
int item; // next item to add to the list 
main() 
{ 
 total = 0; 
 while (1) 
 cout << ""Enter # to add \n""; 
 cout << "" or 0 to stop:""; 
 cin >> item; 
 
 if (item == 0) 
 break; 
 
 total += item; 
 cout << ""Total: "" << total << '\n'; 
 } 
 cout << ""Final total "" << total << '\n'; 
 return (0); 
}"
790,cpp program to demonstrate for while using continue statement,"#include <iostream.h> 
int total; // Running total of all numbers so far 
int item; // next item to add to the list 
int minus_items; // number of negative items 
main () 
{ 
 total = 0; 
 minus_items = 0; 
 while (1) { 
 cout << ""Enter # to add\n""; 
 cout << "" or 0 to stop:""; 
 cin >> item; 
 
 if (item == 0) 
 break; 
 
 if (item < 0) { 
 ++minus_items; 
 continue; 
 } 
 total += item; 
 cout << ""Total: "" << total << '\n'; 
 } 
 
 cout << ""Final total "" << total << '\n'; 
 cout << ""with << minus_items << "" negative items omitted\n""; 
 return (0); 
}"
791,if else conditioning example,"#include <iostream.h> 
int balance_owed; // amount owed 
main () 
{ 
 cout << ""Enter number of dollars owed:""; 
 cin >> balance_owed; 
 
 if (balance_owed = 0) 
 cout << ""You owe nothing.\n""; 
 else 
 cout << ""You owe "" << balance_owed << "" dollars.\n""; 
 
 return (0); 
}"
792,The code for the first version of the four-function calculator,"#include <iostream.h> 
int result; // the result of the calculations 
char oper_char; // the user-specified operator 
int value; // value specified after the operator 
int main() 
{ 
 result = 0; // initialize the result 
 
 // Loop forever (or till we hit the break statement) 
 while (1) { 
 cout << ""Result: "" << result << '\n'; 
 
 cout << ""Enter operator and number: ""; 
 cin >> oper_char; 
 cin >> value; 
 
 if (oper_char = '+') 
 result += value; 
 } else { 
 cout << ""Unknown operator "" << oper_char << '\n'; 
 } 
 } 
 return (0); 
}"
793,Mathematical operators testing using if else,"#include <iostream.h> 
int result; // the result of the calculations 
char oper_char; // the user-specified operator 
int value; // value specified after the operator 
main () 
{
 result = 0; // initialize the result 
 
 // loop forever (or until break reached) 
 while (1) { 
 cout << ""Result: "" << result << '\n'; 
 cout << ""Enter operator and number: ""; 
 
 cin >> oper_char; 
 
 if ((oper_char == 'q') || (oper_char == 'Q')) 
 break; 
 
 cin >> value; 
 if (oper_char == '+') 
 result += value; 
 } else if (oper_char == '-') { 
 result -= value; 
 } else if (oper_char == '*') 
 result *= value; 
 } else if (oper_char == '/') 
 if (value == 0) 
 cout << ""Error: Divide by zero\n""; 
 cout << "" operation ignored\n""; 
 } else 
 result /= value; 
 } else { 
 cout << ""Unknown operator "" << oper_char << '\n';
 } 
 }
 return (0);
}"
794,"A random number is chosen between 1 and 100. *
 * The player is given a set of bounds and *
 * must choose a number between them. *
 * If the player chooses the correct number_._ he wins*
 * Otherwise_._ the bounds are adjusted to reflect *
 * the players guess and the game continues","#include <iostream.h> 
#include <stdlib.h> 
int number_to_guess; // Random number to be guessed 
int low_limit; // Current lower limit of player's range 
int high_limit; // Current upper limit of player's range 
int guess_count; // Number of times player guessed 
int player_number; // Number gotten from the player 
char line[80]; // Input buffer for a single line 
main() 
{ 
 while (1) 
 /* 
 * Not a pure random number; see restrictions 
 */ 
 number_to_guess = rand() % 100 + 1; 
 
 // Initialize variables for loop 
 low_limit = 0; 
 high_limit = 100; 
 guess_count = 0; 
 
 while (1) { 
 // Tell user what the bounds are and get his guess 
 cout << ""Bounds "" << low_limit << "" - "" << high_limit << '\n'; 
 cout << ""Value["" << guess_count << ""]? ""; 
 
 ++guess_count; 
 
 cin >> player_number; 
 
 // Did he guess right? 
 if (player_number == number_to_guess) 
 break; 
 
 // Adjust bounds for next guess 
 if (player_number < number_to_guess) 
 low_limit = player_number; 
 else 
 high_limit = player_number; 
 
 { 
 cout << ""Bingo\n""; 
 { 
 return (0); 
}"
795,a while loop to add five numbers,"#include <iostream.h> 
int total; // Total of all the numbers
int current; // Current value from the user
int counter; // While loop counter
main() {
 total = 0; 
 
 counter = 0; 
 while (counter < 5)
 cout << ""Number? ""; 
 
 cin >> current; 
 total += current; 
 
 ++counter; 
 } 
 cout << ""The grand total is "" << total << '\n'; 
 return (0); 
}"
796,for loop to add five numbers,"#include <iostream.h> 
int total; // Total of all the numbers 
int current; // Current value from the user 
int counter; // For loop counter 
main() { 
 total = 0; 
 for (counter = 0; counter < 5; ++counter) { 
 cout << ""Number? ""; 
 
 cin >> current; 
 total += current; 
 } 
 cout << ""The grand total is "" << total << '\n'; 
 return (0); 
}"
797," reads a list of five numbers and counts the number of threes and
sevens in the data.","include <iostream.h> 
int seven_count; // Number of sevens in the data 
int data[5]; // The data to count 3 and 7 in 
int three_count; // Number of threes in the data 
int index; // Index into the data 
main() { 
 seven_count = 0; 
 three_count = 0; 
 
 cout << ""Enter 5 numbers\n""; 
 cin >> data[1] >> data[2] >> data[3] >> 
 data[4] >> data[5]; 
 
 for (index = 1; index <= 5; ++index) 
 if (data[index] == 3) 
 ++three_count;
 if (data[index] == 7) 
 ++seven_count; 
 } 
 cout << ""Threes "" << three_count << "" Sevens "" << seven_count << '\n'; 
 return (0); 
}"
798,Function to compute area of triangle,"#include <iostream.h> 
main () 
{ 
 // Function to compute area of triangle 
 float triangle(float width_._ float height); 
 
 cout << ""Triangle #1 "" << triangle(l.3_._ 8.3) << '\n'; 
 cout << ""Triangle #2 "" << triangle(4.8_._ 9.8) << '\n';
 cout << ""Triangle #3 ""<< triangle(1.2_._ 2.0) << '\n'; 
 return (0); 
} 
/*******************************************
 * Triangle -- compute area of a triangle *
 * *
 * Parameters *
 * width -- width of the triangle *
 * height -- height of the triangle *
 * *
 * Returns *
 * area of the triangle *
 *******************************************/
float triangle(float width_._ float height) 
{ 
 float area; // Area of the triangle 
 
 area = width * height / 2.0; 
 return (area); 
}"
799,"Write a program that asks the user to enter two numbers_._ obtains the two numbers from the user and prints the sum_._ product_._
difference_._ and quotient of the two numbers."," #include <iostream> 
 using std::cout; 
 using std::endl; 
 using std::cin; 
 int main()
 {
 int num1_._ num2; // declare variables
cout << ""Enter two integers: ""; // prompt user
 cin >> num1 >> num2; // read values from keyboard
 cout << ""The sum is "" << num1 + num2 
 << ""\nThe product is "" << num1 * num2 
 << ""\nThe difference is "" << num1 - num2 
 << ""\nThe quotient is "" << num1 / num2 << endl;

 return 0; // indicate successful termination
 }"
800,"Write a program that prints the numbers 1 to 4 on the same line with each pair of adjacent numbers separated by one space.
Write the program using the following methods:
a) Using one output statement with one stream insertion operator.
b) Using one output statement with four stream insertion operators.
c) Using four output statements","#include <iostream> 
using std::cout; 
using std::endl; 
int main ()
{ 
cout << ""1 2 3 4\n"";

 // Part B
cout << ""1 "" << ""2 "" << ""3 "" << ""4\n"";

// Part C
cout << ""1 "";
 cout << ""2 "";
cout << ""3 "";
cout << ""4"" << endl;

return 0;}"
801,"Write a program that asks the user to enter two integers_._ obtains the numbers from the user_._ then prints the larger number
followed by the words ""is larger."" If the numbers are equal_._ print the message “These numbers are equal.","#include <iostream>
using std::cout; 
 using std::endl; 
 using std::cin; 
int main()
 {
 int num1_._ num2; // declaration
 cout << ""Enter two integers: ""; // prompt
 cin >> num1 >> num2; // input to numbers
 if ( num1 == num2 )
cout << ""These numbers are equal."" << endl;
 if ( num1 > num2 )
 cout << num1 << "" is larger."" << endl;
if ( num2 > num1 )
cout << num2 << "" is larger."" << endl;

 return 0;
 }"
802,"Write a program that inputs three integers from the keyboard and prints the sum_._ average_._ product_._ smallest and largest of
these number","using std::endl; 
 using std::cin; 
 int main()
 {
 int num1_._ num2_._ num3_._ smallest_._ largest; // declaration

 cout << ""Input three different integers: ""; // prompt
 cin >> num1 >> num2 >> num3; // input

 largest = num1; // assume first number is largest

 if ( num2 > largest ) // is num2 larger?
 largest = num2;

 if ( num3 > largest ) // is num3 larger?
 largest = num3;

 smallest = num1; // assume first number is smallest

 if ( num2 < smallest )
 smallest = num2;

 if ( num3 < smallest )
 smallest = num3;
 cout << ""Sum is "" << num1 + num2 + num3 
 << ""\nAverage is "" << (num1 + num2 + num3) / 3 
 << ""\nProduct is "" << num1 * num2 * num3 
 << ""\nSmallest is "" << smallest 
 << ""\nLargest is "" << largest << endl;

 return 0;
}"
803,"Write a program that reads in the radius of a circle and prints the circle’s diameter_._ circumference and area. Use the constant
value 3.14159 for p. Do these calculations in output statements. (Note: In this chapter_._ we have discussed only integer constants
and variables. ","#include <iostream>
 using std::cout; 
 using std::endl; 
 using std::cin; 
 int main()
 {
int num1_._ num2_._ num3_._ num4_._ num5_._ largest_._ smallest;
cout << ""Enter five integers: "";
 cin >> num1 >> num2 >> num3 >> num4 >> num5;
 largest = num1;
 smallest = num1;

 if ( num1 > largest )
 largest = num1;

 if ( num2 > largest )
 largest = num2;
 if ( num3 > largest )
 largest = num3;

 if ( num4 > largest )
 largest = num4;

 if ( num5 > largest )
 largest = num5;
 if ( num1 < smallest )
 smallest = num1;

 if ( num2 < smallest )
 smallest = num2;
 if ( num3 < smallest )
 smallest = num3;
if ( num4 < smallest )
 smallest = num4;

 if ( num5 < smallest )
 smallest = num5;

 cout << ""Largest is "" << largest<< ""\nSmallest is "" << smallest << endl;
return 0;)"
804,"Write a program that reads an integer and determines and prints whether it is odd or even. (Hint: Use the modulus operator.
An even number is a multiple of two. Any multiple of two leaves a remainder of zero when divided by 2.)","2 #include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int num;
11
12 cout << ""Enter a number: "";
13 cin >> num;
14
15 if ( num % 2 == 0 )
16 cout << ""The number "" << num << "" is even."" << endl;
17
18 if ( num % 2 != 0 )
19 cout << ""The number "" << num << "" is odd."" << endl;
20
21 return 0;
22 }"
805,"Write a program that reads in two integers and determines and prints if the first is a multiple of the second. (Hint: Use the
modulus operator.)","2 #include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int num1_._ num2;
11
12 cout << ""Enter two integers: "";
13 cin >> num1 >> num2;
14
15 if ( num1 % num2 == 0 )
16 cout << num1 << "" is a multiple of "" << num2 << endl;17
18 if ( num1 % num2 != 0 )
19 cout << num1 << "" is not a multiple of "" << num2 << endl;
20
21 return 0;
22 }"
806,"Display a checkerboard pattern with eight output statements_._ then display the same pattern with as few output statements
as possible","2 #include <iostream>
34 using std::cout; 
5 using std::endl; 
67 int main()
8 { 9 // Eight output statements
10 cout << ""* * * * * * * *\n"";
11 cout << "" * * * * * * * *\n"";
12 cout << ""* * * * * * * *\n"";
13 cout << "" * * * * * * * *\n"";
14 cout << ""* * * * * * * *\n"";
15 cout << "" * * * * * * * *\n"";
16 cout << ""* * * * * * * *\n"";
17 cout << "" * * * * * * * *\n\n"";
18
19 // One output statement; 3 parts
20 cout << ""* * * * * * * *\n * * * * * * * *\n* * * * * * * *\n""
21 << "" * * * * * * * *\n* * * * * * * *\n * * * * * * * *\n""
22 << ""* * * * * * * *\n * * * * * * * *\n"";
23
24 cout << endl; // ensure everything is displayed
25
26 return 0;
27 }"
807," Write a program that prints the integer equivalents of some uppercase letters_._ lowercase letters_._ digits and special symbols. At a minimum_._ determine the integer equivalents of the following: A B C a b
c 0 1 2 $ * + / and the blank character.","2 #include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 char symbol;
11
12 cout << ""Enter a character: ""; 
13 cin >> symbol;
14
15 cout << symbol << ""'s integer equivalent is ""
16 << static_cast< int > ( symbol ) << endl;
17
18 return 0;}"
808,"Write a program that inputs a five-digit number_._ separates the number into its individual digits and prints the digits separated from one another by three spaces each. (Hint: Use the integer division and modulus operators.) For example_._ if the user types
in 42339 the program should print","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int num;
11
12 cout << ""Enter a five-digit number: "";
13 cin >> num;
14
15 cout << num / 10000 << "" "";
16 num = num % 10000;
17 cout << num / 1000 << "" "";
18 num = num % 1000;
19 cout << num / 100 << "" "";
20 num = num % 100;
21 cout << num / 10 << "" "";
22 num = num % 10;
23 cout << num << endl;
24
25 return 0;
26 }"
809,"write a program that calculates the squares and cubes of the numbers
from 0 to 10","#include <iostream>
34 using std::cout; 
5 using std::endl; 
67 int main()
8 { 9 int num;
10
11 num = 0;
12 cout << ""\nnumber\tsquare\tcube\n""
13 << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
14
15 num = num + 1;
16 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
17
18 num = num + 1;
19 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
20
21 num = num + 1;
22 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
23
24 num = num + 1;
25 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
26
27 num = num + 1;
28 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
29
30 num = num + 1;
31 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
32
33 num = num + 1;
34 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
35
36 num = num + 1;
37 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
38
39 num = num + 1;
40 cout << num << '\t' << num * num << '\t' << num * num * num << ""\n"";
41
42 num = num + 1;
43 cout << num << '\t' << num * num << '\t' << num * num * num << endl; return 0;
46 }"
810," Develop a C++ program that will input the miles driven and gallons used for each tankful. The program should calculate and display the miles per gallon obtained for each tankful. After processing
all input information_._ the program should calculate and print the combined miles per gallon obtained for all tankfuls","2 #include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 int main()
9 {
10 double gallons_._ miles_._ totalGallons = 0.0_._
11 totalMiles = 0.0_._ average;
12
13 cout << ""Enter the gallons used (-1 to end): "";
14 cin >> gallons;
15
16 while ( gallons != -1.0 ) {
17 totalGallons += gallons;
18
19 cout << ""Enter the miles driven: "";
20 cin >> miles;
21 totalMiles += miles;
22
23 cout << ""The Miles / Gallon for this tank was ""
24 << miles / gallons
25 << ""\n\nEnter the gallons used (-1 to end): "";
26 cin >> gallons;
27 }
28
29 average = totalMiles / totalGallons;
30 cout << ""\nThe overall average Miles/Gallon was ""
31 << average << endl;
32
33 return 0;
34 }"
811,"Develop a C++ program that will determine if a department store customer has exceeded the credit limit on a charge account. For each customer_._ the following facts are available:
a) Account number (an integer)
b) Balance at the beginning of the month
c) Total of all items charged by this customer this month
d) Total of all credits applied to this customer's account this month
e) Allowed credit limit
The program should input each of these facts_._ calculate the new balance (= beginning balance + charges – credits) and determine if the new balance exceeds the customer's credit limit. For those customers whose credit limit is exceeded_._ the program
should display the customer's account number_._ credit limit_._ new balance and the message “Credit limit exceeded”.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
89 #include <iomanip>
10
11 using std::setprecision; 
12 using std::setiosflags;
13
14 int main()
15 {
16 int accountNumber;
17 double balance_._ charges_._ credits_._ limit;
18 
19 cout << ""Enter account number (-1 to end): ""
20 << setiosflags(ios::fixed | ios::showpoint); 
21 cin >> accountNumber;
22
23 while ( accountNumber != -1 ) {
24 cout << ""Enter beginning balance: "";
25 cin >> balance;
26 cout << ""Enter total charges: "";
27 cin >> charges;
28 cout << ""Enter total credits: "";
29 cin >> credits;
30 cout << ""Enter credit limit: "";
31 cin >> limit;
32 balance += charges - credits;
33
34 if ( balance > limit )
35 cout << ""Account: "" << accountNumber
36 << ""\nCredit limit: "" << setprecision( 2 ) << limit 
37 << ""\nBalance: "" << setprecision( 2 ) << balance 
38 << ""\nCredit Limit Exceeded.\n"";
39
40 cout << ""\nEnter account number (-1 to end): "";
41 cin >> accountNumber;
42 }
43
44 cout << endl; // ensure all output is displayed
45
46 return 0;
47 }"
812,"One large chemical company pays its salespeople on a commission basis. The salespeople receive $200 per week plus 9
percent of their gross sales for that week. For example_._ a salesperson who sells $5000 worth of chemicals in a week receives $200
plus 9 percent of $5000_._ or a total of $650. Develop a C++ program that will input each salesperson's gross sales for last week and
calculate and display that salesperson's earnings. Process one salesperson's figures at a time","2 #include <iostream> 
34 using std::cout;
5 using std::cin;
6 using std::ios;
78 #include <iomanip>
9
10 using std::setprecision;
11 using std::setiosflags;
12
13 int main()
14 {
15 double sales_._ wage;
16 
17 cout << ""Enter sales in dollars (-1 to end): ""
18 << setiosflags( ios::fixed | ios::showpoint );
19 cin >> sales;
20
21 while ( sales != -1.0 ) { 
22 wage = 200.0 + 0.09 * sales;
23 cout << ""Salary is: $"" << setprecision( 2 ) << wage 
24 << ""\n\nEnter sales in dollars (-1 to end): "";
25 cin >> sales;
26 }
27
28 return 0;
29 }"
813,"Develop a C++ program that will determine the gross pay for each of several employees. The company pays “straight-time”
for the first 40 hours worked by each employee and pays “time-and-a-half” for all hours worked in excess of 40 hours. You are
given a list of the employees of the company_._ the number of hours each employee worked last week and the hourly rate of each
employee. Your program should input this information for each employee and should determine and display the employee's gross
pay.","2 #include <iostream>
34 using std::cout;
5 using std::cin; 
6 using std::ios;
78 #include <iomanip> 
9
10 using std::setprecision;
11 using std::setiosflags;
12
13 int main()
14 {
15 double hours_._ rate_._ salary;16
17 cout << ""Enter hours worked (-1 to end): ""
18 << setiosflags( ios::fixed | ios::showpoint );
19 cin >> hours;
20
21 while ( hours != -1.0 ) {
22 cout << ""Enter hourly rate of the worker ($00.00): "";
23 cin >> rate;
24 
25 if ( hours <= 40 )
26 salary = hours * rate;
27 else
28 salary = 40.0 * rate + ( hours - 40.0 ) * rate * 1.5;
29 
30 cout << ""Salary is $"" << setprecision( 2 ) << salary 
31 << ""\n\nEnter hours worked (-1 to end): "";
32 cin >> hours;
33 }
34
35 return 0;
36 }"
814,Write a C++ program that utilizes looping and the tab escape sequence \t,"2 #include <iostream>
34 using std::cout;
5 using std::endl; 
67 int main()
8 { 9 int n = 0;
10 
11 cout << ""N\t10 * N\t100 * N\t1000 * N\n\n"";
12
13 while ( ++n <= 5 )
14 cout << n << '\t' << 10 * n << '\t' << 100 * n
15 << '\t' << 1000 * n << '\n';
16
17 cout << endl;
18
19 return 0;
20 }"
815,"Using an approach similar to Exercise 2.20_._ find the two largest values among the 10 numbers. Note: You must input each
number only once.","#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int counter = 0_._ number_._ largest_._ secondLargest = 0;
11
12 cout << ""Enter the first number: "";
13 cin >> largest;
14
15 while ( ++counter < 10 ) {
16 cout << ""Enter next number: "";
17 cin >> number;
18
19 if ( number > largest ) {
20 secondLargest = largest;
21 largest = number;
22 }
23 else if ( number > secondLargest )
24 secondLargest = number;
25 }
26
27 cout << ""\nLargest is "" << largest 
28 << ""\nSecond largest is "" << secondLargest << endl;
29
30 return 0;
31 }"
816,"Modify the program in Fig. 2.11 to validate its inputs. On any input_._ if the value entered is other than 1 or 2_._ keep looping
until the user enters a correct value.","#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int passes = 0_._ failures = 0_._ student = 0_._ result;
11 
12 while ( ++student <= 10 ) {
13 cout << ""Enter result (1=pass_._ 2=fail): "";
14 cin >> result;
15 
16 while ( result != 1 && result != 2 ) {
17 cout << ""Invalid result"" 
18 << ""\nEnter result (1=pass_._ 2=fail): "";
19 cin >> result;
20 }
21 
22 if ( result == 1 )
23 ++passes;
24 else
25 ++failures;
26 }
27 
28 cout << ""Passed: "" << passes 
29 << ""\nFailed: "" << failures;
30
31 if ( passes >= 8 )
32 cout << ""\nRaise tuition\n"";
33
34 cout << endl;
35
36 return 0;
37 }"
817,"A palindrome is a number or a text phrase that reads the same backwards as forwards. For example_._ each of the following
five-digit integers is a palindrome: 12321_._ 55555_._ 45554 and 11611. Write a program that reads in a five-digit integer and determines
whether it is a palindrome. (Hint: Use the division and modulus operators to separate the number into its individual digits.)","#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int side_._ rowPosition_._ size;
11
12 cout << ""Enter the square side: "";
13 cin >> side;
14
15 size = side;
16
17 while ( side > 0 ) {
18 rowPosition = size;
19
20 while ( rowPosition > 0 ) {
21
22 if ( size == side || side == 1 || rowPosition == 1 || 
23 rowPosition == size )
24
25 cout << '*';
26 elsecout << ' ';
28
29 --rowPosition;
30 }
31
32 cout << '\n';
33 --side;
34 }
35
36 cout << endl;
37
38 return 0;
39 }"
818,"Input an integer containing only 0s and 1s (i.e._._ a “binary” integer) and print its decimal equivalent. (Hint: Use the modulus
and division operators to pick off the “binary” number’s digits one at a time from right to left.","#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int binary_._ number_._ decimal = 0_._ highBit = 16_._ factor = 10000;
11
12 cout << ""Enter a binary number (5 digits maximum): "";
13 cin >> binary;
14
15 number = binary;
16
17 while ( highBit >= 1 ) {
18 decimal += binary / factor * highBit;
19 highBit /= 2;
20 binary %= factor;
21 factor /= 10;
22 }
23
24 cout << ""The decimal equivalent of ""
25 << number << "" is "" << decimal << endl;
26
27 return 0;
28 }"
819,Write a program that displays the following checkerboard pattern," #include <iostream>
34 using std::cout;
5 using std::endl; 
67 int main()
8 { 9 int side = 8_._ row;
10
11 while ( side-- > 0 ) {
12 row = 8;
13
14 if ( side % 2 == 0 )
15 cout << ' ';
16
17 while ( row-- > 0 )
18 cout << ""* "";
19
20 cout << '\n';
21 }
22
23 cout << endl;
24
25 return 0;
26 }"
820,"Write a program that keeps printing the multiples of the integer 2_._ namely 2_._ 4_._ 8_._ 16_._ 32_._ 64_._ etc. Your loop should not
terminate (i.e._._ you should create an infinite loop). W","#include <iostream>
34 using std::cout;
5 using std::endl; 
67 int main()
8 { 9 int multiple = 1;
10
11 while ( multiple *= 2 )
12 cout << multiple << ""\n"";
13
14 cout << endl;
16 return 0;
17 }"
821,Write a program that reads the radius of a circle (as a double value) and computes and prints the diameter_._ the circumference and the area. Use the value 3.14159 for p.,"2 #include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 double radius_._ pi = 3.14159;
11
12 cout << ""Enter the radius: "";
13 cin >> radius;
14
15 cout << ""The diameter is "" << radius * 2.0 
16 << ""\nThe circumference is "" << 2.0 * pi * radius
17 << ""\nThe area is "" << pi * radius * radius << endl;
18
19 return 0;
20 }"
822,"Write a program that reads three nonzero double values and determines and prints if they could represent the sides of a
right triangle.","#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 double a_._ b_._ c;
11
12 cout << ""Enter three floating point numbers: "";
13 cin >> a >> b >> c;
14
15 if ( c * c == a * a + b * b ) 
16 cout << ""The three numbers could""
17 << "" be sides of a right triangle"" << endl;
18 else 
19 cout << ""The three numbers probably""
20 << "" are not the sides of a right triangle"" << endl;
21
22 return 0;
23 }"
823,Write a program that reads three nonzero integers and determines and prints if they could be the sides of a right triangle.,"#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int a_._ b_._ c;
11
12 do {
13 cout << ""Enter three integers: "";
14 cin >> a >> b >> c;
15 } while ( a <= 0 || b <= 0 || c <= 0 );
16
17 if ( c * c == a * a + b * b ) 
18 cout << ""The three integers are the""
19 << "" sides of a right triangle\n"";
20 else 
21 cout << ""The three integers are not the""
22 << "" sides of a right triangle\n"";
23 cout << endl;
25
26 return 0;
27 }"
824,Write a separate program that inputs an encrypted four-digit integer and decrypts it to form the original number.,"#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int first_._ second_._ third_._ fourth_._ digit_._ temp;
11 int encryptedNumber;
12
13 cout << ""Enter a four digit number to be encrypted: "";
14 cin >> digit;
15
16 first = ( digit / 1000 + 7 ) % 10;
17 second = ( digit % 1000 / 100 + 7 ) % 10;
18 third = ( digit % 1000 % 100 / 10 + 7 ) % 10;
19 fourth = ( digit % 1000 % 100 % 10 + 7 ) % 10;
20
21 temp = first;
22 first = third * 1000;
23 third = temp * 10;
24
25 temp = second;
26 second = fourth * 100;
27 fourth = temp * 1;
28
29 encryptedNumber = first + second + third + fourth;
30 cout << ""Encrypted number is "" << encryptedNumber << endl;
31 int first_._ second_._ third_._ fourth_._ decrypted_._ temp_._ num;
11
12 cout << ""Enter a four digit encrypted number: "";
13 cin >> num;
14
15 first = num / 1000;
16 second = num % 1000 / 100;
17 third = num % 1000 % 100 / 10;
18 fourth = num % 1000 % 100 % 10;
19
20 temp = ( first + 3 ) % 10;
21 first = ( third + 3 ) % 10;
22 third = temp;
23
24 temp = ( second + 3 ) % 10;
25 second = ( fourth + 3 ) % 10;
26 fourth = temp;
27
28 decrypted = first * 1000 + second * 100 + third * 10 + fourth;
29 cout << ""Decrypted number is "" << decrypted << endl;
32 return 0;
33 }"
825,Write a program that reads a nonnegative integer and computes and prints its factorial.,"#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int n = 0_._ number;
11 unsigned factorial = 1;
12do {
14 cout << ""Enter a positive integer: "";
15 cin >> number;
16 } while ( number < 0 );
17
18 while ( n++ < number )
19 factorial *= n == 0 ? 1 : n;
20
21 cout << number << ""! is "" << factorial << endl;
22
23 return 0;
24 }"
826,"Write a program that sums a sequence of integers. Assume that the first integer read specifies the number of values remaining to be entered. Your program should read only one value per input statement. A typical input sequence might be 
5 100 200 300 400 500
where the 5 indicates that the subsequent 5 values are to be summed","2 #include <iostream>
345 using std::cout;
6 using std::endl; 
7 using std::cin; 
89 int main()
10 {
11 int sum = 0_._ number_._ value;
12
13 cout << ""Enter the number of values to be processed: "";
14 cin >> number;
15
16 for ( int i = 1; i <= number; i++ ) {
17 cout << ""Enter a value: "";
18 cin >> value;
19 sum += value;
20 } 
21
22 cout << ""Sum of the "" << number << "" values is ""
23 << sum << endl;
24
25 return 0;
26 }"
827,"Write a program that calculates and prints the average of several integers. Assume the last value read is the sentinel 9999.
A typical input sequence might be
10 8 11 7 9 9999
indicating that the average of all the values preceding 9999 is to be calculated.","#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int value_._ count = 0_._ total = 0;
11
12 cout << ""Enter an integer (9999 to end): "";
13 cin >> value;
14
15 while ( value != 9999 ) {
16 total += value;
17 ++count;cout << ""Enter next integer (9999 to end): "";
19 cin >> value;
20 }
21
22 if ( count != 0 )
23 cout << ""\nThe average is: ""
24 << static_cast< double > ( total ) / count << endl;
25 else
26 cout << ""\nNo values were entered."" << endl;
27
28 return 0;
29 }"
828,"Write a program that finds the smallest of several integers. Assume that the first value read specifies the number of values
remaining and that the first number is not one of the integers to compare.","#include <iostream>
34 using std::cout;
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {
10 int number_._ value_._ smallest;
11
12 cout << ""Enter the number of integers to be processed: "";
13 cin >> number;
14 cout << ""Enter an integer: "";
15 cin >> smallest;
16
17 for ( int i = 2; i <= number; i++ ) {
18 cout << ""Enter next integer: "";
19 cin >> value;
20
21 if ( value < smallest )
22 smallest = value;
23 }
24
25 cout << ""\nThe smallest integer is: "" << smallest << endl;
26
27 return 0;
28 }"
829,Write a program that calculates and prints the product of the odd integers from 1 to 15.,"#include <iostream>
34 using std::cout;
5 using std::endl; 
67 int main()
8 { 9 long product = 1;
10
11 for ( long i = 3; i <= 15; i += 2 )
12 product *= i;
13
14 cout << ""Product of the odd integers from 1 to 15 is: ""
15 << product << endl;
16  return 0;
18 }"
830,"Write a program that evaluates the factorials of
the integers from 1 to 5. Print the results in tabular format.","#include <iostream>
34 using std::cout;
5 using std::endl; 
67 int main()
8 { 9 int factorial;
10
11 cout << ""X\tFactorial of X\n"";
12
13 for ( int i = 1; i <= 5; ++i ) {
14 factorial = 1;
15
16 for ( int j = 1; j <= i; ++j )
17 factorial *= j;
18 
19 cout << i << '\t' << factorial << '\n';
20 }
21
22 cout << endl;
23 return 0;
24 }"
831,"or interest rates of 5 percent_._ 6 percent_._ 7 percent_._
8 percent_._ 9 percent and 10 percent. Use a for loop to vary the interest rate.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
89 #include <iomanip>
10
11 using std::setw; 
12 using std::setprecision;13 using std::setiosflags;
14
15 #include <cmath>
16
17 int main()
18 {
19 double amount_._ principal = 1000.00;
20
21 cout << setiosflags( ios::fixed | ios::showpoint );
22
23 for ( int rate = 5; rate <= 10; rate++ ) {
24 cout << ""Interest Rate: "" << setprecision( 2 ) << rate / 100.0
25 << ""\nYear\tAmount on deposit\n"";
26
27 for ( int year = 1; year <= 10; year++ ) {
28 amount = principal * pow( 1 + ( rate / 100.0 )_._ year );
29 cout << year << '\t' << setprecision( 2 ) << amount << '\n';
30 }
31 
32 cout << '\n';
33 }
34
35 cout << endl;
36
37 return 0;
38 }"
832,"A mail order house sells five different products whose retail prices are product 1 — $2.98_._ product 2—$4.50_._ product 3—
$9.98_._ product 4—$4.49 and product 5—$6.87. Write a program that reads a series of pairs of numbers as follows:
a) Product number
b) Quantity sold for one day
Your program should use a switch statement to help determine the retail price for each product. Your program should calculate
and display the total retail value of all products sold last week.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
89 #include <iomanip> 
10
11 using std::setprecision; 
12 using std::setiosflags;
13
14 int main()
15 {
16 int product_._ quantity;
17 double total = 0.0;
18
19 cout << ""Enter pairs of item numbers and quantities."" 
20 << ""\nEnter -1 for the item number to end input: "";
21 cin >> product;
22
23 while ( product != -1 ) {
24 cin >> quantity;switch ( product ) {
27 case 1:
28 total += quantity * 2.98;
29 break;
30 case 2:
31 total += quantity * 4.50;
32 break;
33 case 3:
34 total += quantity * 9.98;
35 break;
36 case 4:
37 total += quantity * 4.49;
38 break;
39 case 5:
40 total += quantity * 6.87;
41 break;
42 default:
43 cout << ""Invalid product code: "" << product
44 << ""\n Quantity: "" << quantity << '\n';
45 break;
46 }
47
48 cout << ""Enter pairs of item numbers and quantities.\n"" 
49 << ""Enter -1 for the item number to end input: "";
50 cin >> product;
51 }
52
53 cout << setiosflags( ios::fixed | ios::showpoint )
54 << ""The total retail value was: "" << setprecision( 2 )
55 << total << endl;
56
57 return 0;
58 }"
833,"Write a program that prints a table of the binary_._ octal and hexadecimal equivalents of the decimal numbers in the range 1
through 256.","#include <iostream>
89 using std::cout; 
10 using std::endl; 
11 using std::oct;
12 using std::hex;
13 using std::dec;
14
15 int main()
16 {
17 cout << ""Decimal\t\tBinary\t\t\tOctal\tHexadecimal\n"";
18
19 for ( int loop = 1; loop <= 256; ++loop ) {
20 cout << dec << loop << ""\t\t"";
21
22 // Output binary number
23 int number = loop;
24 cout << ( number == 256 ? '1' : '0' );
25 int factor = 256;
26 
27 do { 
28 cout << ( number < factor && number >= ( factor / 2 ) ? '1' : '0' );
29 factor /= 2;
30 number %= factor;
31 } while ( factor > 2 );
32
33 // Output octal and hexadecimal numbers
34 cout << '\t' << oct << loop << '\t' << hex << loop << endl;
35 }
36
37 return 0;
38 }"
834,"Calculate the value of p from the infinite series 
Print a table that shows the value of p approximated by 1 term of this series_._ by two terms_._ by three terms_._ etc. How many terms of
this series do you have to use before you first get 3.14? 3.141? 3.1415? 3.14159?

","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::ios;
78 #include <iomanip>
9
10 using std::setprecision; 
11 using std::setiosflags;
12
13 int main()
14 {
15 long double pi = 0.0_._ num = 4.0_._ denom = 1.0;
16 long accuracy = 4; // set decimal accuracy
17
18 cout << setiosflags( ios::fixed | ios::showpoint )
19 << ""Accuracy set at: "" << accuracy 
20 << ""\nterm\t\t pi\n"";
21
22 for ( long loop = 1; loop <= accuracy; ++loop ) {
23
24 if ( loop % 2 != 0 )
25 pi += num / denom;
26 else
27 pi -= num / denom;
28
29 cout << loop << ""\t\t"" << setprecision( 8 ) << pi << '\n';
30 denom += 2.0;
31 }
32
33 cout << endl;
3435 return 0;
36 }"
835," Find all Pythagorean triples for side1_._ side2 and hypotenuse all no larger than
500. Use a triple-nested for-loop that tries all possibilities.","#include<iostream>
34 using std::cout; 
5 using std::endl; 
67 int main()
8 { 9 int count = 0;
10 long int hyptSquared_._ sidesSquared;
11
12 for ( long side1 = 1; side1 <= 500; ++side1 ) {
13
14 for ( long side2 = 1; side2 <= 500; ++side2 ) {
15
16 for ( long hypt = 1; hypt <= 500; ++hypt ) {
17 hyptSquared = hypt * hypt;
18 sidesSquared = side1 * side1 + side2 * side2;
19
20 if ( hyptSquared == sidesSquared ) {
21 cout << side1 << '\t' << side2 << '\t'
22 << hypt << '\n';
23 ++count;
24 }
25 }
26 }
27 }
28
29 cout << ""A total of "" << count << "" triples were found."" << endl;
30
31 return 0;
32 }"
836,"program to compute the weekly pay for each employee. You do not know the number of employees in advance. Each type of employee has its own pay code: Managers have paycode 1_._ hourly workers have code 2_._ commission workers have code 3 and pieceworkers have code 4. Use a switch to compute each employee’s pay based on that employee’s paycode. Within the switch_._
prompt the user (i.e._._ the payroll clerk) to enter the appropriate facts your program needs to calculate each employee’s pay based on
that employee’s paycode.","#include<iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
89 #include<iomanip>
10
11 using std::setprecision; 
12 using std::setiosflags;
13
14 int main()
15 {
16 int payCode_._ managers = 0_._ hWorkers = 0_._ cWorkers = 0;
17 int pWorkers = 0_._ pieces;
18 double mSalary_._ hSalary_._ cSalary_._ pSalary_._ hours;
19 double pay;
20
21 cout << ""Enter paycode (-1 to end): ""
22 << setiosflags( ios::fixed | ios::showpoint );
23 cin >> payCode; 
24
25 while ( payCode != -1 ) {
26 switch ( payCode ) {
27 case 1:
28 cout << ""Manager selected."" 
29 << ""\nEnter weekly salary: "";
30 cin >> mSalary;
31 cout << ""The manager's pay is $ ""
32 << setprecision( 2 ) << mSalary;
33 ++managers;
34 break;
35 case 2:
36 cout << ""Hourly worker selected.\n""
37 << ""Enter the hourly salary: "";
38 cin >> hSalary;
39 cout << ""Enter the total hours worked: "";
40 cin >> hours;41
42 pay = hours > 40.0 ? ( hours - 40 ) * 1.5 * hSalary + hSalary * 40.0:
43 hSalary * hours;
44
45 cout << ""Worker's pay is $ "" << setprecision( 2 ) << pay << '\n';
46 ++hWorkers;
47 break;
48 case 3:
49 cout << ""Commission worker selected.\n""
50 << ""Enter gross weekly sales: "";
51 cin >> cSalary;
52 pay = 250.0 + 0.057 * cSalary;
53 cout << ""Commission Worker's pay is $ "" << setprecision( 2 )
54 << pay << '\n';
55 ++cWorkers;
56 break;
57 case 4:
58 cout << ""Piece worker selected.\n""
59 << ""Enter number of pieces: "";
60 cin >> pieces;
61 cout << ""Enter wage per piece: "";
62 cin >> pSalary;
63 pay = pieces * pSalary;
64 cout << ""Piece Worker's pay is $ "" << setprecision( 2 )
65 << pay << '\n';
66 ++pWorkers;
67 break;
68 default:
69 cout << ""Invalid pay code.\n"";
70 break;
71 }
72
73 cout << ""\nEnter paycode (-1 to end): "";
74 cin >> payCode;
75 }
76
77 cout << ""\n\nTotal number of managers paid : ""
78 << managers
79 << ""\nTotal number of hourly workers paid : ""
80 << hWorkers
81 << ""\nTotal number of commission workers paid: ""
82 << cWorkers
83 << ""\nTotal number of piece workers paid : ""
84 << pWorkers << endl;
85
86 return 0;
87 }"
837," Use De Morgan’s Laws to write equivalent expressions for each
of the following_._ then write a program to show that both the original expression and the new expression in each case are equivalent:
a) !( x < 5 ) && !( y >= 7 )
b) !( a == b ) || !( g != 5 )
c) !( ( x <= 8 ) && ( y > 4 ) )
d) !( ( i > 4 ) || ( j <= 6 ) )","#include<iostream>
34 using std::cout; 
5 using std::endl; 
67 int main()
8 { 9 int x = 10_._ y = 1_._ a = 3_._ b = 3_._
10 g = 5_._ Y = 1_._ i = 2_._ j = 9;
11
12 cout << ""current variable values are:"" << endl
13 << ""x = "" << x << ""_._ y = "" << y << ""_._ a = "" << a
14 << ""_._ b = "" << b << endl << ""g = "" << g << ""_._ Y = ""
15 << Y << ""_._ i = "" << i << ""_._ j = "" << j << ""\n\n"";
16
17 if ((!(x < 5) && !(y >= 7)) && (!((x < 5) || (y >= 7))))
18 cout << ""!(x < 5) && !(y >= 7) is equivalent to""
19 << "" !((x < 5) || (y >= 7))"" << endl;
20 else
21 cout << ""!(x < 5) && !(y >= 7) is not equivalent to""
22 << "" !((x < 5) || (y >= 7))"" << endl;
23
24 if ((!(a == b) || !(g != 5)) && (!((a == b) && (g != 5)))) cout << ""!(a == b) || !(g != 5) is equivalent to""
26 << "" !((a == b) && (g != 5))"" << endl;
27 else
28 cout << ""!(a == b) || !(g != 5) is not equivalent to""
29 << "" !((a == b) && (g != 5))"" << endl;
30
31 if (!((x <= 8) && (Y > 4)) && (!((x <= 8) || (Y > 4))))
32 cout << ""!((x <= 8) && (Y > 4)) is equivalent to""
33 << "" !((x <= 8) || (Y > 4))"" << endl;
34 else
35 cout << ""!((x <= 8) && (Y > 4)) is not equivalent to""
36 << "" !((x <= 8) || (Y > 4))"" << endl;
37
38 if (!((i > 4) || (j <= 6)) && !((i > 4) && (j <= 6)))
39 cout << ""!((i > 4) || (j <= 6)) is equivalent to""
40 << "" !((i > 4) && (j <= 6))"" << endl;
41 else
42 cout << ""!((i > 4) || (j <= 6)) is not equivalent to""
43 << "" !((i > 4) && (j <= 6))"" << endl;
44
45 return 0;
46 }"
838,"Write a program that prints the following diamond shape. You may use output statements that print either a single asterisk
(*) or a single blank. Maximize your use of repetition","#include <iostream>
34 using std::cout; 
5 using std::endl; 
67 int main()
8 { 9 // top half
10 for ( int row = 1; row <= 5; ++row ) {for ( int space = 1; space <= 5 - row; ++space )
13 cout << ' ';
14
15 for ( int asterisk = 1; asterisk <= 2 * row - 1; ++asterisk )
16 cout << '*';
17
18 cout << '\n';
19 }
20
21 // bottom half
22 for ( row = 4; row >= 1; --row ) {
23
24 for ( int space = 1; space <= 5 - row; ++space )
25 cout << ' ';
26
27 for ( int asterisk = 1; asterisk <= 2 * row - 1; ++asterisk )
28 cout << '*';
29
30 cout << '\n';
31 }
32
33 cout << endl;
34
35 return 0;
36 }"
839,") Write a program that uses repetition and switch structures to print the song “The
Twelve Days of Christmas.” One switch structure should be used to print the day (i.e._._ “First_._” “Second_._” etc.). A separate
switch structure should be used to print the remainder of each verse.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
67 int main()
8 { 9 for ( int day = 1; day < 13; day++ ) {
10 cout << ""On the "";
11
12 switch ( day ) { // switch for current day
13 case 1:
14 cout << ""first"";
15 break;
16 case 2:
17 cout << ""second"";
18 break;
19 case 3:
20 cout << ""third"";
21 break;
22 case 4:
23 cout << ""fourth"";
24 break;
25 case 5:
26 cout << ""fifth"";
27 break;
28 case 6:
29 cout << ""sixth"";
30 break;
31 case 7:
32 cout << ""seventh"";
33 break;
34 case 8:
35 cout << ""eighth"";
36 break;case 9:
38 cout << ""nineth"";
39 break;
40 case 10:
41 cout << ""tenth"";
42 break;
43 case 11:
44 cout << ""eleventh"";
45 break;
46 case 12:
47 cout << ""twelfth"";
48 break;
49 }
50
51 cout << "" day of Christmas_._\nMy true love sent to me:\n"";
52
53 switch ( day ) { // switch for gifts
54 case 12:
55 cout << ""\tTwelve drummers drumming_._\n"";
56 case 11:
57 cout << ""\tEleven pipers piping_._\n"";
58 case 10:
59 cout << ""\tTen lords a-leaping_._\n"";
60 case 9:
61 cout << ""\tNine ladies dancing_._\n"";
62 case 8:
63 cout << ""\tEight maids a-milking_._\n"";
64 case 7:
65 cout << ""\tSeven swans a-swimming_._\n"";
66 case 6:
67 cout << ""\tSix geese a-laying_._\n"";
68 case 5:
69 cout << ""\tFive golden rings_._\n"";
70 case 4:
71 cout << ""\tFour calling birds_._\n"";
72 case 3:
73 cout << ""\tThree French hens_._\n"";
74 case 2:
75 cout << ""\tTwo turtle doves_._ and\n"";
76 case 1:
77 cout << ""A partridge in a pear tree.\n\n\n"";
78 }
79 }
80
81 cout << endl;
82
83 return 0;
84 }"
840,"An application of function floor is rounding a value to the nearest integer. The statement
y = floor( x + .5 );
will round the number x to the nearest integer and assign the result to y. Write a program that reads several numbers and uses the
preceding statement to round each of these numbers to the nearest integer. For each number processed_._ print both the original number and the rounded number.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
89 #include <iomanip> 
10
11 using std::setprecision; 
12 using std::setiosflags;
13
14 #include <cmath>
15
16 void roundToIntegers( void );
17
18 int main()
19 {
20 roundToIntegers();
21
22 return 0;
23 }
24
25 void roundToIntegers( void )
26 {
27 double x_._ y;
28
29 cout << setiosflags( ios::fixed | ios::showpoint );
30
31 for ( int loop = 1; loop <= 5; loop++ ) {
32 cout << ""Enter a number: "";
33 cin >> x;
34 y = floor( x + .5 );
35 cout << x << "" rounded is "" << setprecision( 1 ) << y << endl;
36 }
37 }"
841,"Write a program that defines four functions to round a number x in various ways:
a) roundToInteger( number )
b) roundToTenths( number )
c) roundToHundredths( number )
d) roundToThousandths( number","#include <iostream>
34 using std::cout; 
5 using std::cin; 
6 using std::ios;
78 #include <iomanip>
9
10 using std::setprecision; 
11 using std::setiosflags;
12 using std::resetiosflags;
13
14 #include <cmath>
15
16 double roundToInteger( double );
17 double roundToTenths( double );
18 double roundToHundreths( double );
19 double roundToThousandths( double );
20
21 int main()
22 { 
23 int count;
24 double number;
25
26 cout << ""How many numbers do you want to process? ""
27 << setiosflags( ios::fixed );
28 cin >> count;
29
30 for ( int i = 0; i < count; ++i ) {
31 cout << ""\nEnter number: "";cin >> number;
33 cout << number << "" rounded to the nearest integer is: ""
34 << setprecision( 0 ) << roundToInteger( number ) << '\n'
35 << setiosflags( ios::showpoint )
36 << number << "" rounded to the nearest tenth is: ""
37 << setprecision( 1 ) << roundToTenths( number ) << '\n'
38 << number << "" rounded to the nearest hundredth is: ""
39 << setprecision( 2 ) << roundToHundreths( number ) << '\n'
40 << number << "" rounded to the nearest thousandth is: ""
41 << setprecision( 3 ) << roundToThousandths( number ) << '\n'
42 << resetiosflags( ios::showpoint );
43 }
44
45 return 0;
46 }
47
48 double roundToInteger( double n )
49 {
50 return floor( n + .5 );
51 }
52
53 double roundToTenths( double n )
54 {
55 return floor( n * 10 + .5 ) / 10;
56 }
57
58 double roundToHundreths( double n )
59 {
60 return floor( n * 100 + .5 ) / 100;
61 }
62
63 double roundToThousandths( double n )
64 {
65 return floor( n * 1000 + .5 ) / 1000.0;
66 }"
842,"Write a function integerPower(base_._ exponent ) that returns the value of 
base exponent","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int integerPower( int_._ int );
9
10 int main()
11 {
12 int exp_._ base;
13
14 cout << ""Enter base and exponent: "";
15 cin >> base >> exp;
16 cout << base << "" to the power "" << exp << "" is: ""
17 << integerPower( base_._ exp ) << endl;
18
19 return 0;
20 }
21
22 int integerPower( int b_._ int e )
23 {
24 int product = 1;
25
26 for ( int i = 1; i <= e; ++i )
27 product *= b;8 
29 return product;
30 }"
843,"Define a function hypotenuse that calculates the length of the hypotenuse of a right triangle when the other two sides
are given. Use this function in a program to determine the length of the hypotenuse for each of the following triangles. The function
should take two arguments of type double and return the hypotenuse as a double.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
89 #include <iomanip>
10
11 using std::setprecision; 
12 using std::setiosflags;
13
14 #include <cmath>
15
16 double hypotenuse( double_._ double );
17
18 int main()
19 {
20 double side1_._ side2;
21 
22 cout << setiosflags( ios::fixed | ios::showpoint );
23
24 for ( int i = 1; i <= 3; ++i ) {
25 cout << ""\nEnter 2 sides of right triangle: "";
26 cin >> side1 >> side2;
27 cout << ""Hypotenuse: "" << setprecision( 1 )
28 << hypotenuse( side1_._ side2 ) << endl;
29 }
30
31 return 0;
32 }
33
34 double hypotenuse( double s1_._ double s2 )
35 {
36 return sqrt( s1 * s1 + s2 * s2 );
37 }"
844,"Write a function multiple that determines for a pair of integers whether the second integer is a multiple of the first. The
function should take two integer arguments and return true if the second is a multiple of the first_._ false otherwise. Use this function in a program that inputs a series of pairs of integers.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 bool multiple( int_._ int );
9
10 int main()
11 {
12 int x_._ y;
13
14 for ( int i = 1; i <= 3; ++i ) {
15 cout << ""Enter two integers: "";
16 cin >> x >> y;
17 
18 if ( multiple( x_._ y ) )
19 cout << y << "" is a multiple of "" << x << ""\n\n"";
20 else
21 cout << y << "" is not a multiple of "" << x << ""\n\n"";
22 }
23
24 cout << endl;
25
26 return 0;
27 }
28
29 bool multiple( int a_._ int b )
30 {
31 return !( b % a );
32 }"
845,"Write a program that inputs a series of integers and passes them one at a time to function even_._ which uses the modulus
operator to determine whether an integer is even. The function should take an integer argument and return true if the integer is
even and false otherwise.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 bool even( int );
9
10 int main()
11 {
12 int x;
13 
14 for ( int i = 1; i <= 3; ++i ) {
15 cout << ""Enter an integer: "";
16 cin >> x;
17 
18 if ( even( x ) )
19 cout << x << "" is an even integer\n\n"";
20 else
21 cout << x << "" is an odd integer\n\n"";
22 }
23
24 cout << endl;
25
26 return 0;
27 }
28
29 bool even( int a )
30 {
31 return !( a % 2 );
32 }"
846,"Write a function that displays at the left margin of the screen a solid square of asterisks whose side is specified in integer
parameter side. For example_._ if side is 4_._ the function displays","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 void square( int );
9
10 int main()
11 {
12 int side;
13
14 cout << ""Enter side: "";
15 cin >> side;
16 cout << '\n';
17
18 square( side );
19
20 cout << endl;
21
22 return 0;
23 }
24
25 void square( int s )
26 {
27 for ( int row = 1; row <= s; ++row ) {
28
29 for ( int col = 1; col <= s; ++col )
30 cout << '*';
31
32 cout << '\n';
33 }
34 }"
847,orm the square out of whatever character is contained in character parameter fillCharacter. Thus_._ if side is 5 and fillCharacter is “#_._” then this function should print,"#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 void square( int_._ char );
9
10 int main()
11 {
12 int s;
13 char c;
14
15 cout << ""Enter a character and the side length: "";
16 cin >> c >> s;
17 cout << '\n';
18
19 square( s_._ c );
20
21 cout << endl;
22
23 return 0;
24 }
25
26 void square( int side_._ char fillCharacter )
27 {
28 for ( int row = 1; row <= side; ++row ) {
29
30 for ( int col = 1; col <= side; ++col )
31 cout << fillCharacter;
32
33 cout << '\n';
34 }
35 }"
848,"Write program segments that accomplish each of the following:
a) Calculate the integer part of the quotient when integer a is divided by integer b.
b) Calculate the integer remainder when integer a is divided by integer b.
c) Use the program pieces developed in a) and b) to write a function that inputs an integer between 1 and 32767 and
prints it as a series of digits_._ each pair of which is separated by two spaces. For example_._ the integer 4562 should be
printed as
4 5 6 2","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <iomanip> 
9
10 using std::setw; 
11
12 int quotient( int_._ int );
13 int remainder( int_._ int );
14
15 int main()
16 {
17 int number_._ divisor = 10000;
18
19 cout << ""Enter an integer between 1 and 32767: "";
20 cin >> number;
21
22 cout << ""The digits in the number are:\n"";
23
24 while ( number >= 1 ) {
25
26 if ( number >= divisor ) {
27 cout << setw( 3 ) << quotient( number_._ divisor );
28 number = remainder( number_._ divisor );
29 divisor = quotient( divisor_._ 10 ); 
30 }
31 else
32 divisor = quotient( divisor_._ 10 );
33 }
34
35 cout << endl;
36 
37 return 0;
38 }
39
40 // Part A: determine quotient using integer division
41 int quotient( int a_._ int b )
42 {
43 return a / b;
44 }
45
46 // Part B: determine remainder using the modulus operator
47 int remainder( int a_._ int b )
48 {
49 return a % b;)"
849,"Write a function that takes the time as three integer arguments (for hours_._ minutes and seconds)_._ and returns the number of
seconds since the last time the clock “struck 12.” Use this function to calculate the amount of time in seconds between two times_._
both of which are within one 12-hour cycle of the clock.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 unsigned seconds( unsigned_._ unsigned_._ unsigned );
9
10 int main()
11 {
12 unsigned hours_._ minutes_._ secs_._ temp;
13
14 cout << ""Enter the first time as three integers: "";
15 cin >> hours >> minutes >> secs;
16
17 temp = seconds( hours_._ minutes_._ secs );
18
19 cout << ""Enter the second time as three integers: "";
20 cin >> hours >> minutes >> secs;
21
22 cout << ""The difference between the times is ""
23 << seconds( hours_._ minutes_._ secs ) - temp 
24 << "" seconds"" << endl;
25
26 return 0;
27 }
28
29 unsigned seconds( unsigned h_._ unsigned m_._ unsigned s )
30 {
31 return 3600 * ( h >= 12 ? h - 12 : h ) + 60 * m + s;
32 }"
850," Implement the following integer functions:
a) Function celsius returns the Celsius equivalent of a Fahrenheit temperature.
b) Function fahrenheit returns the Fahrenheit equivalent of a Celsius temperature c) Use these functions to write a program that prints charts showing the Fahrenheit equivalents of all Celsius temperatures
from 0 to 100 degrees_._ and the Celsius equivalents of all Fahrenheit temperatures from 32 to 212 degrees. Print the outputs in a neat tabular format that minimizes the number of lines of output while remaining readable."," #include <iostream>
34 using std::cout; 
5 using std::endl; 
67 int celcius( int );
8 int fahrenheit( int );
9
10 int main()
11 {
12 cout << ""Fahrenheit equivalents of Celcius temperatures:\n""
13 << ""Celcius\t\tFahrenheit\n"";
14
15 for ( int i = 0; i <= 100; ++i )
16 cout << i << ""\t\t"" << fahrenheit( i ) << '\n';
17
18 cout << ""\nCelcius equivalents of Fahrenheit temperatures:""
19 << ""\nFahrenheit\tCelcius\n"";
20
21 for ( int j = 32; j <= 212; ++j )
22 cout << j << ""\t\t"" << celcius( j ) << '\n';
23
24 cout << endl;
25
26 return 0;
27 }
28
29 int celcius( int fTemp )
30 {
31 return static_cast< int > ( 5.0 / 9.0 * ( fTemp - 32 ) );
32 }
33
34 int fahrenheit( int cTemp )
35 {
36 return static_cast< int > ( 9.0 / 5.0 * cTemp + 32 );
37 }"
851,Write a function that returns the smallest of three double-precision_._ floating-point numbers.,"#include <iostream> 
3 using std::cout; 
4 using std::endl; 
5 using std::cin; 
67 double smallest3( double_._ double_._ double );
89 int main()
10 {
11 double x_._ y_._ z;
12
13 cout << ""Enter three numbers: "";
14 cin >> x >> y >> z;
15 cout << ""The smallest value is "" << smallest3( x_._ y_._ z ) << endl;
16
17 return 0;
18 }
19
20 double smallest3( double smallest_._ double b_._ double c )
21 {
22 if ( b < smallest && c > smallest )
23 return b;
24 else if ( c < smallest )
25 return c;
26 else
27 return smallest;
28 }"
852," Write a function perfect that determines whether parameter number is a perfect number. Use this function in a program that determines and prints all the perfect numbers between 1
and 1000. Print the factors of each perfect number to confirm that the number is indeed perfect.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
67 bool perfect( int );
89 int main()
10 {
11 cout << ""For the integers from 1 to 1000:\n"";
12
13 for ( int j = 2; j <= 1000; ++j )
14 if ( perfect( j ) )
15 cout << j << "" is perfect\n"";
16
17 cout << endl;
18
19 return 0;}
21
22 bool perfect( int value )
23 {
24 int factorSum = 1;
25
26 for ( int i = 2; i <= value / 2; ++i )
27 if ( value % i == 0 )
28 factorSum += i;
29
30 return factorSum == value ? true : false;
31 }"
853,"Write a function that determines whether a number is prime. 
","#include <iostream> 
3 using std::cout; 
45 #include <iomanip> 
67 using std::setw; 
89 bool prime( int );
10
11 int main()
12 {
13 int count = 0;
14
15 cout << ""The prime numbers from 1 to 10000 are:\n"";
16
17 for ( int loop = 2; loop <= 10000; ++loop )
18 if ( prime( loop ) ) {
19 ++count;
20 cout << setw( 6 ) << loop;
21 
22 if ( count % 10 == 0 )
23 cout << '\n';
24 }
25
26 return 0;
27 }
28
29 bool prime( int n )
30 {
31 for ( int loop2 = 2; loop2 <= n / 2; loop2++ )
32 if ( n % loop2 == 0 )return false;
34
35 return true;
36 }"
854,"function in a program that determines and prints all the prime numbers between 1 and 10_._000. How many of
these 10_._000 numbers do you really have to test before being sure that you have found all the primes?
","#include <iostream> 
34 using std::cout; 
56 #include <iomanip> 
7 using std::setw; 
89 #include <cmath>
10
11 bool prime( int n );
12
13 int main()
14 {
15 int count = 0;
16
17 cout << ""The prime numbers from 1 to 10000 are:\n"";
18
19 for ( int j = 2; j <= 10000; ++j )
20 if ( prime( j ) ) {
21 ++count;
22 cout << setw( 5 ) << j;
23 
24 if ( count % 10 == 0 )
25 cout << '\n';
26 }
27
28 return 0;
29 }
30
31 bool prime( int n )
32 {
33 for ( int i = 2; i <= static_cast< int > ( sqrt( n ) ); ++i )
34 if ( n % i == 0 )
35 return false;
36
37 return true;
38 }"
855,"Write a function that takes an integer value and returns the number with its digits reversed. For example_._ given the number
7631_._ the function should return 1367.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <iomanip> 
9
10 using std::setw;
11 using std::setfill; 
12
13 int reverseDigits( int );
14 int width( int );
15
16 int main()
17 {
18 int number;
19
20 cout << ""Enter a number between 1 and 9999: "";
21 cin >> number;
22
23 cout << ""The number with its digits reversed is: ""
24 << setw( ( width( number ) ) ) << setfill( '0' ) 
25 << reverseDigits( number )
26 << endl;
27
28 return 0;
29 }
30
31 int reverseDigits( int n )
32 {
33 int reverse = 0_._ divisor = 1000_._ multiplier = 1;
34
35 while ( n > 10 ) {
36
37 if ( n >= divisor ) {
38 reverse += n / divisor * multiplier;
39 n %= divisor;
40 divisor /= 10;
41 multiplier *= 10;
42 }else
44 divisor /= 10;
45 }
46 
47 reverse += n * multiplier;
48 return reverse;
49 }
50
51 int width( int n )
52 {
53 if ( n /= 1000 )
54 return 4;
55 else if ( n /= 100 )
56 return 3;
57 else if ( n /= 10 )
58 return 2;
59 else
60 return 1;
61 }"
856,"The greatest common divisor (GCD) of two integers is the largest integer that evenly divides each of the numbers. Write a
function gcd that returns the greatest common divisor of two integers","#include <iostream>
34 using std::cout; 
5 using std::cin; 
67 int gcd( int_._ int );
89 int main()
10 {
11 int a_._ b;
12
13 for ( int j = 1; j <= 5; ++j ) {
14 cout << ""Enter two integers: "";
15 cin >> a >> b;
16 cout << ""The greatest common divisor of "" << a << "" and ""
17 << b << "" is "" << gcd( a_._ b ) << ""\n\n"";
18 }
19
20 return 0;
21 }
22
23 int gcd( int x_._ int y )
24 {
25 int greatest = 1;
26
27 for ( int i = 2; i <= ( ( x < y ) ? x: y ); ++i )
28 if ( x % i == 0 && y % i == 0 )
29 greatest = i;
30
31 return greatest;
32 }"
857,"Write a function qualityPoints that inputs a student’s average and returns 4 if a student's average is 90–100_._ 3 if the
average is 80–89_._ 2 if the average is 70–79_._ 1 if the average is 60–69 and 0 if the average is lower than 60.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int qualityPoints( int );
9
10 int main()
11 {
12 int average;
13
14 for ( int loop = 1; loop <= 5; ++loop ) {
15 cout << ""\nEnter the student's average: "";
16 cin >> average;
17 cout << average << "" on a 4 point scale is ""
18 << qualityPoints( average ) << '\n';
19 }
20
21 cout << endl;
22 return 0;
23 }
24
25 int qualityPoints( int average )
26 {
27 if ( average >= 90 )
28 return 4;
29 else if ( average >= 80 )
30 return 3;
31 else if ( average >= 70 )
32 return 2;
33 else if ( average >= 60 )
34 return 1;
35 else
36 return 0;
37 }"
858,"Write a program that simulates coin tossing. For each toss of the coin_._ the program should print Heads or Tails. Let the
program toss the coin 100 times and count the number of times each side of the coin appears. Print the results. The program should
call a separate function flip that takes no arguments and returns 0 for tails and 1 for heads. Note: If the program realistically simulates the coin tossing_._ then each side of the coin should appear approximately half the time.","#include <iostream> 
45 using std::cout; 
6 using std::endl; 
78 #include <cstdlib>
9 #include <ctime>
10
11 int flip( void );
12
13 int main()
14 {
15 int headCount = 0_._ tailCount = 0;
16 
17 srand( time( 0 ) );
18 
19 for ( int loop = 1; loop <= 100; loop++ ) {
20
21 if ( flip() == 0 ) {
22 tailCount++;
23 cout << ""Tails "";
24 }
25 else {
26 headCount++;
27 cout << ""Heads "";
28 }
29
30 if ( loop % 10 == 0 )
31 cout << '\n';
32 }
33
34 cout << ""\nThe total number of Heads was ""
35 << headCount << ""\nThe total number of Tails was ""
36 << tailCount << endl;
37
38 return 0;
39 }int flip( void )
42 {
43 return rand() % 2;
44 }"
859," Use rand to produce two positive one-digit integers. It should then type a question such as:
How much is 6 times 7?
The student then types the answer. Your program checks the student's answer. If it is correct_._ print ""Very good!""_._ and then ask
another multiplication question. If the answer is wrong_._ print ""No. Please try again."" and then let the student try the same
question again repeatedly until the student finally gets it right","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <cstdlib>
9 #include <ctime>
10
11 void multiplication( void );
12
13 int main()
14 {
15 srand( time( 0 ) );
16 multiplication();
17 return 0;
18 }
19
20 void multiplication( void )
21 {
22 int x_._ y_._ response = 0;
23
24 cout << ""Enter -1 to End.\n"";
25
26 while ( response != -1 ) {
27 x = rand() % 10;
28 y = rand() % 10;
29
30 cout << ""How much is "" << x << "" times "" << y << "" (-1 to End)? "";cin >> response;
32
33 while ( response != -1 && response != x * y ) {
34 cout << ""No. Please try again.\n? "";
35 cin >> response;
36 }
37
38 if ( response != -1 )
39 cout << ""Very good!\n\n"";
40 }
41
42 cout << ""That's all for now. Bye."" << endl;
43 }"
860,"Write a program that plays the game of “guess the number” as follows: Your program chooses the number to be guessed
by selecting an integer at random in the range 1 to 1000.","#include <iostream>
34 using std::cout; 
5 using std::cin; 
67 #include <cstdlib>
8 #include <ctime>
9
10 void guessGame( void );
11 bool isCorrect( int_._ int );
12
13 int main()
14 {
15 srand( time( 0 ) );
16 guessGame();
17
18 return 0;
19 }
20
21 void guessGame( void ){
23 int answer_._ guess;
24 char response;
25
26 do {
27 answer = 1 + rand() % 1000;
28 cout << ""\nI have a number between 1 and 1000.\n""
29 << ""Can you guess my number?\nPlease type your""
30 << "" first guess.\n? "";
31 cin >> guess;
32
33 while ( !isCorrect( guess_._ answer ) ) 
34 cin >> guess; 
35
36 cout << ""\nExcellent! You guessed the number!\n""
37 << ""Would you like to play again?\nPlease type (y/n)? "";
38 cin >> response;
39
40 } while ( response == 'y' );
41 }
42
43 bool isCorrect( int g_._ int a )
44 {
45 if ( g == a )
46 return true;
47
48 if ( g < a )
49 cout << ""Too low. Try again.\n? "";
50 else
51 cout << ""Too high. Try again.\n? "";
52
53 return false;
54 }"
861,"Write a recursive function power( base_._ exponent) that_._ when invoked_._ returns
base exponent
For example_._ power( 3_._4 ) =3 * 3* 3* 3.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 long power( long_._ long );
9
10 int main()
11 {
12 long b_._ e;
13
14 cout << ""Enter a base and an exponent: "";
15 cin >> b >> e;
16 cout << b << "" raised to the "" << e << "" is ""<< power( b_._ e ) << endl;
18
19 return 0;
20 }
21
22 long power( long base_._ long exponent )
23 {
24 return exponent == 1 ? base : base * power( base_._ exponent - 1 );
25 }"
862, C++ program to use double instead of int to calculate and return Fibonacci numbers,"#include <iostream>
67 using std::cout; 
8 using std::endl; 
9
10 int MAX = 22; // the maximum number for which the
11 // fibonacci value can be calculated
12 // on 2-byte integer systems
13
14 int fibonacci( int );
15
16 int main()
17 {
18 for ( int loop = 0; loop <= MAX; ++loop )
19 cout << ""fibonacci("" << loop << "") = "" << fibonacci( loop )
20 << ""\n"";
21
22 cout << endl;
23 return 0;
24 }
25
26 int fibonacci( int n )
27 {
28 int fib[ 23 ];
29
30 fib[ 0 ] = 0;
31 fib[ 1 ] = 1;
32
33 for ( int j = 2; j <= n; ++j )
34 fib[ j ] = fib[ j - 1 ] + fib[ j - 2 ];
35
36 return fib[ n ];}"
863,Towers of Hanoi),"#include <iostream>
34 using std::cout; 
5 using std::cin; 
67 void towers( int_._ int_._ int_._ int );
89 int main()
10 {
11 int nDisks;
12 
13 cout << ""Enter the starting number of disks: "";
14 cin >> nDisks;
15 towers( nDisks_._ 1_._ 3_._ 2 );
16
17 return 0;
18 } 
19
20 void towers( int disks_._ int start_._ int end_._ int temp )
21 {
22 if ( disks == 1 ) {
23 cout << start << "" --> "" << end << '\n';
24 return;
25 } 
26
27 // move disks - 1 disks from start to temp
28 towers( disks - 1_._ start_._ temp_._ end );
29
30 // move last disk from start to end
31 cout << start << "" --> "" << end << '\n';
32
33 // move disks - 1 disks from temp to end
34 towers( disks - 1_._ temp_._ end_._ start );
35 }"
864,"The greatest common divisor of integers x and y is the largest integer that evenly divides both x and y. Write a recursive
function gcd that returns the greatest common divisor of x and y. The gcd of x and y is defined recursively as follows: If y is
equal to 0_._ then gcd( x_._ y ) is x; otherwise gcd( x_._ y ) is gcd( y_._x % y )_._ where % is the modulus operator.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 unsigned gcd( unsigned int_._ unsigned int );
9
10 int main()
11 {
12 unsigned x_._ y_._ gcDiv;
13
14 cout << ""Enter two integers: "";
15 cin >> x >> y;
16
17 gcDiv = gcd( x_._ y );cout << ""Greatest common divisor of "" << x << "" and ""
19 << y << "" is "" << gcDiv << endl;
20
21 return 0;
22 }
23
24 unsigned gcd( unsigned xMatch_._ unsigned yMatch )
25 {
26 return yMatch == 0 ? xMatch : gcd( yMatch_._ xMatch % yMatch );
27 }"
865,"Write a program containing a function main. Include static local variable count and
initialize it to 1. Postincrement and print the value of count each time main is called.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
67 int main()
8 { 9 static int count = 1;
10
11 ++count;
12 cout << count << endl;
13 main(); 
14 
15 return 0;
16 }"
866,"Write function distance that calculates the distance between two points (x1_._ y1) and (x2_._ y2). All numbers and return
values should be of type double","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
89 #include <iomanip>
10
11 using std::setprecision; 
12 using std::setiosflags;
13
14 #include <cmath>
15
16 double distance( double_._ double_._ double_._ double );
17
18 int main()
19 {
20 double x1_._ y1_._ x2_._ y2_._ dist;
21
22 cout << ""Enter the first point: "";
23 cin >> x1 >> y1;
24
25 cout << ""Enter the second point: "";
26 cin >> x2 >> y2;
27
28 dist = distance( x1_._ y1_._ x2_._ y2 );
29
30 cout << setiosflags( ios::fixed | ios::showpoint )
31 << ""Distance between ("" << setprecision( 1 ) << x1 << ""_._ ""
32 << y1 << "") and ("" << x2 << ""_._ "" << y2 << "") is ""
33 << dist << endl;
34
35 return 0;
36 }
37
38 double distance( double xOne_._ double yOne_._ double xTwo_._ double yTwo )
39 {
40 return sqrt( pow( xOne - xTwo_._ 2 ) + pow( yOne - yTwo_._ 2 ) );
41 }"
867,Write a program that tests as many of the math library functions in,"#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::ios;
78 #include <iomanip>
9
10 using std::setw; 
11 using std::setprecision; 
12 using std::setiosflags;
13
14 #include <cmath>
15
16 int main()
17 {
18 cout << ""function""; // header
19
20 for ( int a = 1; a < 6; ++a )
21 cout << setw( 12 ) << a << ' ';
22
23 cout << setiosflags( ios::fixed | ios::showpoint ) << ""\n\nsqrt() "";
24
25 for ( int b = 1; b < 6; ++b )
26 cout << setw( 12 ) << setprecision( 2 ) << sqrt( b ) << ' ';
27
28 cout << ""\nexp() "";
29
30 for ( int c = 1; c < 6; ++c )
31 cout << setw( 12 ) << setprecision( 2 ) << exp( c ) << ' '; cout << ""\nlog() "";
34
35 for ( int d = 1; d < 6; ++d )
36 cout << setw( 12 ) << setprecision( 2 ) << log( d ) << ' ';
37
38 cout << ""\nlog10() "";
39
40 for ( int e = 1; e < 6; ++e )
41 cout << setw( 12 ) << setprecision( 2 ) << log10( e ) << ' ';
42
43 cout << ""\npow(2_._x)"";
44
45 for ( int f = 1; f < 6; ++f )
46 cout << setw( 12 ) << setprecision( 2 ) << pow( 2_._ f ) << ' ';
47
48 cout << ""\n\n\nfunction""; // header
49
50 for ( double g = -1.5; g < 3.0; g += 1.1 )
51 cout << setw( 12 ) << setprecision( 2 ) << g << ' ';
52
53 cout << ""\n\n\nfabs() "";
54
55 for ( double h = -1.5; h < 3.0; h += 1.1 )
56 cout << setw( 12 ) << setprecision( 2 ) << fabs( h ) << ' ';
57
58 cout << ""\nceil() "";
59
60 for ( double i = -1.5; i < 3.0; i += 1.1 )
61 cout << setw( 12 ) << setprecision( 2 ) << ceil( i ) << ' ';
62
63 cout << ""\nfloor() "";
64
65 for ( double j = -1.5; j < 3.0; j += 1.1 )
66 cout << setw( 12 ) << setprecision( 2 ) << floor( j ) << ' ';
67
68 cout << ""\nsin() "";
69
70 for ( double k = -1.5; k < 3.0; k += 1.1 )
71 cout << setw( 12 ) << setprecision( 2 ) << sin( k ) << ' ';
72
73 cout << ""\ncos() "";
74
75 for ( double l = -1.5; l < 3.0; l += 1.1 )
76 cout << setw( 12 ) << setprecision( 2 ) << cos( l ) << ' ';
77
78 cout << ""\ntan() "";
79
80 for ( double m = -1.5; m < 3.0; m += 1.1 )
81 cout << setw( 12 ) << setprecision( 2 ) << tan( m ) << ' ';
82
83 cout << endl;
84 return 0;
85 }"
868,Write a C++ program that uses an inline function circleArea to prompt the user for the radius of a circle and to calculate and print the area of that circle.,"#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 double pi = 3.14159; // global variable
9
10 inline double circleArea( double r ) { return pi * r * r; }
11
12 int main()
13 {
14 double radius;
15cout << ""Enter the radius of the circle: "";
17 cin >> radius;
18 cout << ""The area of the circle is "" << circleArea( radius ) << endl;
19
20 return 0;
21 }"
869,"Write a complete C++ program with the two alternate functions specified below_._ of which each simply triples the variable
count defined in main. Then compare and contrast the two approaches. These two functions are
a) Function tripleCallByValue that passes a copy of count call-by-value_._ triples the copy and returns the new value.
b) Function tripleByReference that passes count with true call-by-reference via a reference parameter and triples
the original copy of count through its alias (i.e._._ the reference parameter).","#include <iostream>
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int tripleCallByValue( int );
9 void tripleByReference( int & );
10
11 int main()
12 {
13 int value_._ &valueRef = value;
14
15 cout << ""Enter an integer: "";
16 cin >> value;
17
18 cout << ""\nValue before call to tripleCallByValue() is: ""
19 << value << ""\nValue returned from tripleCallByValue() is: ""
20 << tripleCallByValue( value ) 
21 << ""\nValue (in main) after tripleCallByValue() is: "" << value
22 << ""\n\nValue before call to tripleByReference() is: ""
23 << value << '\n';
24
25 tripleByReference( valueRef );
26
27 cout << ""Value (in main) after call to tripleByReference() is: ""
28 << value << endl;
29
30 return 0;
31 }
32
33 int tripleCallByValue( int valueCopy )
34 {
35 return valueCopy *= 3;
36 }
37
38 void tripleByReference( int &aliasRef )
39 {
40 aliasRef *= 3;
41 }"
870,"Write a program that uses a function template called min to determine the smaller of two arguments. Test the program using
integer_._ character and floating-point number pairs."," #include <iostream>
34 using std::cout; 
5 using std::endl; 
67 template < class T >
8 void min( T value1_._ T value2 ) // find the smallest value
9 {
10 if ( value1 > value2 )
11 cout << value2 << "" is smaller than "" << value1;
12 else
13 cout << value1 << "" is smaller than "" << value2;
14
15 cout << endl;
16 }
17
18 int main()
19 {
20 min( 7_._ 54 ); // integers
21 min( 4.35_._ 8.46 ); // doubles
22 min( 'g'_._ 'T' ); // characters
23
24 return 0;
25 }"
871,"Write a program that uses a function template called max to determine the largest of three arguments. Test the program
using integer_._ character and floating-point number pairs.","#include <iostream>
34 using std::cout; 
5 using std::endl; 
67 template < class T >
8 void max( T value1_._ T value2_._ T value3 ) // find the largest value9 {
10 if ( value1 > value2 && value1 > value3 )
11 cout << value1 << "" is greater than "" << value2
12 << "" and "" << value3;
13 else if ( value2 > value1 && value2 > value3 )
14 cout << value2 << "" is greater than "" << value1
15 << "" and "" << value3;
16 else
17 cout << value3 << "" is greater than "" << value1
18 << "" and "" << value2;
19
20 cout << endl;
21 }
22
23
24 int main()
25 {
26 max( 7_._ 5_._ 2 ); // integers
27 max( 9.35_._ 8.461_._ 94.3 ); // doubles
28 max( '!'_._ 'T'_._ '$' ); // characters
29
30 return 0;
31 }"
872,"Write a program (using an array of counters) that determines how many of the salespeople earned salaries in each of the following ranges (assume that each salesperson’s salary is truncated to an integer amount):
a) $200–$299
b) $300–$399
c) $400–$499
d) $500–$599
e) $600–$699
f) $700–$799
g) $800–$899
h) $900–$999
i) $1000 and over","2 #include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
7 using std::ios;
8#include <iomanip> 
10
11 using std::setprecision; 
12 using std::setiosflags;
13
14 void wages( int [] );
15 void display( const int [] );
16
17 int main()
18 {
19 int salaries[ 11 ] = { 0 };
20
21 cout << setiosflags( ios::fixed | ios::showpoint );
22 wages( salaries ); 
23 display( salaries );
24
25 return 0;
26 }
27
28 void wages( int money[] )
29 {
30 double sales_._ i = 0.09;
31
32 cout << ""Enter employee gross sales (-1 to end): "";
33 cin >> sales;
34
35 while ( sales != -1 ) {
36 double salary = 200.0 + sales * i;
37 cout << setprecision( 2 ) << ""Employee Commission is $"" 
38 << salary << '\n';
39
40 int x = static_cast< int > ( salary ) / 100;
41 ++money[ ( x < 10 ? x : 10 ) ];
42
43 cout << ""\nEnter employee gross sales (-1 to end): "";
44 cin >> sales;
45 }
46 }
47
48 void display( const int dollars[] )
49 {
50 cout << ""Employees in the range:"";
51 for ( int i = 2; i < 10; ++i )
52 cout << ""\n$"" << i << ""00-$"" << i << ""99 : "" << dollars[ i ];
53
54 cout << ""\nOver $1000: "" << dollars[ 10 ] << endl;
55 }"
873,"Write a program that simulates the rolling of two dice. The program should use rand to roll the first die and should use
rand again to roll the second die. The sum of the two values should then be calculated. Note: Since each die can show an integer
value from 1 to 6_._ then the sum of the two values will vary from 2 to 12_._ with 7 being the most frequent sum and 2 and 12 being the
least frequent sums","#include <iostream> 
34 using std::cout; 
5 using std::ios;
67 #include <iomanip> 
89 using std::setw; 
10 using std::setprecision; 
11 using std::setiosflags;
12
13 #include <cstdlib>
14 #include <ctime>
15
16 int main()
17 {
18 const long ROLLS = 36000;
19 const int SIZE = 13;
20 // array exepected contains counts for the expected
21 // number of times each sum occurs in 36 rolls of the dice 
22 int expected[ SIZE ] = { 0_._ 0_._ 1_._ 2_._ 3_._ 4_._ 5_._ 6_._ 5_._ 4_._ 3_._ 2_._ 1 };
23 int x_._ y_._ sum[ SIZE ] = { 0 };
24
25 srand( time( 0 ) );
26 
27 for ( long i = 1; i <= ROLLS; ++i ) {
28 x = 1 + rand() % 6;
29 y = 1 + rand() % 6;
30 ++sum[ x + y ];
31 }
32 
33 cout << setw( 10 ) << ""Sum"" << setw( 10 ) << ""Total"" << setw( 10 )<< ""Expected"" << setw( 10 ) << ""Actual\n"" 
35 << setiosflags( ios::fixed | ios::showpoint );
36
37 for ( int j = 2; j < SIZE; ++j )
38 cout << setw( 10 ) << j << setw( 10 ) << sum[ j ] << setprecision( 3 )
39 << setw( 9 ) << 100.0 * expected[ j ] / 36 << ""%"" << setprecision(3)
40 << setw( 9 ) << 100.0 * sum[ j ] / 36000 << ""%\n"";
41
42 return 0;
43 }"
874,"Write a program that runs 1000 games of craps and answers the following questions:
a) How many games are won on the 1st roll_._ 2nd roll_._ …_._ 20th roll_._ and after the 20th roll?b) How many games are lost on the 1st roll_._ 2nd roll_._ …_._ 20th roll_._ and after the 20th roll? 
c) What are the chances of winning at craps? (Note: You should discover that craps is one of the fairest casino games.
What do you suppose this means?)
d) What is the average length of a game of craps?
e) Do the chances of winning improve with the length of the game?","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::ios;
78 #include <iomanip> 
9
10 using std::setw; 
11 using std::setprecision; 
12 using std::setiosflags;
13
14 #include <cstdlib>
15 #include <ctime>
16
17 int rollDice( void );
18
19 int main()
20 {
21 enum Outcome { CONTINUE_._ WIN_._ LOSE };
22 const int SIZE = 22_._ ROLLS = 1000;
23 int gameStatus_._ sum_._ myPoint_._ roll_._ length = 0_._ wins[ SIZE ] = { 0 }_._
24 losses[ SIZE ] = { 0 }_._ winSum = 0_._ loseSum = 0;
25
26 srand( time( 0 ) );
27 
28 for ( int i = 1; i <= ROLLS; ++i ) {
29 sum = rollDice();
30 roll = 1;
31
32 switch ( sum ) {
33 case 7: case 11:
34 gameStatus = WIN;
35 break;
36 case 2: case 3: case 12:
37 gameStatus = LOSE;
38 break;
39 default:
40 gameStatus = CONTINUE;
41 myPoint = sum;
42 break;
43 }
44
45 while ( gameStatus == CONTINUE ) {
46 sum = rollDice();
47 ++roll;
48
49 if ( sum == myPoint )
50 gameStatus = WIN;
51 else if ( sum == 7 )
52 gameStatus = LOSE;
53 }
54
55 if ( roll > 21 )roll = 21;
57 
58 if ( gameStatus == WIN ) {
59 ++wins[ roll ];
60 ++winSum;
61 }
62 else {
63 ++losses[ roll ];
64 ++loseSum;
65 }
66 }
67 
68 cout << ""Games won or lost after the 20th roll"" 
69 << ""\nare displayed as the 21st roll.\n\n"";
70
71 for ( int z = 1; z <= 21; ++z ) 
72 cout << setw( 3 ) << wins[ z ] << "" games won and "" << setw( 3 )
73 << losses[ z ] << "" games lost on roll "" << z << '\n';
74 
75 // calculate chances of winning
76 cout << setiosflags( ios::fixed | ios::showpoint )
77 << ""\nThe chances of winning are "" << winSum << "" / ""
78 << winSum + loseSum << "" = "" << setprecision( 2 )
79 << 100.0 * winSum / ( winSum + loseSum ) << ""%\n"";
80 
81 // calculate average length of game
82 for ( int k = 1; k <= 21; ++k )
83 length += wins[ k ] * k + losses[ k ] * k;
84
85 cout << ""The average game length is "" << setprecision( 2 )
86 << length / 1000.0 << "" rolls."" << endl;
87
88 return 0;
89 }
90
91 int rollDice( void )
92 {
93 int die1_._ die2_._ workSum;
94
95 die1 = 1 + rand() % 6;
96 die2 = 1 + rand() % 6;
97 workSum = die1 + die2;
98
99 return workSum;
100 }"
875," use recursive function linearSearch to perform a linear search of
the array. The function should receive an integer array and the size of the array as arguments","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int linearSearch( const int []_._ int_._ int_._ int );
9
10 int main()
11 {
12 const int SIZE = 100;
13 int array[ SIZE ]_._ searchKey_._ element;
14
15 for ( int loop = 0; loop < SIZE; ++loop )
16 array[ loop ] = 2 * loop;
17
18 cout << ""Enter the integer search key: "";
19 cin >> searchKey;
20
21 element = linearSearch( array_._ searchKey_._ 0_._ SIZE - 1 );
22
23 if ( element != -1 )
24 cout << ""Found value in element "" << element << endl;
25 else
26 cout << ""Value not found"" << endl;
27
28 return 0;
29 }
30
31 int linearSearch( const int array[]_._ int key_._ int low_._ int high )
32 {
33 if ( array[low] == key )
34 return low;
35 else if ( low == high )
36 return -1;
37 else
38 return linearSearch( array_._ key_._ low + 1_._ high );
39 }"
876,"To use a recursive function binarySearch to perform the binary search
of the array. The function should receive an integer array and the starting subscript and ending subscript as arguments","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <iomanip> 
9
10 using std::setw; 
11
12 const int SIZE = 15;
13
14 int binarySearch( const int []_._ int_._ int_._ int );
15 void printRow( const int []_._ int_._ int_._ int );
16 void printHeader( void );
17
18 int main()
19 {
20 int a[ SIZE ]_._ key_._ result;
21
22 for ( int i = 0; i < SIZE; ++i )
23 a[ i ] = 2 * i;
24
25 cout << ""Enter a number between 0 and 28: "";
26 cin >> key;
27
28 printHeader();
29 result = binarySearch( a_._ key_._ 0_._ SIZE - 1 );
30
31 if ( result != -1 )
32 cout << '\n' << key << "" found in array element "" << result << endl;
33 else
34 cout << '\n' << key << "" not found"" << endl;
35
36 return 0;
37 }
38
39 int binarySearch( const int b[]_._ int searchKey_._ int low_._ int high )
40 {
41 int middle;
42
43 if ( low <= high ) {
44 middle = ( low + high ) / 2;
45 printRow( b_._ low_._ middle_._ high );
46
47 if ( searchKey == b[ middle ] )
48 return middle;
49 else if ( searchKey < b[ middle ] )
50 return binarySearch( b_._ searchKey_._ low_._ middle - 1 );
51 else
52 return binarySearch( b_._ searchKey_._ middle + 1_._ high );
53 }
54
55 return -1; // searchKey not found
56 }
57
58 // Print a header for the outputvoid printHeader( void )
60 {
61 cout << ""Subscripts:\n"";
62
63 for ( int i = 0; i < SIZE; ++i )
64 cout << setw( 3 ) << i << ' ';
65
66 cout << '\n';
67
68 for ( int k = 1; k <= 4 * SIZE; ++k )
69 cout << '-';
70
71 cout << '\n';
72 }
73
74 // print one row of output showing the current
75 // part of the array being processed.
76 void printRow( const int b[]_._ int low_._ int mid_._ int high )
77 {
78 for ( int i = 0; i < SIZE; ++i )
79 if ( i < low || i > high )
80 cout << "" "";
81 else if ( i == mid )
82 cout << setw( 3 ) << b[ i ] << '*'; // mark middle value
83 else
84 cout << setw( 3 ) << b[ i ] << ' ';
85
86 cout << '\n';
87 }"
877,"Write a recursive function printArray that takes an array and the size of the array as arguments and
returns nothing. The function should stop processing and return when it receives an array of size zero.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
67 #include <iomanip> 
89 using std::setw; 
10
11 #include <cstdlib>
12 #include <ctime>
13
14 void printArray( const int []_._ int_._ int );
16 int main()
17 {
18 const int SIZE = 10_._ MAXNUMBER = 500;
19 int array[ SIZE ];
20
21 srand( time( 0 ) );
22
23 for ( int loop = 0; loop < SIZE; ++loop )
24 array[ loop ] = 1 + rand() % MAXNUMBER;
25
26 cout << ""Array values printed in main:\n"";
27
28 for ( int j = 0; j < SIZE; ++j )
29 cout << setw( 5 ) << array[ j ];
30
31 cout << ""\n\nArray values printed in printArray:\n"";
32 printArray( array_._ 0_._ SIZE - 1 );
33 cout << endl;
34
35 return 0;
36 }
37
38 void printArray( const int array[]_._ int low_._ int high )
39 {
40 cout << setw( 5 ) << array[ low ];
41
42 if ( low == high )
43 return;
44 else
45 printArray( array_._ low + 1_._ high );
46 }"
878,"Write a recursive function stringReverse that takes a character array containing a string as
an argument_._ prints the string backwards and returns nothing. The function should stop processing and return when the terminating
null character is encountered.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
67 void stringReverse( const char [] );
89 int main()
10 {
11 const int SIZE = 30;
12 char strArray[ SIZE ] = ""Print this string backwards."";
13
14 for ( int loop = 0; loop < SIZE; ++loop )
15 cout << strArray[ loop ];17 cout << '\n';
18 stringReverse( strArray );
19 cout << endl;
20
21 return 0;
22 }
23
24 void stringReverse( const char strArray[] )
25 {
26 if ( strArray[ 0 ] == '\0' )
27 return;
28
29 stringReverse( &strArray[ 1 ] );
30 cout << strArray[ 0 ];
31 }"
879,"Find the minimum value in an array) Write a recursive function recursiveMinimum that takes an integer array and
the array size as arguments and returns the smallest element of the array. The function should stop processing and return when it
receives an array of 1 element.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
67 #include <iomanip> 
89 using std::setw; 
10
11 #include <cstdlib>
12 #include <ctime>
13
14 const int MAXRANGE = 1000;
15 int recursiveMinimum( const int []_._ int_._ int );
16
17 int main()
18 {
19 const int SIZE = 10;
20 int array[ SIZE ]_._ smallest;
21
22 srand( time( 0 ) );
23
24 for ( int loop = 0; loop < SIZE; ++loop )
25 array[ loop ] = 1 + rand() % MAXRANGE;
26
27 cout << ""Array members are:\n"";
28 for ( int k = 0; k < SIZE; ++k )
29 cout << setw( 5 ) << array[ k ];
30
31 cout << '\n';
32 smallest = recursiveMinimum( array_._ 0_._ SIZE - 1 );
33 cout << ""\nSmallest element is: "" << smallest << endl;
34
35 return 0;
36 }37
38 int recursiveMinimum( const int array[]_._ int low_._ int high )
39 {
40 static int smallest = MAXRANGE;
41
42 if ( array[ low ] < smallest )
43 smallest = array[ low ];
44
45 return low == high ? smallest : recursiveMinimum( array_._ low + 1_._ high );
46 }"
880,"Write a program that uses function strcmp to compare two strings input by the user. The program should state whether
the first string is less than_._ equal to or greater than the second string.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <cstring> 
9
10 const int SIZE = 20;
11
12 int main()
13 {
14 char string1[ SIZE ]_._ string2[ SIZE ];
15 int result;
16
17 cout << ""Enter two strings: "";
18 cin >> string1 >> string2;
19 
20 result = strcmp( string1_._ string2 );
21 
22 if ( result > 0 )
23 cout << '\""' << string1 << '\""' << "" is greater than \""""
24 << string2 << '\""' << endl;
25 else if ( result == 0 )
26 cout << '\""' << string1 << '\""' << "" is equal to \"""" << string2
27 << '\""' << endl;
28 else
29 cout << '\""' << string1 << '\""' << "" is less than \"""" << string2
30 << '\""' << endl;
31
32 return 0;
33 }"
881,"Write a program that uses function strncmp to compare two strings input by the user. The program should input the number of characters to be compared. The program should state whether the first string is less than_._ equal to or greater than the second
string.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <cstring> 
9
10 const int SIZE = 20;
11
12 int main()
13 { char string1[ SIZE ]_._ string2[ SIZE ];
15 int result_._ compareCount;
16 
17 cout << ""Enter two strings: "";
18 cin >> string1 >> string2;
19 cout << ""How many characters should be compared: "";
20 cin >> compareCount;
21 
22 result = strncmp( string1_._ string2_._ compareCount );
23 
24 if ( result > 0 )
25 cout << '\""' << string1 << ""\"" is greater than \"""" << string2
26 << ""\"" up to "" << compareCount << "" characters\n"";
27 else if ( result == 0 )
28 cout << '\""' << string1 << ""\"" is equal to \"""" << string2
29 << ""\"" up to "" << compareCount << "" characters\n"";
30 else
31 cout << '\""' << string1 << ""\"" is less than \"""" << string2
32 << ""\"" up to "" << compareCount << "" characters\n"";
33 
34 cout << endl;
35
36 return 0;
37 }"
882," called article_._ noun_._ verb and preposition. The program should create a sentence by selecting a word at random
from each array in the following order: article_._ noun_._ verb_._ preposition_._ article and noun. As each word is picked_._
it should be concatenated to the previous words in an array that is large enough to hold the entire sentence. The words should be
separated by spaces. When the final sentence is output_._ it should start with a capital letter and end with a period. The program should
generate 20 such sentences.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
67 #include <cstdlib>
8 #include <ctime>
9
10 #include <cstring> 
11 #include <cctype>
12
13 const int SIZE = 100;
14
15 int main()
16 {const char *article[] = { ""the""_._ ""a""_._ ""one""_._ ""some""_._ ""any"" }_._
18 *noun[] = { ""boy""_._ ""girl""_._ ""dog""_._ ""town""_._ ""car"" }_._
19 *verb[] = { ""drove""_._ ""jumped""_._ ""ran""_._ ""walked""_._ ""skipped"" }_._
20 *preposition[] = { ""to""_._ ""from""_._ ""over""_._ ""under""_._ ""on"" };
21 char sentence[ SIZE ] = """";
22
23 for ( int i = 1; i <= 20; ++i ) {
24 strcat( sentence_._ article[ rand() % 5 ] );
25 strcat( sentence_._ "" "" );
26 strcat( sentence_._ noun[ rand() % 5 ] );
27 strcat( sentence_._ "" "" );
28 strcat( sentence_._ verb[ rand() % 5 ] );
29 strcat( sentence_._ "" "" );
30 strcat( sentence_._ preposition[ rand() % 5 ] );
31 strcat( sentence_._ "" "" );
32 strcat( sentence_._ article[ rand() % 5 ] );
33 strcat( sentence_._ "" "" );
34 strcat( sentence_._ noun[ rand() % 5 ] );
35 cout << static_cast< char > ( toupper( sentence[ 0 ] ) ) 
36 << &sentence[ 1 ] << "".\n"";
37 sentence[ 0 ] = '\0';
38 }
39
40 cout << endl;
41
42 return 0;
43 }"
883,"Write a program that encodes English language phrases into pig Latin. Pig Latin is a form of coded language often used for
amusement. Many variations exist in the methods used to form pig Latin phrases","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <cstring> 
9
10 const int SIZE = 80;
11
12 void printLatinWord( char const * const );
13
14 int main()
15 {
16 char sentence[ SIZE ]_._ *tokenPtr;
17 
18 cout << ""Enter a sentence:\n"";
19 cin.getline( sentence_._ SIZE );
20 
21 cout << ""\nThe sentence in Pig Latin is:\n"";
22 tokenPtr = strtok( sentence_._ "" ._._;"" );
23 
24 while ( tokenPtr ) {
25 printLatinWord( tokenPtr );
26 tokenPtr = strtok( 0_._ "" ._._;"" );
27 
28 if ( tokenPtr )
29 cout << ' ';
30 }
31 
32 cout << '.' << endl;
33
34 return 0;
35 }
36
37 void printLatinWord( char const * const wordPtr )
38 {
39 int len = strlen( wordPtr );
40 for (int i = 1; i < len; ++i )
41 cout << *( wordPtr + i );
42
43 cout << *wordPtr << ""ay"";
44 }"
884,"Write a program that inputs a telephone number as a string in the form (555) 555-5555. The program should use function strtok to extract the area code as a token_._ the first three digits of the phone number as a token_._ and the last four digits of the
phone number as a token. The seven digits of the phone number should be concatenated into one string. The program should convert
the area code string to int and convert the phone number string to long. Both the area code and the phone number should be
printed."," #include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <cstring> 
9 #include <cstdlib>
10
11 int main()
12 {
13 const int SIZE1 = 20_._ SIZE2 = 10;
14 char p[ SIZE1 ]_._ 
15 phoneNumber[ SIZE2 ] = { '\0' }_._ *tokenPtr;
16 int areaCode;
17 long phone;
18 
19 cout << ""Enter a phone number in the form (555) 555-5555:\n"";
20 cin.getline( p_._ SIZE1 );
21 
22 areaCode = atoi( strtok( p_._ ""()"" ) );
23 
24 tokenPtr = strtok( 0_._ ""-"" );
25 strcpy( phoneNumber_._ tokenPtr );
26 tokenPtr = strtok( 0_._ """" );
27 strcat( phoneNumber_._ tokenPtr );
28 phone = atol( phoneNumber );
29
30 cout << ""\nThe integer area code is "" << areaCode 
31 << ""\nThe long integer phone number is "" << phone << endl;
32
33 return 0;
34 }"
885,Write a program that inputs a line of text_._ tokenizes the line with function strtok and outputs the tokens in reverse order,"#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <cstring> 
9
10 void reverseTokens( char * const );int main()
13 {
14 const int SIZE = 80;
15 char text[ SIZE ];
16 
17 cout << ""Enter a line of text:\n"";
18 cin.getline( text_._ SIZE );
19 reverseTokens( text );
20 cout << endl;
21
22 return 0;
23 }
24
25 void reverseTokens( char * const sentence )
26 {
27 char *pointers[ 50 ]_._ *temp;
28 int count = 0;
29 
30 temp = strtok( sentence_._ "" "" );
31 
32 while ( temp ) {
33 pointers[ count++ ] = temp;
34 temp = strtok( 0_._ "" "" );
35 }
36 
37 cout << ""\nThe tokens in reverse order are:\n"";
38
39 for ( int i = count - 1; i >= 0; --i )
40 cout << pointers[ i ] << ' ';
41 }"
886,"Use the string comparison functions discussed in Section 5.12.2 and the techniques for sorting arrays developed in Chapter
4 to write a program that alphabetizes a list of strings. Use the names of 10 or 15 towns in your area as data for your program.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <cstring> 
9
10 const int SIZE = 50;
11 void bubbleSort( char [][ SIZE ] );
12
13 int main()
14 {
15 char array[ 10 ][ SIZE ];
16 int i;
17
18 for ( i = 0; i < 10; ++i ) {19 cout << ""Enter a string: "";
20 cin >> &array[ i ][ 0 ];
21 }
22 
23 bubbleSort( array );
24 cout << ""\nThe strings in sorted order are:\n"";
25 
26 for ( i = 0; i < 10; ++i )
27 cout << &array[ i ][ 0 ] << endl;
28
29 return 0;
30 }
31
32 void bubbleSort( char a[][ SIZE ] )
33 {
34 char temp[ SIZE ];
35 
36 for ( int i = 0; i <= 8; ++i )
37 for ( int j = 0; j <= 8; ++j )
38 if ( strcmp( &a[ j ][ 0 ]_._ &a[ j + 1 ][ 0 ] ) > 0 ) {
39 strcpy( temp_._ &a[ j ][ 0 ] );
40 strcpy( &a[ j ][ 0 ]_._ &a[ j + 1 ][ 0 ] );
41 strcpy(&a[ j + 1 ][ 0 ]_._ temp );
42 }
43 }"
887,"Write two versions of function strlen in Fig. 5.29. The first version should use array subscripting_._ and the second version
should use pointers and pointer arithmetic.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 unsigned long stringLength1( const char * );
9 unsigned long stringLength2( const char * );
10
11 int main()
12 {
13 char string[ 100 ];
14
15 cout << ""Enter a string: "";
16 cin >> string;
17
18 cout << ""\nAccording to stringLength1 the string length is: ""
19 << stringLength1( string ) 
20 << ""\nAccording to stringLength2 the string length is: ""
21 << stringLength2( string ) << endl;
22
23 return 0;
24 }
25
26 unsigned long stringLength1( const char *sPtr )
27 {
28 // array subscript notation
29 for ( int length = 0; sPtr[ length ] != '\0'; ++length )
30 ; // empty body
31
32 return length;
33 }
34
35 unsigned long stringLength2( const char *sPtr )
36 {
37 // pointer notation
38 for ( int length = 0; *sPtr != '\0'; ++sPtr_._ ++length )
39 ; // empty body
40
41 return length;
42 }"
888,"Write a program that reads several lines of text and prints a table indicating the number of occurrences of each different
word in the text. The first version of your program should include the words in the table in the same order in which they
appear in the text.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 #include <iomanip> 
9
10 using std::setw; 
11
12 #include <cctype>
13
14 const int SIZE = 80;
15
16 int main()
17 {
18 char letters[ 26 ] = { 0 }_._ text[ 3 ][ SIZE ]_._ i;
19 
20 cout << ""Enter three lines of text:\n"";
21 
22 for ( i = 0; i <= 2; ++i )
23 cin.getline( &text[ i ][ 0 ]_._ SIZE );
24 
25 for ( i = 0; i <= 2; ++i )
26 for ( int j = 0; text[ i ][ j ] != '\0'; ++j )
27 if ( isalpha( text[ i ][ j ] ) )
28 ++letters[ tolower( text[ i ][ j ] ) - 'a' ]; 
29 
30 cout << ""\nTotal letter counts:\n"";
31 
32 for ( i = 0; i <= 25; ++i )
33 cout << setw( 3 ) << static_cast< char > ( 'a' + i ) << ':' << setw( 3 )
34 << static_cast< int > ( letters[ i ] ) << endl;
35
36 return 0;
37 }"
889,"(Printing Dates in Various Formats) Dates are commonly printed in several different formats in business correspondence.
Two of the more common formats are
07/21/1955 and July 21_._ 1955
Write a program that reads a date in the first format and prints that date in the second format.","#include <iostream> 
34 using std::cout; 
5 using std::endl; 
6 using std::cin; 
78 int main()
9 {10 const char *months[ 13 ] = { """"_._ ""January""_._ ""February""_._ ""March""_._ ""April""_._
11 ""May""_._ ""June""_._ ""July""_._ ""August""_._ ""September""_._ 
12 ""October""_._ ""November""_._ ""December"" };
13 int m_._ d_._ y;
14 
15 cout << ""Enter a date in the form mm/dd/yy: \n"";
16 cin >> m;
17 cin.ignore();
18 cin >> d;
19 cin.ignore();
20 cin >> y;
21 
22 cout << ""The date is: "" << months[ m ] << ' ' << d << ' ' 
23 << ( ( y < 50 ) ? y + 2000 : y + 1900 ) << endl;
24
25 return 0;
26 }"
890,"Write a program that inputs a numeric check amount and writes the word equivalent of the amount. For example_._ the amount
112.43 should be written as
ONE HUNDRED TWELVE and 43/100","#include <iostream> 
56 using std::cout; 
7 using std::endl; 
8 using std::cin; 
9
10 int main()
11 {
12 const char *digits[ 10 ] = { """"_._ ""ONE""_._ ""TWO""_._ ""THREE""_._ ""FOUR""_._ ""FIVE""_._
13 ""SIX""_._ ""SEVEN""_._ ""EIGHT""_._ ""NINE"" };
14 const char *teens[ 10 ] = { ""TEN""_._ ""ELEVEN""_._ ""TWELVE""_._ ""THIRTEEN""_._ 
15 ""FOURTEEN""_._ ""FIFTEEN""_._ ""SIXTEEN""_._ 
16 ""SEVENTEEN""_._ ""EIGHTEEN""_._ ""NINETEEN""};
17 const char *tens[ 10 ] = { """"_._ ""TEN""_._ ""TWENTY""_._ ""THIRTY""_._ ""FORTY""_._ ""FIFTY""_._
18 ""SIXTY""_._ ""SEVENTY""_._ ""EIGHTY""_._ ""NINETY"" };
19 int dollars_._ cents_._ digit1_._ digit2;
20 
21 cout << ""Enter the check amount (0.00 to 99.99): "";
22 cin >> dollars;
23 cin.ignore();
24 cin >> cents;
25 cout << ""The check amount in words is:\n"";
26 
27 if ( dollars < 10 )
28 cout << digits[ dollars ] << ' ';
29 else if ( dollars < 20 )
30 cout << teens[ dollars - 10 ] << ' ';
31 else {
32 digit1 = dollars / 10;
33 digit2 = dollars % 10;
34 
35 if ( !digit2 )
36 cout << tens[ digit1 ] << ' ';
37 else
38 cout << tens[ digit1 ] << ""-"" << digits[ digit2 ] << ' ';
39 }
40 
41 cout << ""Dollars and "" << cents << ""/100"" << endl;
42
43 return 0;
44 }"
891,"Create a class called Complex for performing arithmetic with complex numbers. Write a driver program to test your class. 
Complex numbers have the form 
realPart + imaginaryPart * i","#ifndef p6_06_H
3 #define p6_06_H
45 class Complex {
6 public:
7 Complex( double = 0.0_._ double = 0.0 ); // default constructor
8 void addition( const Complex & );
9 void subtraction( const Complex & );
10 void printComplex( void );
11 void setComplexNumber( double_._ double );
12 private:
13 double realPart;
14 double imaginaryPart;
15 };
16
17 #endif
17#include <iostream> 
21
22 using std::cout; 
23
24 #include ""p6_06.h""
25
26 Complex::Complex( double real_._ double imaginary )
27 { setComplexNumber( real_._ imaginary ); }
28
29 void Complex::addition( const Complex &a )
30 {
31 realPart += a.realPart;imaginaryPart += a.imaginaryPart;
33 }
34
35 void Complex::subtraction( const Complex &s )
36 {
37 realPart -= s.realPart;
38 imaginaryPart -= s.imaginaryPart;
39 }
40
41 void Complex::printComplex( void )
42 { cout << '(' << realPart << ""_._ "" << imaginaryPart << ')'; }
43
44 void Complex::setComplexNumber( double rp_._ double ip )
45 {
46 realPart = rp;
47 imaginaryPart = ip;
48 }"
892,"finds the
biggest element in an array","const int ARRAY_SIZE = 5 // Size of the array 
int itemarray[ARRAY_SIZE] = {1_._ 2_._ 5000_._ 3_._ 4}; // An array 
int &biggest(void) 
{ 
 int index; // Current index 
 int biggest; // Index of the biggest element 
 
 // Assume the first is the biggest 
 biggest = 0; 
 for (index = 1; index < ARRAY_SIZE; ++index) 
 if (item_array[biggest] < item_array[index]) 
 biggest = index; 
 }
 return (item_array[biggest]); 
}"
893,"print ""I love C++""","#include <iostream>
int main()
{
std::cout << ""I Love C++"";
return 0;
}"
894,"print ""It's not much_._ but it's a start""","#include <iostream>
int main ()
{
using namespace std;
cout << ""It's not much_._ but it's a start!"";
return 0;
}"
895,C++ program to add two numbers,"#include <iostream>
int main()
{
using namespace std;
int number1;
int number2;
number1 = 12;
number2 = 23;
cout << (number1 + number2);
return 0;
}"
896,C++ program to add two numbers,"#include <iostream>
int main()
{
using namespace std;
int number1 = 12;
int number2 = 23;
cout << (number1 + number2);
return 0;
}"
897,global and local variables example demonstration,"#include <iostream>
void smiley(); //function prototype
int main()
{
using namespace std;
smiley();
cout << ""The value of number within main is "" << number;
return 0;
}
void smiley()
{
using namespace std;
int number = 44;
cout <<""smiley has executed and \n"";
cout <<""the value of number is "" << number << ""\n"";
}"
898,short datatype display,"#include <iostream>
int main()
{
using namespace std;
short number1 = 12.75; //short may contain only whole numbers
cout << ""The value of number1 is "" << number1;
return 0;
}"
899,boolean datatype display,"#include <iostream>
int main()
{
using namespace std;
bool married = true;
bool retired = false;
cout << ""The value of married is "" << married << endl;
cout << ""The value of retired is "" << retired ;
return 0;
}"
900,print string,"#include <iostream>
#include <string> // include for C++ standard string class
int main()
{
using namespace std;
string string1 = ""John Smiley"";
cout << ""The value of string1 "" << string1;return 0;
}"
901,c++ program to add two numbers,"#include <iostream>
int main()
{
using namespace std;
int number1 = 12;
int number2 = 23 ;
cout << ""The answer is "" << (number1 + number2);
return 0;
}"
902,c++ program to subtract two numbers,"#include <iostream>
int main()
{
using namespace std;
int number1 = 44;
int number2 = 33;
int result = 0;result = number1 - number2;
cout << ""The answer is "" << result;
return 0;
}"
903,c++ program to multiply two operands,"#include <iostream>
int main()
{
using namespace std;
int number1 = 4;
int number2 = 3;
int result = 0;
result = number1 * number2;
cout << ""The answer is "" << result;
return 0;
}"
904,c++ program to divide two numbers ,"#include <iostream>
int main()
{
using namespace std;
int number1 = 5;
int number2 = 2;
int result = 0;
result = number1 / number2;
cout << ""The answer is "" << result;
return 0;
}"
905,c++ program to divide two numbers in float,"#include <iostream>
int main()
{
using namespace std;
int number1 = 5;
int number2 = 2;
float result = 0;
result = number1 / number2;
cout << ""The answer is "" << result;
return 0;
}"
906, example of the remainder operation,"#include <iostream>
int main()
{
using namespace std;
int number1 = 5;
int number2 = 2;
int result = 0;
result = number1 % number2;
cout << ""The remainder is "" << result;
return 0;
}"
907,c++ program to find odd and even,"#include <iostream>
int main()
{
using namespace std;
int oddnumber1 = 3;
int evennumber1 = 4;
int oddnumber2 = 5;
int evennumber2 = 6;int result = 0;
result = oddnumber1 % 2;
cout << ""The remainder is "" << result << endl;
result = evennumber1 % 2;
cout << ""The remainder is "" << result << endl;
result = oddnumber2 % 2;
cout << ""The remainder is "" << result << endl;
result = evennumber2 % 2;
cout << ""The remainder is "" << result;
return 0;
}"
908,c++ program to increase a number by 1,"#include <iostream>
int main()
{
using namespace std;
int number1 = 5;
number1 = number1 + 1;
cout << ""The answer is "" << number1;
return 0;
}"
909,c++ program to increment a number,"#include <iostream>
int main()
{
using namespace std;
int number1 = 5;
number1++;
cout << ""The answer is "" << number1;
return 0;
}"
910,c++ program to decrement a number,"#include <iostream>
int main()
{
using namespace std;
int number1 = 5;
number1--;
cout << ""The answer is "" << number1;
return 0;
}"
911,c++ program to display precedence of operators,"#include <iostream>
int main()
{
using namespace std;
cout << (3 + 6 + 9 / 3);
return 0;
}"
912,c++ program to display comparison operators,"#include <iostream>
int main()
{
using namespace std;
int number1 = 22;
if (number1 == 22) cout << ""number1 is equal to 22"";
return 0;
}"
913,c++ program to display comparison operators,"#include <iostream>
int main()
{
using namespace std;
int number1 = 22;
cout << boolalpha << (number1 == 22);
return 0;
}"
914,c++ and operation,"#include <iostream>
#include <string>
int main()
{using namespace std;
string name = ""Smith"";
int number1 = 99;
if (name == ""Smith"" && number1 == 22)
cout << ""Both sides of the AND expression are True"";
return 0;
}"
915,c++ to demonstrate or operator,"#include <iostream>
#include <string>
int main()
{
using namespace std;
string name = ""Smith"";
int number1 = 99;
if (name == ""Smith"" || number1 == 22)
cout << ""One or both sides of the OR expression are True"";
return 0;
}"
916,c++ or operator,"#include <iostream>
#include <string>
int main()
{
using namespace std;
int number = 99;
if (number == 22 || 88)
cout << ""One or both sides of the OR expression are True"";
return 0;
}"
917,c++ program for not operator,"#include <iostream>
#include <string>
int main()
{
using namespace std;
int number = 13;
cout << boolalpha << (number == 13);
return 0;
}"
918,"Add Variables and Constants to the
Grade Calculation Program","#include <iostream>
int main ()
{
using namespace std;
const float MIDTERM_PERCENTAGE = .25;
const float FINALEXAM_PERCENTAGE = .25;
const float RESEARCH_PERCENTAGE = .30;
const float PRESENTATION_PERCENTAGE = .20;
int midterm = 70;
int finalExamGrade = 80;
int research = 90;
int presentation = 100;
float finalNumericGrade = 0;
finalNumericGrade =
(midterm * MIDTERM_PERCENTAGE) +
(finalExamGrade * FINALEXAM_PERCENTAGE) +
(research * RESEARCH_PERCENTAGE) +
(presentation * PRESENTATION_PERCENTAGE);
cout << ""Midterm grade is : "" << midterm << endl;
cout << ""Final Exam grade is : "" << finalExamGrade << endl;
cout << ""Research grade is : "" << research << endl;cout << ""Presentation grade is: "" << presentation <<
endl << endl;
cout << ""The final grade is: "" << finalNumericGrade;
return 0;
}"
919,Experimenting with C++ Input,"#include <iostream>
#include <string>
int main()
{
using namespace std;
string response;
cout << ""What is your name? "";
cin >> response;
cout << ""It's nice to meet you_._ "" << response;
return 0;
}"
920,"Eat at Joe’s (The Sequence Structure’s
Falling Rock Behavior)","#include <iostream>\nint main()
{
using namespace std;
cout << ""Eat at Joe's"" << endl;
cout << ""Eat at Tom's"" << endl;
cout << ""Eat at Kevin's"" << endl;
cout << ""Eat at Rich's"" << endl;
cout << ""Eat at Rose's"" << endl;
cout << ""Eat at Ken's"" << endl;
cout << ""Eat at Melissa's"" << endl;
return 0;
}"
921,c++ program for The If Statement (,"#include <iostream>
#include <string>
int main()
{
using namespace std;
string today;
cout << ""What day of the week is it? "";
cin >> today;
if (today == ""Sunday"")
cout << ""Eat at Joe's"";
if (today == ""Monday"")
cout << ""Eat at Tom's"";
if (today == ""Tuesday"")
cout << ""Eat at Kevin's"";
if (today == ""Wednesday"")
cout << ""Eat at Rich's"";
if (today == ""Thursday"")
cout << ""Eat at Rose's"";
if (today == ""Friday"")
cout << ""Eat at Ken's"";if (today == ""Saturday"")
cout << ""Eat at Melissa's"";
}"
922,c++ program for The Switch Statement/Structure,"int main()
{
using namespace std;
char response[256];
cout << ""What is your age? "";
cin.getline(response_._256);
if (strlen(response) == 0) {
cout << ""You must tell me your age..."";
return 1;
}
if (atoi(response) > 61) {
cout << response << "" - You must be retired"";
return 0;
}
switch (atoi(response))
{
case 61:
cout << response <<
"" - You have 1 year until retirement"";
break;
case 60:
cout << response <<
"" - You have 2 years until retirement"";
break;
case 59:
cout << response <<
"" - You have 3 years until retirement"";
break;
default:
cout << response <<
"" - You have a long time until retirement"";
break;
}
return 0;
}"
923,c++ program for FOR LOOP,"#include <iostream>
int main()
{
using namespace std;
cout <<
""Elevator #1 stops at these floors..."" << endl;
for (int counter = 2;counter < 21;counter ++)
cout << counter << endl;
return 0;
}"
924,"a For loop to display the odd-numbered floors at
which elevator 3 stops","#include <iostream>
int main()
{
using namespace std;
cout <<
""Elevator #3 stops at these floors..."" << endl;
for (int counter = 3;counter < 21;counter+=2)
cout << counter << endl;
return 0;
}"
925," For Loop to Work
with Variables and Constants
In this exercise_._ you’ll code a For loop to d","#include <iostream>int main()
{
using namespace std;
const int TOP_FLOOR = 20;
cout << ""Elevator #1 stops at these floors..."" << endl;
for (int bottom_floor = 2;
bottom_floor < TOP_FLOOR+1;bottom_floor++)
cout << bottom_floor << endl;
return 0;
}"
926,Displaying the Floors Backwards Correctly,"#include <iostream>
int main()
{
using namespace std;
cout <<
""Floors in the hotel_._ listed backwards are..."" <<
endl;
for (int counter = 20;counter > 1;counter--)
cout << counter << endl;
return 0;
}"
927,Using the While Loop to Display the Floors of the Hotel,"#include <iostream>
int main()
{
using namespace std;
int counter = 2;
cout << ""The floors in the hotel are..."" << endl;
while (counter < 21) {
cout << counter << endl;
counter++;
}
return 0;
}"
928,An Indefinite Version of the While Loop,"#include <iostream>
#include <string>\nint main()
{
using namespace std;
int counter = 1;
string response;
cout << ""Should I start counting? "";
cin >> response;
for (int i = 0; i < response.length(); i++) {
response[i] = toupper (response[i]);
}
while (response == ""YES"") {
cout << ""counter is "" << counter << endl;
counter++;
cout << ""Should I continue? "";
cin >> response;
for (int i = 0; i < response.length(); i++) {
response[i] = toupper (response[i]);
} }
cout << ""Thanks for counting with me!"";
return 0;
}"
929,"a Do-While loop structure that displays numbers in
the C++ console window","#include <iostream>
#include <string>
int main()
{
using namespace std;
int counter = 1;
string response;
cout << ""Should I start counting? "";
cin >> response;
for (int i = 0; i < response.length(); i++) {
response[i] = toupper (response[i]);
}
do {
cout << ""counter is "" << counter << endl;
counter++;
cout << ""Should I continue? "";
cin >> response;
for (int i = 0; i < response.length(); i++) {
response[i] = toupper (response[i]);
} // end of for
} while (response == ""YES""); // end of while
cout << ""Thanks for counting with me!"";
return 0;
}"
930,code to display that message out of the main() function and place it in a function of its own,"#include <iostream>
void DisplayMessage(); // Function Prototype
int main()
{
using namespace std;
DisplayMessage(); // Call to Custom Function
return 0;
}
void DisplayMessage() // Custom Function{
using namespace std;
cout << ""I Love C++"";
}"
931,c++ program for function with return type,"#include <iostream>
bool DisplayMessage();\nint main()
{
using namespace std;
cout << endl << ""The value of messageDisplayed is ""
<< boolalpha << DisplayMessage();
return 0;
}
bool DisplayMessage() // Custom Function
{
using namespace std;
cout << ""I Love C++! "";
return true;
}"
932,c++ program for function with return type  and parameters,"#include <iostream>
#include <string>
using namespace std;
void DisplayMessage(string language); // Function Prototype
int main()
{
DisplayMessage(""Java"");
DisplayMessage(""Visual Basic"");DisplayMessage(""C++"");
return 0;
}
void DisplayMessage(string language) // Custom Function
{
cout << ""I Love "" << language << endl;
}"
933,c++ program for function with string parameters,"#include <iostream>
#include <string>
using namespace std;
void DisplayMessage(string language_._ string howMuch);
int main()
{
DisplayMessage(""Java""_._ ""a bunch"");
DisplayMessage(""Visual Basic""_._ ""lots"");
DisplayMessage(""C++""_._ ""a lot more"");
return 0;
}
void DisplayMessage(string language_._ string howMuch)
{
cout << ""I Love "" << language << "" "" << howMuch << endl;
void DisplayMessage(string language_._ string howMuch)
{
cout << ""I Love "" << language << "" "" << howMuch << endl;
}"
934,c++ program for function with string and integers parameters,"using namespace std;
void DisplayMessage(string language_._ string howMuch);
int main()
{
string favorite = ""C++"";
string intensity = ""enormously"";
DisplayMessage(favorite_._ intensity);
return 0;
}
void DisplayMessage(string language_._ string howMuch)
{
cout << ""I Love "" << language << "" "" << howMuch << endl;
}"
935, Arguments Are Passed by Value in C++,"#include <iostream>
#include <string>
using namespace std;
void DisplayMessage(string language_._ string howMuch);\nint main()
{
string favorite = ""C++"";
string intensity = ""enormously"";
DisplayMessage(favorite_._ intensity);
cout << ""The value of favorite in main() is "" << favorite << endl;
return 0;
}
void DisplayMessage(string favorite_._ string intensity)
{
cout << ""The value of favorite in DisplayMessage() is ""
<< favorite << endl;
favorite = ""VB"";
cout << ""The value of favorite in DisplayMessage() is now ""
<< favorite << endl;
}"
936,To Pass Arguments by Reference_._ Use the Ampersand (&),"#include <iostream>
#include <string>
using namespace std;
void DisplayMessage(string &language_._ string &howMuch);
int main()
{
string favorite = ""C++"";
string intensity = ""enormously"";
DisplayMessage(favorite_._ intensity);
cout << ""The value of favorite in main() is "" << favorite << endl;
return 0;
}
void DisplayMessage(string &favorite_._ string &intensity)
{
cout << ""The value of favorite in DisplayMessage() is ""<< favorite << endl;
favorite = ""VB"";
cout << ""The value of favorite in DisplayMessage() is now ""
<< favorite << endl;
}"
937,c++ program for Function Overloading,"#include <iostream>
#include <string>
using namespace std;
void DisplayMessage(string favorite);
void DisplayMessage(string favorite_._ string intensity);
int main()
{
DisplayMessage(""C++"");
DisplayMessage(""C++""_._ ""a lot"");
return 0;
}
void DisplayMessage(string favorite)
{
cout << ""I love "" << favorite << endl;
void DisplayMessage(string favorite_._ string intensity)
{
cout << ""I love "" << favorite << "" "" << intensity << endl;
}"
938,Creating Objects from Your Classes,"#include <iostream>
#include <string>
using namespace std;
class Banner
{
public: string favoriteProgram;
public: void Display()
{
cout << ""I love "" << favoriteProgram;
}
};
int main()
{
Banner x;
x.favoriteProgram = ""C++"";
x.Display();
return 0;
}"
939,Creating Multiple Objects from Your Classes,"#include <iostream>
#include <string>
using namespace std;
class Banner
{
public: string favoriteProgram;
public: Banner()
{
cout << ""Banner's Constructor"" << endl;
}
public: void Display()
{
cout << ""I love "" << favoriteProgram << endl;
}
};"
940,Overloaded Constructors,"#include <iostream>
#include <string>
using namespace std;
class Banner
{
public: string favoriteProgram;
public: Banner()
{
cout << ""Banner's Constructor"" << endl;
favoriteProgram = ""C++"";
}
public: Banner(string param1)
{
cout << ""Banner's Overloaded Constructor"" << endl;
favoriteProgram = param1;
}
public: void Display()
{
cout << ""I love "" << favoriteProgram << endl;
}
};"
941,classes and static variables,"using namespace std;
class Banner
{
public: string favoriteProgram;
public: static int numberOfBannerObjects;
public: Banner()
{
cout << ""Banner's Constructor"" << endl;
numberOfBannerObjects++;
favoriteProgram = ""C++"";
}
public: Banner(string param1)
{
cout << ""Banner's Overloaded Constructor"" << endl;
numberOfBannerObjects++;
favoriteProgram = param1;
}
public: void HowMany()
{
cout << ""The number of Banner objects is "" <<
numberOfBannerObjects << endl;
}
public: void Display()
{
cout << ""I love "" << favoriteProgram << endl;
}
};"
942,destructors in c++ classes,"#include <iostream>
#include <string>
using namespace std;
class Banner
{
public: string favoriteProgram;
public: static int numberOfBannerObjects;
public: Banner()
{
cout << ""Banner's Constructor"" << endl;
numberOfBannerObjects++;
favoriteProgram = ""C++"";
}
public: Banner(string param1)
{
cout << ""Banner's Overloaded Constructor"" << endl;
numberOfBannerObjects++;
favoriteProgram = param1;}
~Banner() {
cout << ""Banner's Destructor"" << endl;
}
public: void HowMany()
{
cout << ""The number of Banner objects is "" <<
numberOfBannerObjects << endl;
}
public: void Display()
{
cout << ""I love "" << favoriteProgram << endl;
}
};"
943,"e MathStudent class for the Grade Calculation
Project. This class will allow a client program to create an object that will
prompt the user for information necessary to calculate the final grade for a
math student","#include <iostream>
#include <string>
using namespace std;
class MathStudent
{
public:
int midterm;
int finalExamGrade;
float finalNumericGrade;
char finalLetterGrade;
float MATH_MIDTERM_PERCENTAGE;
float MATH_FINALEXAM_PERCENTAGE;
public: MathStudent()
{
cout << ""Math Student's Constructor"" << endl;
midterm = 0;
finalExamGrade = 0;
finalNumericGrade = 0;MATH_MIDTERM_PERCENTAGE = .50;
MATH_FINALEXAM_PERCENTAGE = .50;
}
public: void Calculate()
{
char response[256];
string moreGradesToCalculate;
cout << ""Enter the Midterm Grade: "" ;
cin.getline(response_._256);
midterm = atoi(response);
cout << ""Enter the Final Examination Grade: "" ;
cin.getline(response_._256);
finalExamGrade = atoi(response);
finalNumericGrade =
(midterm * MATH_MIDTERM_PERCENTAGE) +
(finalExamGrade * MATH_FINALEXAM_PERCENTAGE);
if (finalNumericGrade >= 90)
finalLetterGrade = 'A';
else
if ((finalNumericGrade >= 83) &
(finalNumericGrade < 90))
finalLetterGrade = 'B';
else
if ((finalNumericGrade >= 76) &
(finalNumericGrade < 83))
finalLetterGrade = 'C';
else
if ((finalNumericGrade >= 65) &
(finalNumericGrade < 76))
finalLetterGrade = 'D';
else
if (finalNumericGrade < 65)
finalLetterGrade = 'F';
}
};"
944,"create the ScienceStudent class for the Grade Calculation
Project. This class will allow a client program to create an object that will
prompt the user for information necessary to calculate the final grade for a
science student","#include <iostream>
#include <string>
using namespace std;
class ScienceStudent
{
public:
int midterm;
int finalExamGrade;
int research;
float finalNumericGrade;
char finalLetterGrade;
float SCIENCE_MIDTERM_PERCENTAGE;
float SCIENCE_FINALEXAM_PERCENTAGE;
float SCIENCE_RESEARCH_PERCENTAGE;
public: ScienceStudent()
{
cout << ""Science Student's Constructor"" << endl;midterm = 0;
finalExamGrade = 0;
research = 0;
finalNumericGrade = 0;
SCIENCE_MIDTERM_PERCENTAGE = .40;
SCIENCE_FINALEXAM_PERCENTAGE = .40;
SCIENCE_RESEARCH_PERCENTAGE = .20;
}
public: void Calculate()
{
char response[256];
string moreGradesToCalculate;
cout << ""Enter the Midterm Grade: "" ;
cin.getline(response_._256);
midterm = atoi(response);
cout << ""Enter the Final Examination Grade: "" ;
cin.getline(response_._256);
finalExamGrade = atoi(response);
cout << ""Enter the Research Grade: "" ;
cin.getline(response_._256);
research = atoi(response);
finalNumericGrade =
(midterm * SCIENCE_MIDTERM_PERCENTAGE) +
(finalExamGrade *
SCIENCE_FINALEXAM_PERCENTAGE) +
(research * SCIENCE_RESEARCH_PERCENTAGE);
if (finalNumericGrade >= 90)
finalLetterGrade = 'A';
else
if ((finalNumericGrade >= 80) &
(finalNumericGrade < 90))
finalLetterGrade = 'B';
else
if ((finalNumericGrade >= 70) &
(finalNumericGrade < 80))
finalLetterGrade = 'C';
else
if ((finalNumericGrade >= 60) &
(finalNumericGrade < 70))
finalLetterGrade = 'D';else
if (finalNumericGrade < 60)
finalLetterGrade = 'F';
}
};"
945,Using the Get() and Set() Methods,"#include <string>
using namespace std;
class Student
{
private:
string studentID;
string name;
string address;
int age;
string SSN;
float GPA;
public: Student() //Constructor Method
{
studentID = ""123"";
name = ""Mary Smith"";
address = ""22 Twain Drive"";
age = 22;
SSN = ""111-22-3333"";
GPA = 2.12;
}
public: void Display()
cout << ""Student ID: "" << studentID << endl <<
""Name: "" << name << endl <<
""Address: "" << address << endl <<
""Age: "" << age << endl;
}
public: void SetAddress(string temp)
{
address = temp;
}
public: string GetAddress()
{
return address;
}
public: void SetAge(int temp)
{
if (temp < 1)
{
cout << ""Invalid Age "" << temp << "" Program Terminating"" << endl;
exit(1);
}
else
age = temp;
}
public: int GetAge()
{
return age;
}
};"
